#define SINGLE_FILE
/**
  ******************************************************************************
  * @file    number.hh
  * @author  Pierre-Emmanuel Novac <penovac@unice.fr>, LEAT, CNRS, Université Côte d'Azur, France
  * @version 1.0.0
  * @date    2 february 2021
  * @brief   Template generating plain C code for the implementation of Convolutional Neural Networks on MCU
  */

#ifndef __NUMBER_H__
#define __NUMBER_H__

#include <stdint.h>

#define FIXED_POINT	9	// Fixed point scaling factor, set to 0 when using floating point
#define NUMBER_MIN	-32768	// Max value for this numeric type
#define NUMBER_MAX	32767	// Min value for this numeric type
typedef int16_t number_t;		// Standard size numeric type used for weights and activations
typedef int32_t long_number_t;	// Long numeric type used for intermediate results

#ifndef min
static inline long_number_t min(long_number_t a, long_number_t b) {
	if (a <= b)
		return a;
	return b;
}
#endif

#ifndef max
static inline long_number_t max(long_number_t a, long_number_t b) {
	if (a >= b)
		return a;
	return b;
}
#endif

#if FIXED_POINT > 0 // Scaling/clamping for fixed-point representation
static inline long_number_t scale_number_t(long_number_t number) {
	return number >> FIXED_POINT;
}
static inline number_t clamp_to_number_t(long_number_t number) {
	return (number_t) max(NUMBER_MIN, min(NUMBER_MAX, number));
}
#else // No scaling/clamping required for floating-point
static inline long_number_t scale_number_t(long_number_t number) {
	return number;
}
static inline number_t clamp_to_number_t(long_number_t number) {
	return (number_t) number;
}
#endif


#endif //__NUMBER_H__
/**
  ******************************************************************************
  * @file    maxpool.cc
  * @author  Pierre-Emmanuel Novac <penovac@unice.fr>, LEAT, CNRS, Université Côte d'Azur, France
  * @version 1.0.0
  * @date    24 march 2020
  * @brief   Template generating plain C code for the implementation of Convolutional Neural Networks on MCU
  */

#ifndef SINGLE_FILE
#include "number.h"
#endif

#define INPUT_CHANNELS  1
#define INPUT_SAMPLES   16000
#define POOL_SIZE       10
#define POOL_STRIDE     10
#define POOL_PAD        0 // Unsupported
#define POOL_LENGTH	    ( ( (INPUT_SAMPLES - POOL_SIZE + (2*POOL_PAD) ) / POOL_STRIDE ) + 1 )

#define ACTIVATION_LINEAR

typedef number_t max_pooling1d_output_type[INPUT_CHANNELS][POOL_LENGTH];

static inline void max_pooling1d(
  const number_t input[INPUT_CHANNELS][INPUT_SAMPLES], 	    // IN
  number_t output[INPUT_CHANNELS][POOL_LENGTH]) {	// OUT

  unsigned short pos_x, k; 	// loop indexes for output volume
  unsigned int x;
  number_t max, tmp; 

  for (k = 0; k < INPUT_CHANNELS; k++) 
    for (pos_x = 0; pos_x < POOL_LENGTH; pos_x++) {
#ifdef ACTIVATION_LINEAR
      max = input[k][pos_x*POOL_STRIDE];
      x = 1;
#elif defined(ACTIVATION_RELU)
      max = 0;
      x = 0;
#endif
      for (; x < POOL_SIZE; x++) {
        tmp = input[k][(pos_x*POOL_STRIDE)+x]; 
        if (max < tmp)
          max = tmp;
      }
      output[k][pos_x] = max; 
    }
}

#undef INPUT_CHANNELS  
#undef INPUT_SAMPLES
#undef POOL_SIZE
#undef POOL_STRIDE
#undef POOL_PAD
#undef POOL_LENGTH
#undef ACTIVATION_LINEAR
/**
  ******************************************************************************
  * @file    conv.cc
  * @author  Pierre-Emmanuel Novac <penovac@unice.fr>, LEAT, CNRS, Université Côte d'Azur, France
  * @version 1.0.0
  * @date    24 march 2020
  * @brief   Template generating plain C code for the implementation of Convolutional Neural Networks on MCU
  */

#ifndef SINGLE_FILE
#include "number.h"
#endif

#define INPUT_CHANNELS      1
#define INPUT_SAMPLES       1600
#define CONV_FILTERS        32
#define CONV_KERNEL_SIZE    80
#define CONV_STRIDE         4

#define ZEROPADDING_LEFT    0
#define ZEROPADDING_RIGHT   0

#define CONV_OUTSAMPLES     ( ( (INPUT_SAMPLES - CONV_KERNEL_SIZE + ZEROPADDING_LEFT + ZEROPADDING_RIGHT) / CONV_STRIDE ) + 1 )

#define ACTIVATION_RELU

typedef number_t conv1d_output_type[CONV_FILTERS][CONV_OUTSAMPLES];

static inline void conv1d(
  const number_t input[INPUT_CHANNELS][INPUT_SAMPLES],               // IN
  const number_t kernel[CONV_FILTERS][INPUT_CHANNELS][CONV_KERNEL_SIZE], // IN

  const number_t bias[CONV_FILTERS],						                // IN

  number_t output[CONV_FILTERS][CONV_OUTSAMPLES]) {               // OUT

  unsigned short pos_x, z, k; 	// loop indexes for output volume
  unsigned short x;
  short input_x;
  long_number_t	kernel_mac;
  static long_number_t	output_acc[CONV_OUTSAMPLES];
  long_number_t tmp;

  for (k = 0; k < CONV_FILTERS; k++) { 
    for (pos_x = 0; pos_x < CONV_OUTSAMPLES; pos_x++) { 
      output_acc[pos_x] = 0;
	    for (z = 0; z < INPUT_CHANNELS; z++) {

        kernel_mac = 0; 
        for (x = 0; x < CONV_KERNEL_SIZE; x++) {
          input_x = pos_x * CONV_STRIDE - ZEROPADDING_LEFT + x;
          if (input_x < 0 || input_x >= INPUT_SAMPLES) // ZeroPadding1D
            tmp = 0;
          else
            tmp = input[z][input_x] * kernel[k][z][x]; 
          kernel_mac = kernel_mac + tmp; 
        }

	      output_acc[pos_x] = output_acc[pos_x] + kernel_mac; 
      }
      output_acc[pos_x] = scale_number_t(output_acc[pos_x]);

      output_acc[pos_x] = output_acc[pos_x] + bias[k]; 

    }

    for (pos_x = 0; pos_x < CONV_OUTSAMPLES; pos_x++) {
#ifdef ACTIVATION_LINEAR
      output[k][pos_x] = clamp_to_number_t(output_acc[pos_x]);
#elif defined(ACTIVATION_RELU)
      // Activation function: ReLU
      if (output_acc[pos_x] < 0)
        output[k][pos_x] = 0;
      else
        output[k][pos_x] = clamp_to_number_t(output_acc[pos_x]);
#endif
    }
  }
}

#undef INPUT_CHANNELS
#undef INPUT_SAMPLES
#undef CONV_FILTERS
#undef CONV_KERNEL_SIZE
#undef CONV_STRIDE
#undef ZEROPADDING_LEFT
#undef ZEROPADDING_RIGHT
#undef CONV_OUTSAMPLES
#undef ACTIVATION_RELU
/**
  ******************************************************************************
  * @file    weights/conv.cc
  * @author  Pierre-Emmanuel Novac <penovac@unice.fr>, LEAT, CNRS, Université Côte d'Azur, France
  * @version 1.0.0
  * @date    24 march 2020
  * @brief   Template generating plain C code for the implementation of Convolutional Neural Networks on MCU
  */

#define INPUT_CHANNELS    1
#define CONV_FILTERS      32
#define CONV_KERNEL_SIZE  80


const int16_t conv1d_bias[CONV_FILTERS] = {5, -60, 1, 18, 81, 0, 42, 2, 0, 11, -4, 26, 6, 12, 75, 14, 23, 66, -10, 42, 0, -32, 65, 2, 30, -100, -27, 2, -84, 39, 20, 81}
;

const int16_t conv1d_kernel[CONV_FILTERS][INPUT_CHANNELS][CONV_KERNEL_SIZE] = {{{32, 2, 22, -23, 20, -10, -18, -6, 17, -21, 42, 22, -10, 44, -14, -40, 4, -40, -55, 6, -68, -45, -43, -59, -60, -27, -24, -28, 21, 11, 25, 2, 35, 41, 26, 36, 44, 2, 32, 36, -8, -13, 9, -44, -45, -22, -44, 12, 2, 41, 42, 38, 22, 19, -9, 1, -34, 5, -20, -9, -9, -30, 22, -31, 19, 26, -33, 3, 7, -9, -20, 11, 13, 10, 24, -12, 30, -31, -8, 4}
}
, {{-100, -71, -81, -64, -43, 30, 30, 16, 13, 7, 15, -2, -8, -21, 20, -10, -4, 23, 32, -3, 0, -28, -27, -17, -35, -54, -58, -56, -32, -29, -14, -6, 0, 19, -7, -9, -30, 2, 20, 21, 3, -5, -11, -6, -11, 3, -24, -15, -40, -4, 6, 9, -4, 31, 44, 49, 45, 50, 52, 29, 62, 25, 15, 39, 36, 28, 14, 41, -7, -1, -20, -26, -66, -38, -24, -31, -88, -47, -69, -48}
}
, {{-15, -27, -16, 1, -19, -11, 12, -24, -39, 17, 37, 31, 3, -4, -43, -10, -2, 3, 32, 6, 19, 16, 1, 7, 51, -16, -73, -18, 33, 5, 16, 47, -10, -23, 41, 48, -3, -36, -15, 0, 0, 1, -3, 3, 50, 58, 47, 32, 25, 0, -33, -35, 9, 4, -31, -30, -18, 5, 36, 26, 6, -18, -39, -4, -13, -24, -25, 27, 28, 6, -28, -14, -14, 5, -12, -11, 9, 4, 11, -9}
}
, {{-30, -33, -30, -34, -5, -20, -12, -21, -25, -24, -34, -26, -45, -30, -38, -45, -21, -18, -26, -38, -37, -16, -32, -47, -31, -24, -39, -23, -12, -5, -31, -26, -5, -28, -7, -13, -27, -25, -20, -2, -19, -3, -27, -10, -14, 3, -35, -29, -16, 0, -15, 13, 21, 11, 8, 32, 33, 48, 35, 57, 64, 55, 32, 44, 34, 18, 37, 38, 8, 34, 17, 39, 25, 53, 33, 79, 68, 65, 58, 61}
}
, {{60, 76, 66, 15, 16, 30, 17, 38, 0, 41, 41, -8, -4, -24, -9, 23, 31, 18, 28, 52, 54, 47, 3, 15, -13, 4, -36, -21, -10, 23, 30, 12, -9, -31, -35, -82, -50, -18, 16, 23, 46, 42, 26, 33, -17, -44, -78, -92, -89, -52, -32, 11, 6, 37, 34, 1, -32, -107, -114, -118, -113, -105, -95, -43, -33, 0, 29, 22, -28, 1, -50, -33, -31, -63, -55, -74, -98, -136, -103, -56}
}
, {{12, 11, -25, 39, -33, 15, 32, -24, 36, -29, 34, -39, 18, -12, -34, 15, -48, 7, 16, -24, -26, 40, -5, -32, 34, -8, 11, 14, -26, 49, -33, 8, 22, -28, 2, -11, -34, 23, 4, -20, -5, -16, 22, -18, 0, -3, 11, -2, 4, 9, -31, 6, -5, -13, -12, -14, -4, -12, 20, -36, 32, -31, 20, -10, 2, 40, 12, 18, 48, 0, 49, -13, 21, 28, -27, -31, 3, -21, -16, -34}
}
, {{-56, -72, -41, -55, -48, -54, -39, -63, -57, -58, -28, -43, -11, -16, 1, -3, 22, 13, 31, 11, 28, 30, 28, 27, 35, 17, 18, 36, 49, 13, 5, 12, 3, 2, 37, 54, 36, 0, 4, 4, 1, 12, 8, -23, -17, -1, 11, 10, 1, -6, 10, 19, -11, -27, -11, 11, -1, 22, 40, 30, 5, 43, 37, 43, 46, 36, -2, -12, -3, 5, 16, 27, 44, 32, 51, 18, 6, 11, 29, 10}
}
, {{-1, 13, -27, 19, 9, -18, 1, -1, -23, -3, -29, 32, 8, 19, 43, 11, 19, 15, -6, -17, 13, 3, -34, -15, 21, -22, -12, -3, -49, -32, -25, -55, -41, 8, -38, -8, 29, -28, 17, 8, 2, 8, 10, 16, 20, 46, -9, 48, 37, -3, 56, 13, 26, 31, 0, 8, -1, -7, -22, -44, -49, -56, -48, -63, -11, -52, 16, -20, -27, 37, -31, 14, 11, -1, 9, 49, 4, 30, 41, 28}
}
, {{20, -25, 8, 4, -26, 26, 0, -30, 38, -13, -24, 39, -14, -10, -6, 4, 26, -30, -11, 35, -14, -3, 16, -26, 15, -21, 33, -32, 26, -18, -3, 34, -65, 50, -6, -34, 35, -8, 6, -30, 38, -36, 4, 42, -62, 32, 0, -22, 8, 39, -53, 2, 56, -69, 36, -21, -8, 22, -11, -2, 19, -7, -32, 50, -42, 16, 10, -31, 30, -29, 19, -2, -21, 20, -16, 8, 0, -16, 20, -8}
}
, {{-74, -44, -44, -32, -72, -55, -36, -10, -15, 2, -15, -11, -16, 9, 27, -6, -10, -12, 6, -2, -2, 2, -9, -25, -14, 0, -38, -25, -16, -37, -21, -19, -56, -34, -43, -60, -44, -50, -30, -59, -41, -26, -11, 8, 12, 8, 0, 9, -34, -11, 7, -9, -13, -8, 1, 7, 16, 0, -11, -40, -37, -16, -41, -35, 0, -13, -25, 4, -18, -7, -29, -1, -30, -38, -21, 6, -16, -21, -27, -45}
}
, {{0, -45, 29, -4, -35, 2, 23, -39, 5, 30, -50, 37, 19, -31, 0, 44, -59, 40, -1, -38, 35, 0, -9, -10, 4, -3, 22, -28, 12, 8, -2, -7, 12, 26, -40, 18, -4, 8, 15, 0, 28, -1, 16, 1, 39, 15, -16, 30, -8, 27, -6, 9, 27, -11, 29, -17, 0, 46, -11, 1, 12, -11, 45, -17, -22, 18, 5, 10, -5, 26, -13, 0, 4, 7, 32, -39, 25, -3, -5, 28}
}
, {{-62, -33, -30, -45, -9, -43, -8, -30, 3, -40, -18, 10, -19, -9, -5, 0, 7, -1, -19, 21, -6, 23, 13, 13, 23, 11, 23, 0, 27, 5, 35, -1, 43, 14, 55, 17, 40, 68, 38, 53, 39, 36, 52, 11, 36, 29, 2, -4, 13, 22, -16, 0, 2, -23, -31, -20, -27, -58, -43, -60, -34, -69, -59, -56, -83, -57, -61, -52, -44, -28, -6, -2, 21, 38, 26, 47, 61, 55, 9, 46}
}
, {{2, -26, 2, 21, -3, 9, 1, 15, -30, -1, -3, 27, -35, -19, -1, 1, -45, 3, 13, -3, -29, 1, 10, -15, 12, 37, -6, 3, 0, 35, 2, -19, -24, -22, 15, -10, 41, -8, -24, -46, 0, 50, 35, -2, -12, 23, -26, -20, 21, -44, -70, -6, -30, -67, -27, 35, -9, -14, 54, 56, 24, 39, 69, 0, -4, 36, 32, 6, 8, -16, 26, 11, 1, -37, -43, -26, -17, 3, 0, -8}
}
, {{-14, -12, -6, -29, -43, -26, -22, 11, 14, 52, 50, 39, 24, 0, -30, -37, -6, 7, 5, 17, 28, 9, -33, -28, -11, 1, 7, -4, -6, 8, 13, -5, 1, 9, 20, -12, -9, -28, -8, 0, -1, -47, -30, -6, 22, 16, 21, 17, 16, 0, 4, -5, 12, 10, -14, -27, -20, 21, 19, -2, -24, 1, -26, -12, -37, -53, -71, -17, 28, 16, 5, 40, 33, 11, 14, 38, 11, -25, -27, -8}
}
, {{19, 32, 26, 45, -1, -38, -40, 67, 37, -20, 31, -8, 17, 47, 58, -37, -30, 28, -31, 44, 56, 37, 31, -20, -43, -19, -10, 66, 21, -28, -36, 3, 31, 42, 24, 0, 21, -17, -33, 46, -2, -33, 31, -50, -44, 45, 59, -32, -39, 23, 1, -28, -27, 34, -41, -52, 6, -23, -62, 4, 9, -46, -19, -17, 15, -54, -24, -27, 6, -39, -21, -23, -40, -10, -34, -14, -36, -36, 15, -32}
}
, {{13, 7, 19, -31, -44, -16, 14, 22, -12, -32, -24, -36, -26, -1, -23, -5, -18, 6, -2, 17, 0, 41, 31, -13, -13, 9, -12, 4, 28, -32, -56, -22, 31, -34, -7, 19, -17, -18, 19, -8, -17, 1, -5, 1, 19, 22, 0, 3, 3, 26, 4, -17, 19, -7, -16, 12, 11, -27, -3, 19, 2, -1, 34, 46, 26, 27, 3, -37, -16, -21, -59, -64, -21, -38, -21, -4, 5, 40, 48, 39}
}
, {{5, -24, -20, -29, -26, 14, 8, 19, -6, -4, -5, -5, 6, -24, 10, 25, 5, 11, 34, 20, 16, -7, 16, -30, -10, -4, -19, -12, 33, 6, -23, -3, 11, -15, -38, 6, 8, -3, 12, 43, 48, 17, 46, 48, 6, -10, 0, -9, -46, -45, -40, -60, -50, -15, -2, 30, 18, -6, -33, -4, -1, -31, 14, 17, 12, 2, 34, 6, -17, -3, 9, -24, 9, 10, -13, -10, 0, 12, -18, -17}
}
, {{-16, -24, -15, -15, -33, -10, -7, -12, -1, -34, -38, -76, -84, -88, -86, -60, -89, -58, -52, -11, -10, 25, 7, 13, 4, -7, -20, -30, -24, -16, -15, -22, -11, -3, 7, -2, 26, 10, 14, -8, -36, -63, -58, -63, -57, -38, -22, -34, -9, -51, -45, -49, -58, -53, -41, -9, -9, -11, -15, 7, 14, -13, 0, -24, -31, -41, -59, -50, -56, -60, -64, -35, -40, -9, -31, -14, 18, 1, 23, 16}
}
, {{-88, -57, -42, -17, 22, -16, -46, -22, -66, -25, -30, -37, -49, -85, -59, -49, -10, 45, 12, 31, -67, -108, -100, -77, 15, 50, 45, 13, 10, -20, -5, 31, 27, 37, 19, -36, -36, 11, 14, 28, 10, 0, 4, -4, -12, 1, -16, -18, -1, -43, -13, -11, -36, 5, -20, -16, 35, -5, 39, 5, 8, 7, 19, 14, 26, -25, -3, -5, 0, 14, 0, 1, 0, 21, 20, 13, 23, -24, -18, -9}
}
, {{-9, 13, -3, 3, -21, -7, -8, -28, -34, 13, 14, 40, 12, 44, 49, 18, 9, 11, 9, -10, -7, 9, -5, -12, 0, -10, -20, -21, -40, -68, -79, -72, -63, -42, -1, -4, 23, 52, 61, 63, 46, 18, 14, 9, -45, -37, -10, -26, -16, -18, -32, -2, -21, 8, -6, -7, 10, 24, 20, -12, -8, 5, 5, 4, 10, 23, 0, -33, -27, -9, -11, 17, 10, 13, -12, -9, 21, -14, 12, 18}
}
, {{-31, 23, 0, 2, 0, -6, 16, -2, -13, 18, -8, 11, -13, -15, 43, -46, -21, 38, -19, -30, 36, -22, 16, 38, -60, 43, -9, -37, 25, 16, -38, 1, 19, -52, 39, 18, -45, 48, -59, 37, 0, -32, 44, -30, 6, 18, -11, -11, 24, 4, -2, 20, -18, 15, -29, 13, 0, -26, 26, -36, 14, -8, -7, 26, -19, 10, 8, -17, 11, 1, -23, 22, -23, 8, -10, 24, 1, -23, 42, -41}
}
, {{-37, -48, -42, -56, -28, -54, -31, -24, -35, -50, -20, -39, -9, -44, -4, -18, -7, -4, 15, 11, 18, 16, 13, 3, 21, 3, 22, 21, -12, 0, -1, -11, -34, -8, -25, -23, -57, -44, -26, -31, -31, -18, -33, -36, -15, -34, -10, 0, -26, -32, -43, -2, -4, -33, -37, 1, -36, -48, -27, -6, -44, -32, -43, -20, -40, -39, -45, -36, -36, -41, -34, -30, -21, -24, -19, -32, -38, -7, -41, -54}
}
, {{17, 23, 13, 1, 4, -17, -30, -18, 2, -34, -38, -4, 21, -10, -27, 27, 50, 25, 1, 8, 0, -21, -2, 0, -30, -45, -24, -32, -61, -53, -14, 6, -16, 3, -1, -18, -31, 2, -8, -31, -10, 44, 36, 25, 41, 35, -9, -13, 2, -10, -27, -1, 32, 21, -4, 24, 19, -9, -17, -14, -2, -25, -7, -21, 8, 33, 46, 29, 30, 26, -7, -27, -21, -13, -28, -11, 2, -14, -18, -3}
}
, {{14, -30, 13, 24, -45, 50, -45, 2, 15, 0, -17, 7, -3, 19, 2, -45, 37, -17, -7, 26, -15, -11, 17, -16, 3, 21, -39, 33, -26, -2, 36, -45, 41, -40, 19, 17, -44, 8, 30, -20, -11, 4, 15, -26, 28, -16, -5, 22, -43, 6, 39, -33, -14, 55, -64, 43, -13, -30, 34, -19, 19, -34, 39, -28, -12, 47, -68, 57, -24, -13, 8, 12, -22, 5, 16, -24, 15, 11, -24, 6}
}
, {{-5, -3, -29, -6, 9, -24, -16, 17, -40, 5, -18, 22, -24, 27, -37, 19, 22, -46, 46, 8, -23, 3, 31, 43, -9, 22, 7, -1, 25, 17, -21, 26, 3, -15, 30, -14, 46, -27, -24, 18, -47, -21, -27, -60, -31, -30, 13, -7, 18, -28, 8, 33, -16, 29, 2, -9, -4, 26, 27, 48, -17, 0, 36, -32, 54, -26, -23, 29, -14, 3, 9, -28, -17, 58, -58, 18, -22, -17, 21, -38}
}
, {{-56, -26, -33, -39, -56, -16, -32, -51, -51, 9, -58, -9, -16, -49, -50, -54, -77, -35, -33, -31, -15, -20, -20, 14, 20, -14, 17, 13, 12, 25, 39, 0, 53, 11, 13, 34, 2, 22, -5, 27, 2, 14, 21, -9, 18, 7, -9, 0, 15, -32, 14, 0, -7, 20, 2, -5, 1, 11, -21, 16, -13, 11, -30, 19, -21, -15, 29, -41, 34, -4, 17, -1, 39, 10, 2, 47, -30, 52, 4, 24}
}
, {{22, 19, 19, 57, 48, 48, 15, 35, 27, 10, 29, 23, 41, 13, 45, 33, 50, 32, 39, 19, 52, 62, 44, 1, -3, 10, 10, -1, 33, 50, 17, -10, -12, -3, 17, 38, 23, -6, -13, 32, 32, 43, 10, 8, 6, 1, -2, -5, 40, 37, 47, 9, 9, -15, 9, 28, 26, 19, 31, 45, 26, 1, 7, 10, 27, 13, 20, 11, 35, 8, -2, 1, 36, 32, 24, -2, 6, 2, 50, 35}
}
, {{-21, 0, -10, -20, -4, -19, -15, -4, -26, -21, -20, -29, -16, -18, -14, 1, 8, 5, -10, 5, 22, 4, -1, -23, -4, -17, -13, -3, 28, 29, 41, 21, 37, 12, 10, -31, -23, -42, -33, -19, -20, 4, 20, 31, 46, 36, 27, 26, 20, -1, -13, -1, -21, -26, -42, -21, -12, -22, -4, 12, 17, 12, 38, 37, 43, 33, 28, 34, 17, 0, 13, 19, -11, -10, -3, -3, -12, 9, 0, 12}
}
, {{-39, -17, -12, -13, 2, -22, 17, 30, -28, 31, 26, -26, 35, 23, -6, 11, 12, 14, -17, -5, -14, -19, 30, 23, 5, 45, 9, 38, 28, 37, 41, 42, -5, 24, 5, 23, 22, 39, 28, 43, 0, -16, -8, -38, -25, -41, -50, -67, -12, -45, 0, 21, -34, -11, -19, -44, -35, 5, -21, 29, -1, 30, 0, -35, -29, -28, -40, -34, 8, -39, 2, 6, -25, 21, -2, 14, -22, -19, 7, -22}
}
, {{44, -7, 28, 12, 25, 20, -14, 27, 11, 8, 5, -8, 37, -52, 58, -29, -8, 26, -19, 18, -38, -17, 5, -4, -27, -1, -26, -20, -14, -56, 19, -52, -45, 3, -42, -15, -26, -35, 13, -29, -42, 17, -42, 14, -35, 18, -34, -12, 27, -49, 41, 0, -34, 47, -18, 25, 4, -4, 25, 4, 35, -18, 30, 8, 0, 26, 27, -2, 2, 32, -20, 47, -6, 7, 15, 3, 34, 3, 5, 16}
}
, {{-20, 49, 8, -5, 18, 10, -12, 24, 8, -24, 42, 6, -10, 12, -31, 28, -3, -15, 31, -10, 34, -18, -2, 29, 9, -2, 1, -24, 23, 3, -21, 20, 8, 15, -25, -1, 6, -8, -47, 12, 14, -18, 3, 5, 9, -17, -2, 11, -32, 8, -10, -8, 33, -26, 7, 31, -23, -61, 66, -78, -16, 50, -87, 47, 6, -43, 24, 8, -18, -18, 14, -46, 17, 15, -24, 40, -20, 0, -16, -38}
}
, {{1, 16, 17, 0, -25, 32, -5, 6, 8, -18, -14, -2, -10, 7, -38, -30, 0, -10, -32, -15, -37, 11, -35, -32, 0, -45, -16, 3, -37, -21, 6, -17, -16, -14, -3, -26, 16, -26, 38, -39, 20, 26, -42, 45, 0, -4, 34, -10, 33, -2, 3, -1, 27, -5, 7, 2, 10, -22, 35, -7, 9, -21, 42, -15, 5, 34, -29, 53, -38, 20, 28, -7, -22, 22, 4, -7, 2, 5, -8, 8}
}
}
;

#undef INPUT_CHANNELS
#undef CONV_FILTERS
#undef CONV_KERNEL_SIZE
/**
  ******************************************************************************
  * @file    maxpool.cc
  * @author  Pierre-Emmanuel Novac <penovac@unice.fr>, LEAT, CNRS, Université Côte d'Azur, France
  * @version 1.0.0
  * @date    24 march 2020
  * @brief   Template generating plain C code for the implementation of Convolutional Neural Networks on MCU
  */

#ifndef SINGLE_FILE
#include "number.h"
#endif

#define INPUT_CHANNELS  32
#define INPUT_SAMPLES   381
#define POOL_SIZE       4
#define POOL_STRIDE     4
#define POOL_PAD        0 // Unsupported
#define POOL_LENGTH	    ( ( (INPUT_SAMPLES - POOL_SIZE + (2*POOL_PAD) ) / POOL_STRIDE ) + 1 )

#define ACTIVATION_LINEAR

typedef number_t max_pooling1d_1_output_type[INPUT_CHANNELS][POOL_LENGTH];

static inline void max_pooling1d_1(
  const number_t input[INPUT_CHANNELS][INPUT_SAMPLES], 	    // IN
  number_t output[INPUT_CHANNELS][POOL_LENGTH]) {	// OUT

  unsigned short pos_x, k; 	// loop indexes for output volume
  unsigned int x;
  number_t max, tmp; 

  for (k = 0; k < INPUT_CHANNELS; k++) 
    for (pos_x = 0; pos_x < POOL_LENGTH; pos_x++) {
#ifdef ACTIVATION_LINEAR
      max = input[k][pos_x*POOL_STRIDE];
      x = 1;
#elif defined(ACTIVATION_RELU)
      max = 0;
      x = 0;
#endif
      for (; x < POOL_SIZE; x++) {
        tmp = input[k][(pos_x*POOL_STRIDE)+x]; 
        if (max < tmp)
          max = tmp;
      }
      output[k][pos_x] = max; 
    }
}

#undef INPUT_CHANNELS  
#undef INPUT_SAMPLES
#undef POOL_SIZE
#undef POOL_STRIDE
#undef POOL_PAD
#undef POOL_LENGTH
#undef ACTIVATION_LINEAR
/**
  ******************************************************************************
  * @file    conv.cc
  * @author  Pierre-Emmanuel Novac <penovac@unice.fr>, LEAT, CNRS, Université Côte d'Azur, France
  * @version 1.0.0
  * @date    24 march 2020
  * @brief   Template generating plain C code for the implementation of Convolutional Neural Networks on MCU
  */

#ifndef SINGLE_FILE
#include "number.h"
#endif

#define INPUT_CHANNELS      32
#define INPUT_SAMPLES       95
#define CONV_FILTERS        32
#define CONV_KERNEL_SIZE    3
#define CONV_STRIDE         1

#define ZEROPADDING_LEFT    0
#define ZEROPADDING_RIGHT   0

#define CONV_OUTSAMPLES     ( ( (INPUT_SAMPLES - CONV_KERNEL_SIZE + ZEROPADDING_LEFT + ZEROPADDING_RIGHT) / CONV_STRIDE ) + 1 )

#define ACTIVATION_RELU

typedef number_t conv1d_1_output_type[CONV_FILTERS][CONV_OUTSAMPLES];

static inline void conv1d_1(
  const number_t input[INPUT_CHANNELS][INPUT_SAMPLES],               // IN
  const number_t kernel[CONV_FILTERS][INPUT_CHANNELS][CONV_KERNEL_SIZE], // IN

  const number_t bias[CONV_FILTERS],						                // IN

  number_t output[CONV_FILTERS][CONV_OUTSAMPLES]) {               // OUT

  unsigned short pos_x, z, k; 	// loop indexes for output volume
  unsigned short x;
  short input_x;
  long_number_t	kernel_mac;
  static long_number_t	output_acc[CONV_OUTSAMPLES];
  long_number_t tmp;

  for (k = 0; k < CONV_FILTERS; k++) { 
    for (pos_x = 0; pos_x < CONV_OUTSAMPLES; pos_x++) { 
      output_acc[pos_x] = 0;
	    for (z = 0; z < INPUT_CHANNELS; z++) {

        kernel_mac = 0; 
        for (x = 0; x < CONV_KERNEL_SIZE; x++) {
          input_x = pos_x * CONV_STRIDE - ZEROPADDING_LEFT + x;
          if (input_x < 0 || input_x >= INPUT_SAMPLES) // ZeroPadding1D
            tmp = 0;
          else
            tmp = input[z][input_x] * kernel[k][z][x]; 
          kernel_mac = kernel_mac + tmp; 
        }

	      output_acc[pos_x] = output_acc[pos_x] + kernel_mac; 
      }
      output_acc[pos_x] = scale_number_t(output_acc[pos_x]);

      output_acc[pos_x] = output_acc[pos_x] + bias[k]; 

    }

    for (pos_x = 0; pos_x < CONV_OUTSAMPLES; pos_x++) {
#ifdef ACTIVATION_LINEAR
      output[k][pos_x] = clamp_to_number_t(output_acc[pos_x]);
#elif defined(ACTIVATION_RELU)
      // Activation function: ReLU
      if (output_acc[pos_x] < 0)
        output[k][pos_x] = 0;
      else
        output[k][pos_x] = clamp_to_number_t(output_acc[pos_x]);
#endif
    }
  }
}

#undef INPUT_CHANNELS
#undef INPUT_SAMPLES
#undef CONV_FILTERS
#undef CONV_KERNEL_SIZE
#undef CONV_STRIDE
#undef ZEROPADDING_LEFT
#undef ZEROPADDING_RIGHT
#undef CONV_OUTSAMPLES
#undef ACTIVATION_RELU
/**
  ******************************************************************************
  * @file    weights/conv.cc
  * @author  Pierre-Emmanuel Novac <penovac@unice.fr>, LEAT, CNRS, Université Côte d'Azur, France
  * @version 1.0.0
  * @date    24 march 2020
  * @brief   Template generating plain C code for the implementation of Convolutional Neural Networks on MCU
  */

#define INPUT_CHANNELS    32
#define CONV_FILTERS      32
#define CONV_KERNEL_SIZE  3


const int16_t conv1d_1_bias[CONV_FILTERS] = {-181, -27, -8, 51, -88, 35, -15, 116, -23, 8, 130, 17, 40, 157, 52, 55, -1, -44, 131, -8, 20, 96, 15, -16, -35, -40, -13, -16, 66, -73, -41, 49}
;

const int16_t conv1d_1_kernel[CONV_FILTERS][INPUT_CHANNELS][CONV_KERNEL_SIZE] = {{{-104, -67, -8}
, {-62, -79, 60}
, {-20, -56, 106}
, {-80, -3, -19}
, {127, -12, 21}
, {19, 57, -64}
, {-13, 2, 33}
, {-45, -63, -60}
, {121, 64, -67}
, {-33, -109, 7}
, {95, 56, 1}
, {71, -45, -95}
, {13, 23, -31}
, {5, 6, 35}
, {100, 67, 19}
, {6, -70, 3}
, {-8, -28, 20}
, {69, 67, -41}
, {-35, -23, -63}
, {-65, 127, 9}
, {37, -40, 47}
, {-25, 62, -20}
, {-88, -107, -20}
, {37, 11, 56}
, {-40, -2, -14}
, {-82, 12, 52}
, {67, -49, 102}
, {59, -62, 53}
, {16, 112, -9}
, {27, -40, 66}
, {-14, 73, -70}
, {-126, 54, -45}
}
, {{31, 89, -27}
, {-71, -10, 28}
, {-32, 43, 61}
, {46, 43, -5}
, {68, -110, -121}
, {-32, -40, -51}
, {-46, -30, 87}
, {47, -7, 53}
, {82, 107, 26}
, {-26, 63, -66}
, {-81, -35, 18}
, {8, 105, 16}
, {-69, -24, 10}
, {-52, -85, 51}
, {19, -24, 55}
, {61, 5, 28}
, {-35, -43, -10}
, {12, -79, -114}
, {71, 79, 71}
, {9, 20, -66}
, {88, -5, -39}
, {-38, 34, -53}
, {9, 15, -53}
, {-72, 52, -49}
, {1, -83, 31}
, {65, 63, 66}
, {10, -78, -96}
, {24, -78, 44}
, {72, -29, -84}
, {35, 114, 57}
, {52, -34, 15}
, {14, 1, 92}
}
, {{-5, 55, 57}
, {-41, 16, -106}
, {-33, -13, 24}
, {21, -46, -21}
, {-13, -73, -15}
, {-97, -20, 30}
, {-15, -71, -94}
, {-47, -88, -92}
, {2, -73, 56}
, {-93, 0, -86}
, {71, -87, 54}
, {35, -95, 55}
, {8, 18, -84}
, {13, 70, -74}
, {-66, 11, 46}
, {-18, 16, 5}
, {-58, 61, -8}
, {-91, 54, 65}
, {60, 16, 74}
, {-57, -28, -69}
, {21, -101, -80}
, {-24, -13, 27}
, {-68, -6, -11}
, {22, 24, 44}
, {-25, 0, -69}
, {58, 0, -98}
, {-81, -51, 31}
, {33, -68, -65}
, {1, -56, -51}
, {49, -74, 48}
, {-7, -66, 17}
, {58, 51, -7}
}
, {{-66, -22, -101}
, {-15, 26, 80}
, {72, 6, 78}
, {104, -93, -89}
, {-120, -28, -35}
, {53, -43, 2}
, {14, -19, 114}
, {69, -19, -48}
, {-6, -37, 122}
, {-20, -58, -61}
, {86, 97, 57}
, {99, -46, 81}
, {-54, 23, -71}
, {-100, -39, 24}
, {-78, -79, -56}
, {-79, 27, -63}
, {-74, -122, -104}
, {-91, -33, -100}
, {64, 83, 97}
, {-13, -95, -111}
, {-39, 16, -22}
, {-32, -22, -109}
, {43, -42, 11}
, {-2, 79, 53}
, {23, -1, -39}
, {42, -27, -44}
, {15, 2, 97}
, {11, -11, -83}
, {69, 82, -67}
, {27, 50, -23}
, {-86, -92, 0}
, {-20, 89, -55}
}
, {{-133, 57, 67}
, {42, -18, -20}
, {7, -73, 60}
, {-128, -74, 28}
, {-19, -42, 15}
, {12, 2, 79}
, {-97, -41, -57}
, {63, 27, 77}
, {205, 87, 41}
, {67, 21, 105}
, {-29, -34, 6}
, {62, -85, 44}
, {77, 91, -23}
, {38, 53, -77}
, {-81, -14, -31}
, {-52, 78, 55}
, {48, -80, -20}
, {77, 21, 141}
, {-81, 45, 51}
, {28, -26, -80}
, {98, 125, 106}
, {73, -19, 34}
, {-65, 36, -39}
, {183, 165, 19}
, {54, 90, -49}
, {-135, 77, -23}
, {83, -37, 82}
, {57, 10, -52}
, {56, 90, 55}
, {-19, 95, 73}
, {38, -21, 44}
, {-27, 70, -19}
}
, {{-66, 42, -13}
, {91, 27, 130}
, {-16, -41, 70}
, {-6, -108, -54}
, {-55, 64, -59}
, {71, -58, -90}
, {61, 28, -12}
, {15, 48, -48}
, {-101, -97, -66}
, {51, 1, 93}
, {-64, -89, -95}
, {17, 37, -16}
, {16, -25, 4}
, {-24, -118, -38}
, {36, 4, -78}
, {-71, -84, 2}
, {39, 28, 13}
, {-20, 76, -15}
, {-13, -27, 101}
, {-5, -31, 53}
, {-30, -51, -86}
, {94, 51, 110}
, {38, 40, 113}
, {-70, -103, -148}
, {90, 33, 68}
, {11, 92, 37}
, {-145, -174, -126}
, {-110, 66, -43}
, {-11, 49, -27}
, {-60, 31, -100}
, {23, -40, -50}
, {102, -62, -64}
}
, {{-46, 58, -80}
, {-7, -15, -80}
, {-48, -35, 23}
, {-68, 32, -4}
, {-71, -27, -83}
, {-56, 24, -82}
, {35, -35, 28}
, {-26, -59, -6}
, {17, -65, -53}
, {78, 18, 14}
, {64, -63, -95}
, {43, 35, 44}
, {-81, -74, 43}
, {42, -10, -102}
, {10, -91, -43}
, {-84, -81, -32}
, {32, 53, 53}
, {-11, -57, -24}
, {-46, 57, -72}
, {12, -24, -84}
, {-72, -7, 74}
, {-15, -76, -36}
, {75, -83, -79}
, {8, 35, -84}
, {-82, 43, 66}
, {-91, -56, -56}
, {-104, -50, -14}
, {-67, -38, 29}
, {55, 42, 24}
, {-99, 22, -59}
, {-8, -1, -7}
, {-84, -85, -25}
}
, {{61, -25, -55}
, {23, -28, -44}
, {22, -53, 35}
, {50, -25, -103}
, {-31, -101, 55}
, {-86, -45, -15}
, {-66, 19, 4}
, {-43, -44, 0}
, {91, 122, -2}
, {-53, -1, -98}
, {-66, 54, -39}
, {-107, 27, -63}
, {-29, 20, -33}
, {92, -85, -32}
, {213, 30, 168}
, {51, -33, 90}
, {-3, 45, -62}
, {74, 38, -54}
, {2, 108, -66}
, {-25, -5, 25}
, {61, 8, -10}
, {-90, -94, 15}
, {76, 90, -19}
, {134, -8, 100}
, {74, 81, 116}
, {63, 42, -9}
, {-68, 52, -98}
, {-24, -78, -95}
, {57, 17, -86}
, {15, 111, -27}
, {-20, 143, -37}
, {-8, 104, -9}
}
, {{39, 108, -64}
, {-59, -58, -50}
, {8, -11, 22}
, {0, -56, 17}
, {-102, -82, -81}
, {85, 92, 91}
, {-13, -39, 13}
, {12, 107, 0}
, {222, 233, 183}
, {-68, 29, -82}
, {111, 73, 119}
, {-68, -5, -79}
, {111, 25, -38}
, {-50, -80, 75}
, {32, 0, 11}
, {16, 10, -20}
, {23, -80, -60}
, {99, 58, -60}
, {-53, -32, 57}
, {-11, 0, 17}
, {38, 45, 151}
, {-6, -79, -93}
, {-68, 18, -79}
, {195, 149, 114}
, {102, 90, 117}
, {44, 74, -31}
, {11, 47, -57}
, {-64, -52, 9}
, {-71, -53, -32}
, {43, 68, 32}
, {93, 85, 112}
, {36, 8, 34}
}
, {{-11, 23, -3}
, {-62, -75, -100}
, {-27, -96, -3}
, {110, 126, 114}
, {-42, -161, -116}
, {117, 85, 92}
, {-53, -4, 32}
, {60, 87, 61}
, {-74, -129, 36}
, {13, 56, -8}
, {-72, 74, -25}
, {-1, 47, 38}
, {-86, -1, 100}
, {77, 47, -70}
, {91, -161, -13}
, {37, 61, -26}
, {11, -43, 54}
, {41, -99, -136}
, {9, -149, 14}
, {-94, 21, 125}
, {-61, -29, -12}
, {52, 21, 80}
, {-43, -19, -15}
, {52, -48, -108}
, {-25, -55, 66}
, {-10, 15, -73}
, {22, -29, -79}
, {67, -17, 24}
, {-31, 7, -28}
, {118, 13, -32}
, {-22, 27, -105}
, {64, 63, 80}
}
, {{10, -75, 10}
, {10, -31, 35}
, {4, 62, 93}
, {56, -82, -88}
, {20, 90, 57}
, {-91, -87, 32}
, {52, 6, -18}
, {5, 57, -56}
, {61, 82, 6}
, {-122, -9, 30}
, {-46, -8, -66}
, {7, 15, -17}
, {-107, 54, 35}
, {118, 69, 11}
, {114, 125, 145}
, {45, 72, 19}
, {55, 23, 63}
, {-37, 22, 38}
, {-39, 49, -83}
, {-99, 16, 19}
, {-102, 62, 2}
, {-109, -46, 52}
, {68, 5, -55}
, {130, 91, 89}
, {-67, 7, -16}
, {-53, -36, 21}
, {-28, -51, -61}
, {-88, -79, -26}
, {-41, -19, -15}
, {102, 57, 106}
, {149, 108, 103}
, {63, 106, 91}
}
, {{-74, -63, -13}
, {-51, -88, -85}
, {7, 59, 9}
, {75, 24, 20}
, {-7, -29, 53}
, {45, 25, -11}
, {95, 47, -6}
, {23, -64, 58}
, {-24, 102, 33}
, {-52, -88, 19}
, {56, -48, 28}
, {5, 9, 69}
, {79, -108, -40}
, {-122, -84, -72}
, {-151, -94, 66}
, {1, 19, -63}
, {-150, -35, -60}
, {-29, -41, -46}
, {-48, -42, -123}
, {-110, -120, -71}
, {55, 39, 54}
, {-86, -39, 0}
, {-56, -90, -72}
, {83, 50, 81}
, {58, 82, 111}
, {45, -90, 46}
, {-45, 38, 50}
, {30, -33, 39}
, {-95, -88, -137}
, {21, -18, -123}
, {-158, 6, -4}
, {35, 47, -51}
}
, {{-37, 111, -6}
, {-30, -102, -34}
, {-94, 56, 11}
, {9, -13, -10}
, {-155, -132, -44}
, {64, -73, 43}
, {30, 49, 38}
, {-57, 62, 20}
, {-212, -50, -95}
, {-67, -53, 19}
, {41, -58, 32}
, {-137, -16, -19}
, {59, 45, -42}
, {-57, 70, 68}
, {-147, -58, -137}
, {131, 121, 86}
, {-48, 77, -12}
, {-140, -67, -16}
, {0, -65, 35}
, {43, 76, 23}
, {-28, 27, -43}
, {-56, -98, 47}
, {91, 95, 54}
, {-84, -45, -187}
, {-40, -28, 25}
, {-54, -51, -124}
, {-5, 92, -70}
, {66, 73, 101}
, {-87, -77, -36}
, {6, -13, -146}
, {-148, -120, -104}
, {-8, 6, -101}
}
, {{-92, 1, 18}
, {-91, 66, -47}
, {-78, -95, 17}
, {-46, 71, 8}
, {-97, -9, 19}
, {42, -7, 16}
, {95, 1, -20}
, {-21, -37, 25}
, {-36, -9, -17}
, {39, 10, -12}
, {-51, 29, 80}
, {121, 20, -49}
, {61, 40, -12}
, {-17, -117, -68}
, {-133, -138, -124}
, {-54, -28, -91}
, {-24, -90, -4}
, {-77, 59, 52}
, {-16, -128, -116}
, {-23, 38, 46}
, {18, -22, 12}
, {-63, -72, 90}
, {56, -26, 59}
, {-71, -26, 15}
, {-43, 50, 83}
, {-49, -6, -83}
, {-16, 66, 58}
, {-11, -80, 94}
, {30, -40, 77}
, {58, 114, 86}
, {-133, -74, -100}
, {49, -15, 134}
}
, {{6, -116, -68}
, {-87, -56, -39}
, {-71, -3, -7}
, {-96, -70, 32}
, {55, 28, -56}
, {35, 0, 10}
, {75, -49, -53}
, {-5, -111, -44}
, {-37, 35, -22}
, {-49, -45, -34}
, {-17, -53, 19}
, {-130, 8, -20}
, {-19, -52, -75}
, {-54, -85, -19}
, {-4, -104, 39}
, {-117, 18, -82}
, {-68, -107, -70}
, {41, -103, 35}
, {19, 11, -68}
, {-66, -207, -104}
, {-16, -8, 35}
, {5, -57, 38}
, {-72, -102, -68}
, {62, -22, 63}
, {-82, -43, -32}
, {13, -60, -54}
, {12, 88, 49}
, {-48, -71, 96}
, {-98, -61, -134}
, {80, -57, 83}
, {-13, 46, -52}
, {-9, -31, 45}
}
, {{-17, 52, 19}
, {-26, -122, 7}
, {83, 97, 7}
, {2, -110, -111}
, {-136, -98, -95}
, {-41, -48, 80}
, {83, 33, 13}
, {81, 6, 87}
, {-27, 57, 23}
, {97, 3, 116}
, {-7, 60, 67}
, {-10, -43, 110}
, {72, 1, -12}
, {53, 90, -53}
, {-12, 121, 108}
, {43, -74, -22}
, {111, 37, 87}
, {78, 65, 43}
, {-168, -22, -42}
, {24, -16, -13}
, {-58, 24, -21}
, {18, -60, -22}
, {-19, 108, -31}
, {-71, 120, -51}
, {128, 97, 82}
, {-51, -179, -49}
, {-21, -36, -76}
, {51, -67, 47}
, {-35, -8, -82}
, {-62, 28, -48}
, {2, 105, 59}
, {71, 98, -22}
}
, {{70, 36, 10}
, {-31, -100, -59}
, {-32, 44, -4}
, {-29, -20, 33}
, {-185, -108, -106}
, {48, -7, 83}
, {18, -28, 88}
, {76, -26, 55}
, {43, -18, 109}
, {-48, 10, -85}
, {-75, 27, -79}
, {134, 152, 112}
, {86, 43, -84}
, {76, 41, 104}
, {-75, -81, -103}
, {12, 0, 19}
, {-18, 79, 57}
, {-95, -110, -77}
, {24, -116, -38}
, {16, -10, 50}
, {-34, -6, 29}
, {20, 9, 40}
, {127, 28, 95}
, {37, 3, -53}
, {65, -35, 81}
, {72, 39, 12}
, {-71, -15, 25}
, {37, 10, 80}
, {-76, -130, -101}
, {-39, 54, -28}
, {5, -100, 20}
, {-44, 45, 43}
}
, {{-73, 96, 107}
, {64, -28, -30}
, {48, 59, -5}
, {17, -6, 48}
, {-19, -2, -87}
, {61, -50, -31}
, {-52, 0, 91}
, {28, 48, -26}
, {165, 245, 199}
, {63, -16, 18}
, {-59, 53, 97}
, {-5, -57, -20}
, {27, 7, -102}
, {-27, -85, 24}
, {58, -8, 63}
, {32, 43, 25}
, {-38, 57, 17}
, {-25, -63, 30}
, {22, -16, 44}
, {-13, -16, 53}
, {76, 101, 71}
, {48, 56, -6}
, {-73, 59, -58}
, {129, 142, 140}
, {-6, 4, 74}
, {57, -65, -77}
, {67, -69, -16}
, {-51, -22, 39}
, {-33, 62, 59}
, {-42, 48, -26}
, {85, 136, 52}
, {68, 86, -74}
}
, {{-112, 14, -9}
, {9, -93, 1}
, {-88, -93, -43}
, {-67, -6, -132}
, {-9, 4, 7}
, {35, 0, 42}
, {47, -62, -68}
, {-48, -103, -45}
, {34, 71, 77}
, {7, 42, -35}
, {10, -88, -29}
, {-75, -114, 25}
, {-47, -109, 47}
, {-58, -131, -40}
, {22, 95, 22}
, {-7, -3, 17}
, {20, -72, -156}
, {58, -69, -97}
, {-7, -3, -42}
, {72, 46, 19}
, {28, -76, 74}
, {-51, 45, -13}
, {40, 23, -28}
, {112, 82, 71}
, {14, 4, 87}
, {0, -13, 54}
, {18, 70, 16}
, {-92, -11, -76}
, {42, -35, -111}
, {126, 108, 0}
, {77, -31, -71}
, {17, -31, 121}
}
, {{50, 75, 59}
, {116, 136, 63}
, {83, -11, -96}
, {-87, -93, -116}
, {80, -2, 56}
, {-40, -58, 22}
, {64, -73, -173}
, {-107, -53, -67}
, {55, -11, -17}
, {98, 30, 47}
, {34, -52, -109}
, {62, -28, -86}
, {47, 23, 25}
, {51, 13, 57}
, {144, 17, 117}
, {71, -53, 84}
, {86, 85, -40}
, {53, -103, -15}
, {52, -2, 98}
, {-6, -1, 30}
, {30, 0, -91}
, {-21, 70, 28}
, {75, 30, -25}
, {72, -30, -64}
, {92, -20, -65}
, {-4, -84, 35}
, {86, 65, -60}
, {58, -127, -134}
, {-94, 47, 4}
, {-134, 39, -12}
, {93, 119, 41}
, {-85, -76, 54}
}
, {{1, 73, 116}
, {-145, -153, 1}
, {63, 21, 42}
, {-128, 17, -90}
, {28, -92, -103}
, {-76, 101, 43}
, {-12, 42, 4}
, {150, 1, 112}
, {72, 65, -36}
, {-136, -86, 22}
, {-29, -40, 81}
, {94, -46, 51}
, {-54, 139, 62}
, {47, -48, 147}
, {22, -91, 15}
, {77, 8, 116}
, {50, 120, 2}
, {-49, 0, 20}
, {-198, -92, -86}
, {92, -36, 153}
, {4, 79, 63}
, {-71, 42, 4}
, {140, 74, 12}
, {100, 70, 30}
, {-64, 66, 75}
, {-72, -118, 23}
, {-6, -24, -3}
, {-89, 1, -30}
, {-86, -117, 50}
, {56, 26, -6}
, {55, 74, 102}
, {60, 22, -9}
}
, {{-65, -63, -155}
, {-7, -60, 63}
, {7, -50, -12}
, {-63, -52, 65}
, {-26, -112, -103}
, {-138, -47, -96}
, {85, 26, -50}
, {-153, -113, -94}
, {-199, -159, -127}
, {-54, 43, 41}
, {60, -18, 38}
, {-13, -110, -82}
, {-84, -12, -97}
, {-41, -6, -80}
, {8, 7, -68}
, {-123, -47, -73}
, {10, -22, -117}
, {25, 42, -11}
, {30, -89, 52}
, {47, -54, -83}
, {-179, -50, -171}
, {77, 11, 60}
, {63, 27, -8}
, {-167, -173, -125}
, {35, -110, -121}
, {49, -97, -68}
, {7, 72, 109}
, {71, -71, -113}
, {14, 2, -135}
, {-14, -82, -97}
, {-5, -77, 5}
, {-68, 69, 43}
}
, {{118, 69, 25}
, {-91, -8, 44}
, {12, -84, -43}
, {-67, -78, -83}
, {-84, -65, -6}
, {69, 22, 15}
, {-4, -64, 66}
, {35, 85, 59}
, {188, 170, 95}
, {25, -127, -90}
, {-60, 96, 95}
, {-63, -15, 46}
, {23, -102, 85}
, {-62, -62, 75}
, {-5, -103, 28}
, {-109, 145, 97}
, {104, -105, 52}
, {-30, -61, 30}
, {-40, -25, 50}
, {94, 76, -46}
, {150, 37, 152}
, {51, -34, 12}
, {51, 79, 59}
, {155, 140, 209}
, {-89, 99, -2}
, {29, 10, -85}
, {-58, 81, -57}
, {68, -47, 94}
, {-20, -110, 45}
, {-3, -26, 78}
, {27, 1, 91}
, {7, 47, 111}
}
, {{99, 8, 46}
, {-28, 41, 56}
, {56, 96, 21}
, {26, -20, 9}
, {-2, 6, -83}
, {-68, -30, 34}
, {67, -69, 38}
, {33, -33, 65}
, {-100, -21, 43}
, {-75, -4, 49}
, {83, -29, 22}
, {-79, 73, -43}
, {71, 12, 61}
, {-62, -48, 75}
, {-163, -100, -72}
, {112, 21, -23}
, {61, 93, 33}
, {-34, 61, 1}
, {-13, -10, 84}
, {68, 106, 64}
, {-102, 31, 89}
, {-63, -65, 60}
, {57, 35, 72}
, {74, -67, -3}
, {59, 93, -31}
, {-110, -57, -9}
, {67, -21, 61}
, {53, 90, -21}
, {-69, 63, -35}
, {20, -61, -74}
, {-37, -55, 0}
, {-57, -65, -79}
}
, {{117, 64, 68}
, {-22, 28, -111}
, {-66, -67, -39}
, {6, -20, 63}
, {52, 73, 17}
, {27, 64, -96}
, {37, 65, 33}
, {1, 109, 35}
, {12, 59, 111}
, {75, -43, -111}
, {-23, -59, 41}
, {-54, 8, 91}
, {-17, -21, -13}
, {-24, 37, -34}
, {6, -25, -64}
, {-99, -16, 11}
, {70, 80, 14}
, {-81, -42, -148}
, {-64, 62, -37}
, {129, 69, 28}
, {99, 31, 84}
, {90, -15, -105}
, {102, -30, -100}
, {-19, 50, 84}
, {35, -68, -69}
, {14, 120, 53}
, {-5, -75, 38}
, {58, 36, -32}
, {-1, 46, 5}
, {8, -47, 57}
, {-39, 102, -14}
, {-46, 59, -2}
}
, {{39, 82, 105}
, {-44, -46, -37}
, {64, 14, 87}
, {84, -25, -30}
, {-54, -19, 10}
, {56, -7, -1}
, {85, -7, 54}
, {0, -48, 19}
, {-99, 20, -82}
, {52, 5, 7}
, {-72, -33, -78}
, {-83, -27, -4}
, {62, 4, 123}
, {97, 18, 94}
, {6, -19, 98}
, {138, 55, -26}
, {-47, 91, -9}
, {37, -14, 88}
, {64, -47, 46}
, {103, -59, 92}
, {50, 22, 25}
, {51, 6, 40}
, {60, 98, 43}
, {-37, -68, -109}
, {-75, 48, 26}
, {1, -52, -7}
, {73, 14, 93}
, {-18, 55, -27}
, {70, -8, -30}
, {-46, -7, -28}
, {39, -120, -59}
, {-95, -69, -53}
}
, {{7, 14, 0}
, {62, 56, -55}
, {-33, 63, 28}
, {41, 3, -32}
, {-101, 34, 8}
, {-18, 21, 73}
, {-91, -66, -73}
, {13, 16, 26}
, {113, 189, 102}
, {5, 42, -16}
, {9, -58, 10}
, {25, -107, -122}
, {-85, -58, -58}
, {-106, 36, 63}
, {98, 29, -32}
, {-94, -50, -49}
, {69, 45, 35}
, {-152, -86, -85}
, {75, -36, 30}
, {49, 68, 13}
, {89, 138, 26}
, {-101, 47, 29}
, {-22, 23, 83}
, {144, 161, 191}
, {-5, 27, 31}
, {-52, 20, 44}
, {1, -20, 42}
, {2, 44, 71}
, {59, 81, -13}
, {84, 50, 98}
, {146, 122, 147}
, {-10, -18, -22}
}
, {{-58, 39, 31}
, {-64, -121, -149}
, {5, 21, -80}
, {21, -81, 23}
, {-74, -45, -178}
, {-3, 22, 42}
, {59, 33, 17}
, {-3, 126, 17}
, {69, 46, 49}
, {70, -72, 66}
, {58, 49, -108}
, {-15, 44, -74}
, {105, -87, 124}
, {-3, 92, -15}
, {2, -18, -49}
, {-29, 90, 85}
, {30, 67, 14}
, {5, -15, -4}
, {7, 46, -32}
, {-10, 26, -18}
, {-40, -16, 67}
, {-21, -63, 102}
, {-40, 95, -12}
, {105, 0, 3}
, {100, -9, 50}
, {-114, -25, -129}
, {75, 84, -85}
, {-4, -76, -41}
, {-129, -119, -59}
, {-14, -28, 51}
, {1, -71, 77}
, {-123, 60, -127}
}
, {{31, -4, -110}
, {95, -109, 14}
, {78, -62, 31}
, {-39, 58, -42}
, {23, -24, 14}
, {-23, -104, 13}
, {7, 45, 22}
, {10, -25, -54}
, {-215, -155, -181}
, {-71, 80, -42}
, {-87, -102, 27}
, {9, 82, 28}
, {-110, 9, -60}
, {-2, 19, -1}
, {-127, -61, 58}
, {-19, -95, -37}
, {52, -87, -78}
, {102, -24, -23}
, {-15, -55, 75}
, {44, 4, 54}
, {-54, -18, -139}
, {79, 29, 78}
, {40, -110, 89}
, {-180, -110, -101}
, {12, 44, -31}
, {33, 31, 1}
, {41, 19, 4}
, {79, 63, 0}
, {46, 79, -25}
, {-87, -78, -49}
, {-89, 18, -12}
, {-25, -93, 25}
}
, {{21, 31, 77}
, {4, 31, 20}
, {-33, -89, 34}
, {75, 1, 26}
, {104, 110, -14}
, {51, -45, 27}
, {-16, -86, 31}
, {-119, -43, -31}
, {132, 82, 18}
, {-23, -14, 38}
, {-65, 19, -50}
, {-33, 5, -105}
, {24, 30, 49}
, {19, -64, -45}
, {115, 116, 13}
, {34, 59, -38}
, {26, -77, -82}
, {13, 54, 26}
, {28, 54, 26}
, {1, 17, -35}
, {32, -38, 53}
, {-70, -45, -20}
, {-67, -28, 101}
, {68, 29, 3}
, {-14, -56, -82}
, {-71, -6, 97}
, {-125, -139, -21}
, {84, 19, 95}
, {34, -36, -99}
, {37, 29, -49}
, {-28, 80, 108}
, {-86, -23, 47}
}
, {{40, 11, 116}
, {-89, 81, -51}
, {-2, -28, -51}
, {35, 1, 6}
, {114, 37, 55}
, {-7, -19, 81}
, {-26, 69, -75}
, {-16, 108, 45}
, {108, 132, 172}
, {-67, -37, -93}
, {-7, -70, 30}
, {22, -40, 59}
, {26, -41, 56}
, {35, -10, -2}
, {42, -76, -25}
, {-4, 59, -29}
, {-56, -10, -46}
, {-117, 50, 6}
, {-5, 88, -5}
, {-43, 76, 72}
, {138, 84, 35}
, {-56, -138, -146}
, {-7, -73, -49}
, {84, 159, 150}
, {79, 70, 70}
, {89, 72, -4}
, {-27, -56, -30}
, {-7, 87, -2}
, {10, -29, 42}
, {-39, 16, -21}
, {107, 43, 124}
, {-38, -89, 45}
}
, {{-135, -26, 117}
, {17, -34, -3}
, {-61, -85, 81}
, {68, 22, -135}
, {1, -1, -23}
, {2, -22, 2}
, {72, -81, 4}
, {-26, -2, -72}
, {66, 66, -51}
, {-150, -9, -8}
, {-74, 24, 92}
, {45, -76, 118}
, {59, 63, -104}
, {12, -134, -140}
, {23, 58, -59}
, {-138, 40, -12}
, {38, -64, -82}
, {-74, -226, -43}
, {-21, -8, -52}
, {-51, -87, -81}
, {-24, 98, -13}
, {-94, -60, 17}
, {-162, 39, 42}
, {85, -16, -61}
, {90, -91, -8}
, {-30, -81, -40}
, {-35, 46, -34}
, {74, 16, -23}
, {-20, 3, -109}
, {137, 139, -125}
, {-25, 77, -14}
, {-16, 15, 8}
}
}
;

#undef INPUT_CHANNELS
#undef CONV_FILTERS
#undef CONV_KERNEL_SIZE
/**
  ******************************************************************************
  * @file    maxpool.cc
  * @author  Pierre-Emmanuel Novac <penovac@unice.fr>, LEAT, CNRS, Université Côte d'Azur, France
  * @version 1.0.0
  * @date    24 march 2020
  * @brief   Template generating plain C code for the implementation of Convolutional Neural Networks on MCU
  */

#ifndef SINGLE_FILE
#include "number.h"
#endif

#define INPUT_CHANNELS  32
#define INPUT_SAMPLES   93
#define POOL_SIZE       4
#define POOL_STRIDE     4
#define POOL_PAD        0 // Unsupported
#define POOL_LENGTH	    ( ( (INPUT_SAMPLES - POOL_SIZE + (2*POOL_PAD) ) / POOL_STRIDE ) + 1 )

#define ACTIVATION_LINEAR

typedef number_t max_pooling1d_2_output_type[INPUT_CHANNELS][POOL_LENGTH];

static inline void max_pooling1d_2(
  const number_t input[INPUT_CHANNELS][INPUT_SAMPLES], 	    // IN
  number_t output[INPUT_CHANNELS][POOL_LENGTH]) {	// OUT

  unsigned short pos_x, k; 	// loop indexes for output volume
  unsigned int x;
  number_t max, tmp; 

  for (k = 0; k < INPUT_CHANNELS; k++) 
    for (pos_x = 0; pos_x < POOL_LENGTH; pos_x++) {
#ifdef ACTIVATION_LINEAR
      max = input[k][pos_x*POOL_STRIDE];
      x = 1;
#elif defined(ACTIVATION_RELU)
      max = 0;
      x = 0;
#endif
      for (; x < POOL_SIZE; x++) {
        tmp = input[k][(pos_x*POOL_STRIDE)+x]; 
        if (max < tmp)
          max = tmp;
      }
      output[k][pos_x] = max; 
    }
}

#undef INPUT_CHANNELS  
#undef INPUT_SAMPLES
#undef POOL_SIZE
#undef POOL_STRIDE
#undef POOL_PAD
#undef POOL_LENGTH
#undef ACTIVATION_LINEAR
/**
  ******************************************************************************
  * @file    conv.cc
  * @author  Pierre-Emmanuel Novac <penovac@unice.fr>, LEAT, CNRS, Université Côte d'Azur, France
  * @version 1.0.0
  * @date    24 march 2020
  * @brief   Template generating plain C code for the implementation of Convolutional Neural Networks on MCU
  */

#ifndef SINGLE_FILE
#include "number.h"
#endif

#define INPUT_CHANNELS      32
#define INPUT_SAMPLES       23
#define CONV_FILTERS        32
#define CONV_KERNEL_SIZE    3
#define CONV_STRIDE         1

#define ZEROPADDING_LEFT    0
#define ZEROPADDING_RIGHT   0

#define CONV_OUTSAMPLES     ( ( (INPUT_SAMPLES - CONV_KERNEL_SIZE + ZEROPADDING_LEFT + ZEROPADDING_RIGHT) / CONV_STRIDE ) + 1 )

#define ACTIVATION_RELU

typedef number_t conv1d_2_output_type[CONV_FILTERS][CONV_OUTSAMPLES];

static inline void conv1d_2(
  const number_t input[INPUT_CHANNELS][INPUT_SAMPLES],               // IN
  const number_t kernel[CONV_FILTERS][INPUT_CHANNELS][CONV_KERNEL_SIZE], // IN

  const number_t bias[CONV_FILTERS],						                // IN

  number_t output[CONV_FILTERS][CONV_OUTSAMPLES]) {               // OUT

  unsigned short pos_x, z, k; 	// loop indexes for output volume
  unsigned short x;
  short input_x;
  long_number_t	kernel_mac;
  static long_number_t	output_acc[CONV_OUTSAMPLES];
  long_number_t tmp;

  for (k = 0; k < CONV_FILTERS; k++) { 
    for (pos_x = 0; pos_x < CONV_OUTSAMPLES; pos_x++) { 
      output_acc[pos_x] = 0;
	    for (z = 0; z < INPUT_CHANNELS; z++) {

        kernel_mac = 0; 
        for (x = 0; x < CONV_KERNEL_SIZE; x++) {
          input_x = pos_x * CONV_STRIDE - ZEROPADDING_LEFT + x;
          if (input_x < 0 || input_x >= INPUT_SAMPLES) // ZeroPadding1D
            tmp = 0;
          else
            tmp = input[z][input_x] * kernel[k][z][x]; 
          kernel_mac = kernel_mac + tmp; 
        }

	      output_acc[pos_x] = output_acc[pos_x] + kernel_mac; 
      }
      output_acc[pos_x] = scale_number_t(output_acc[pos_x]);

      output_acc[pos_x] = output_acc[pos_x] + bias[k]; 

    }

    for (pos_x = 0; pos_x < CONV_OUTSAMPLES; pos_x++) {
#ifdef ACTIVATION_LINEAR
      output[k][pos_x] = clamp_to_number_t(output_acc[pos_x]);
#elif defined(ACTIVATION_RELU)
      // Activation function: ReLU
      if (output_acc[pos_x] < 0)
        output[k][pos_x] = 0;
      else
        output[k][pos_x] = clamp_to_number_t(output_acc[pos_x]);
#endif
    }
  }
}

#undef INPUT_CHANNELS
#undef INPUT_SAMPLES
#undef CONV_FILTERS
#undef CONV_KERNEL_SIZE
#undef CONV_STRIDE
#undef ZEROPADDING_LEFT
#undef ZEROPADDING_RIGHT
#undef CONV_OUTSAMPLES
#undef ACTIVATION_RELU
/**
  ******************************************************************************
  * @file    weights/conv.cc
  * @author  Pierre-Emmanuel Novac <penovac@unice.fr>, LEAT, CNRS, Université Côte d'Azur, France
  * @version 1.0.0
  * @date    24 march 2020
  * @brief   Template generating plain C code for the implementation of Convolutional Neural Networks on MCU
  */

#define INPUT_CHANNELS    32
#define CONV_FILTERS      32
#define CONV_KERNEL_SIZE  3


const int16_t conv1d_2_bias[CONV_FILTERS] = {111, 25, 23, 25, -3, 52, 114, 34, 14, 23, 60, 18, -21, 77, 71, -10, -5, 102, 65, -7, 30, 50, -64, 15, -9, -19, 13, 58, -39, 40, 99, -14}
;

const int16_t conv1d_2_kernel[CONV_FILTERS][INPUT_CHANNELS][CONV_KERNEL_SIZE] = {{{-103, -10, -109}
, {-97, -31, 55}
, {-79, 64, -19}
, {-38, -71, 86}
, {-23, -106, -67}
, {-84, 44, 71}
, {1, 54, -63}
, {-24, 157, 113}
, {66, -155, -141}
, {-85, -31, 113}
, {33, 149, 108}
, {53, 22, 5}
, {107, -103, 90}
, {62, 70, 37}
, {-54, 25, 5}
, {81, -62, -30}
, {-76, -31, 27}
, {-62, -13, 25}
, {73, 26, 86}
, {-32, 95, -108}
, {-56, -107, 50}
, {0, 30, 109}
, {-28, -52, -18}
, {45, -109, -66}
, {-78, -38, -20}
, {74, -56, -92}
, {-1, -67, -58}
, {39, -21, -61}
, {33, -45, 64}
, {-16, -98, -65}
, {-72, -52, -95}
, {-31, 52, 24}
}
, {{7, -81, -232}
, {92, 9, -30}
, {-3, -34, 14}
, {22, -131, -148}
, {-56, -111, -147}
, {56, -69, -64}
, {-11, -92, -14}
, {-74, 108, 13}
, {-17, 24, -126}
, {-20, -164, 1}
, {70, -10, 14}
, {95, -129, -86}
, {6, -12, -106}
, {46, -88, 34}
, {-5, -2, -92}
, {-91, 10, 67}
, {-52, -93, 37}
, {13, -32, -5}
, {120, 26, -86}
, {116, 62, 13}
, {-63, -22, -49}
, {125, -45, 47}
, {-131, -16, -87}
, {-32, 3, 3}
, {-94, -140, 82}
, {0, 89, -118}
, {47, 94, 51}
, {48, 47, -60}
, {105, 33, -127}
, {34, -102, -83}
, {-44, -58, -60}
, {69, -59, -179}
}
, {{-35, -108, -110}
, {-115, -1, -113}
, {24, -47, -29}
, {-98, 10, -56}
, {-5, 57, 25}
, {-73, -122, -90}
, {-43, -3, 67}
, {18, 4, 35}
, {-47, 82, 105}
, {28, 92, 37}
, {-57, -56, 47}
, {3, 31, -43}
, {-9, 94, -70}
, {-12, 82, 81}
, {-88, -136, -94}
, {18, 145, 37}
, {75, 81, 52}
, {-13, -17, -78}
, {155, 33, 28}
, {100, -41, 88}
, {50, -36, 17}
, {3, -66, -57}
, {-90, -56, -22}
, {-90, 65, 85}
, {-14, -81, -50}
, {-65, 55, -100}
, {66, -45, 62}
, {8, 12, -54}
, {5, -2, -48}
, {-82, -49, -88}
, {-158, -89, -51}
, {107, 8, 66}
}
, {{42, -88, -71}
, {-81, 57, 14}
, {-80, 80, -53}
, {-34, 18, -58}
, {3, -51, -69}
, {-31, 5, -93}
, {81, 35, -77}
, {-11, -51, -41}
, {-93, 34, -72}
, {38, 108, 61}
, {-1, -22, -17}
, {-4, -1, -25}
, {67, -17, 65}
, {-43, -16, 9}
, {-103, -59, -71}
, {14, 106, 66}
, {-11, -31, 69}
, {37, -60, -70}
, {-30, 60, -91}
, {13, 90, -48}
, {48, 44, 40}
, {-73, -166, 4}
, {-45, -37, -24}
, {83, 70, 57}
, {-25, 44, 12}
, {30, 78, 70}
, {118, 110, 64}
, {48, -83, -5}
, {83, 83, 69}
, {-139, -134, -136}
, {-33, -20, -70}
, {-101, -80, -156}
}
, {{-69, -8, 71}
, {9, 120, -20}
, {-65, -32, -85}
, {64, 83, 15}
, {1, -36, 66}
, {-85, -130, 0}
, {39, 19, -73}
, {-36, -8, -25}
, {48, 29, 98}
, {81, 108, 91}
, {12, 51, -74}
, {-71, 75, 67}
, {61, 97, 31}
, {-23, 44, -79}
, {-44, 37, -72}
, {96, 49, -52}
, {1, 5, 61}
, {81, 58, 6}
, {-77, -29, -90}
, {-67, -15, -116}
, {74, 71, 119}
, {40, -69, 40}
, {19, 41, 13}
, {-45, -37, -43}
, {-3, -17, 75}
, {14, -97, -77}
, {-45, -18, 59}
, {67, -4, 50}
, {108, 86, 15}
, {50, 37, -69}
, {59, 65, 56}
, {-103, -36, -18}
}
, {{48, 41, 68}
, {-81, -8, -53}
, {-55, 45, -47}
, {43, 63, -57}
, {3, 6, -38}
, {58, 82, 74}
, {-56, -4, 70}
, {-7, -110, -62}
, {-52, -66, -75}
, {63, -18, -56}
, {62, 32, -48}
, {-109, -97, 10}
, {2, 41, 69}
, {82, 63, 66}
, {51, -89, 6}
, {73, 66, 15}
, {33, -27, 10}
, {18, 7, 19}
, {151, 13, 39}
, {-42, 56, -119}
, {10, 70, -61}
, {120, 24, 13}
, {105, 40, 126}
, {94, -4, 89}
, {42, -34, -83}
, {-23, 36, 120}
, {-2, 60, 45}
, {23, -34, -20}
, {-19, -3, 42}
, {-57, -6, 29}
, {18, -85, -106}
, {-84, -25, 5}
}
, {{-85, -148, -132}
, {7, -3, -39}
, {-22, -18, -79}
, {-45, 57, -23}
, {-77, -26, -41}
, {26, 60, 2}
, {-89, -27, 62}
, {-12, 125, 55}
, {13, -80, 45}
, {-102, 5, -14}
, {82, 121, 37}
, {-23, -88, 7}
, {-131, 14, -57}
, {11, 70, -29}
, {-41, 53, -64}
, {149, 37, -45}
, {49, 12, -47}
, {16, -22, 47}
, {111, 42, 123}
, {-9, -9, -28}
, {-50, 95, 111}
, {29, -46, 90}
, {80, 4, 35}
, {-38, -14, -17}
, {24, -28, -38}
, {-42, 31, 8}
, {-71, -63, 9}
, {-30, -43, -96}
, {-15, -73, -40}
, {56, -5, 25}
, {105, 123, 30}
, {74, 70, 58}
}
, {{-53, -27, -87}
, {6, 3, -107}
, {-40, -21, 7}
, {-51, -12, -112}
, {-10, -61, -66}
, {-23, -39, 53}
, {-73, -62, -79}
, {-112, -156, -76}
, {-69, -24, 47}
, {-1, 50, -75}
, {63, -124, 70}
, {-66, -108, -57}
, {110, 53, 108}
, {-18, -2, 72}
, {-234, -63, -139}
, {-32, 119, 153}
, {129, 104, -2}
, {12, -71, 22}
, {11, 11, 59}
, {-45, -84, -73}
, {105, 64, 44}
, {-165, -69, -9}
, {103, 18, 98}
, {90, 50, -32}
, {-47, 53, 90}
, {-26, 66, -16}
, {-78, -39, -86}
, {24, 104, 33}
, {125, 24, -40}
, {-50, 96, 147}
, {-137, -199, -89}
, {-38, -95, 77}
}
, {{-17, -3, -93}
, {13, -32, -47}
, {40, 37, -41}
, {-24, -67, -29}
, {-69, -85, -91}
, {97, 70, 115}
, {-61, -87, -45}
, {133, 83, 67}
, {57, 0, -33}
, {-107, -27, -100}
, {58, 121, 108}
, {-109, -49, -132}
, {-29, -65, -134}
, {-82, -39, -59}
, {78, 80, -45}
, {41, 85, 43}
, {-17, 30, 17}
, {77, -36, 30}
, {-23, -79, -86}
, {-58, 36, 30}
, {96, 76, -33}
, {-25, -30, 32}
, {87, 73, 94}
, {-57, -88, -15}
, {-41, 42, -84}
, {-31, -37, -40}
, {117, 12, -85}
, {93, -41, 49}
, {-79, -46, 0}
, {-103, -75, 7}
, {119, -47, 12}
, {-171, -138, -126}
}
, {{-34, -126, 6}
, {54, -66, -45}
, {18, 62, 84}
, {79, -112, 104}
, {-5, -61, -77}
, {73, -41, -98}
, {-25, 22, -53}
, {88, -47, -48}
, {-89, -33, 40}
, {28, 98, 22}
, {-32, -88, -116}
, {36, 5, -11}
, {37, -32, 61}
, {-4, 112, -20}
, {37, -79, -20}
, {103, 19, 23}
, {42, 24, 53}
, {-23, -6, -1}
, {87, -51, 116}
, {110, 94, 21}
, {46, -35, -53}
, {65, 35, -23}
, {71, -61, -18}
, {-44, -75, 56}
, {-11, 87, 38}
, {-48, -104, 34}
, {-110, 93, 107}
, {39, -26, -78}
, {106, 59, -88}
, {67, -24, -133}
, {-8, -5, 24}
, {113, 31, -37}
}
, {{-62, -26, -68}
, {71, -44, 0}
, {15, 54, 9}
, {-12, -11, 77}
, {72, 41, 16}
, {109, 17, 63}
, {33, -32, -70}
, {-25, -31, -28}
, {29, 50, -24}
, {-1, -41, 68}
, {-13, -20, 11}
, {55, 100, -47}
, {52, -51, 1}
, {99, 72, 106}
, {62, -75, 71}
, {39, -43, -35}
, {-5, -52, -64}
, {39, 72, -59}
, {7, 21, 25}
, {-97, 45, 23}
, {32, -19, 84}
, {-75, -56, -29}
, {25, -27, -43}
, {-72, -46, 33}
, {36, -68, 24}
, {-30, -51, -29}
, {35, -5, -98}
, {-9, -71, -59}
, {1, 23, 38}
, {-31, -62, 8}
, {-66, 79, -12}
, {64, 16, 100}
}
, {{-135, 16, -60}
, {-198, -114, -84}
, {-46, -50, -22}
, {-112, 0, 61}
, {8, -19, -21}
, {8, -67, 27}
, {8, 54, -2}
, {128, 117, -145}
, {96, 77, -18}
, {42, 109, 104}
, {20, -25, -64}
, {-16, 31, 141}
, {-94, -24, 113}
, {-62, -5, 113}
, {-33, 66, -72}
, {22, 28, -28}
, {-82, -55, 68}
, {85, 75, -12}
, {-24, -17, 73}
, {-67, 31, 38}
, {22, -86, -97}
, {25, -107, -1}
, {-66, 60, 37}
, {-91, -102, 110}
, {-3, -69, -44}
, {-53, -66, 101}
, {54, 88, -34}
, {56, -62, 83}
, {-19, -155, 27}
, {3, -166, -128}
, {-12, -125, -67}
, {-4, 89, 97}
}
, {{-27, -112, -34}
, {16, -96, 6}
, {38, 40, -55}
, {-74, -83, 60}
, {-55, -16, -15}
, {-75, -21, -44}
, {-19, -38, 64}
, {-105, 26, -53}
, {45, 71, 19}
, {26, -40, 6}
, {11, 92, 9}
, {25, 53, 34}
, {64, -46, 0}
, {25, 51, 8}
, {-76, 12, -20}
, {57, 34, -5}
, {88, 72, 33}
, {85, 89, 81}
, {-39, 45, 42}
, {-48, -42, -55}
, {113, 40, -6}
, {3, -154, -143}
, {23, 107, 132}
, {68, 32, -69}
, {-41, 57, 5}
, {9, -91, 55}
, {63, 21, -16}
, {73, -34, -2}
, {-131, -6, -56}
, {-4, 112, -51}
, {-80, -24, -19}
, {3, 85, 45}
}
, {{-115, -40, -40}
, {43, 5, 50}
, {29, -39, -90}
, {-51, 18, 78}
, {-105, 29, 19}
, {-34, -110, -135}
, {41, 10, -14}
, {-5, -134, -6}
, {26, 4, 18}
, {-31, -113, -106}
, {69, -107, -122}
, {-12, 42, -60}
, {-10, -32, -16}
, {66, 102, 102}
, {-110, 43, 62}
, {-16, -56, 21}
, {19, 21, -31}
, {-111, 11, 70}
, {-69, -43, 8}
, {-141, -137, -111}
, {75, 39, 123}
, {26, -16, -20}
, {16, 100, -8}
, {-45, -57, 10}
, {103, 18, -62}
, {-67, 60, 68}
, {-179, -88, -60}
, {45, -12, 103}
, {41, 16, -30}
, {-145, 73, -110}
, {-29, 83, -105}
, {29, -21, 83}
}
, {{-2, 8, 84}
, {-123, -123, -17}
, {-5, 2, -79}
, {31, 15, 70}
, {-40, 15, -50}
, {-25, 24, -93}
, {-45, -3, 58}
, {-183, -69, 167}
, {-15, 0, 54}
, {-85, 21, -52}
, {-86, 45, 129}
, {78, -19, 93}
, {41, 81, 75}
, {26, 52, -75}
, {19, -26, 49}
, {45, 54, -52}
, {70, -146, -159}
, {-2, -77, -36}
, {-119, 0, 74}
, {-79, 43, 16}
, {-73, -157, -101}
, {35, 53, -55}
, {6, -19, -142}
, {-12, 76, -69}
, {-104, -105, -11}
, {11, 33, 87}
, {-14, -56, 57}
, {49, -63, -61}
, {3, -61, 30}
, {13, 17, -29}
, {80, -26, 130}
, {5, -79, -134}
}
, {{-98, 4, 34}
, {-41, -38, -81}
, {-65, 41, -38}
, {-42, -62, -73}
, {-21, -88, -1}
, {40, -38, 11}
, {-14, -23, -16}
, {-100, 14, -86}
, {-2, 44, 18}
, {-70, 38, 21}
, {74, 22, -72}
, {-92, 4, 63}
, {2, 82, -72}
, {29, -20, -91}
, {-1, -67, -71}
, {78, -19, 71}
, {-43, -69, -48}
, {27, -26, -41}
, {0, 80, -43}
, {9, 46, 39}
, {-103, 62, -75}
, {82, 6, -93}
, {-8, -33, -90}
, {-69, -60, -71}
, {-48, 36, 21}
, {-45, -79, -91}
, {59, 31, -93}
, {-76, -35, 83}
, {53, -46, -61}
, {56, -57, -3}
, {33, -41, 35}
, {-84, 63, -104}
}
, {{67, 48, 50}
, {23, -37, -102}
, {-55, -53, -25}
, {68, -77, -3}
, {126, 15, 32}
, {-112, 48, -90}
, {1, -27, -26}
, {127, 47, 3}
, {94, 45, -16}
, {-13, 7, 62}
, {6, 76, 6}
, {88, -46, 56}
, {46, -46, -43}
, {4, -92, 7}
, {-73, -38, -77}
, {76, 155, 87}
, {-82, 14, -35}
, {-35, 64, -74}
, {-9, -24, 30}
, {41, 35, -79}
, {32, -53, 0}
, {-31, -9, -105}
, {-3, -5, 95}
, {45, 8, 39}
, {-62, -66, 16}
, {57, -94, 52}
, {1, -61, -66}
, {129, 12, -47}
, {-30, -122, -114}
, {92, 59, -33}
, {1, -92, 66}
, {-35, 57, -69}
}
, {{-57, -174, -94}
, {27, 84, -51}
, {44, 26, 76}
, {50, -40, 109}
, {-155, -45, 36}
, {-75, 20, 59}
, {-71, 89, -17}
, {6, 75, -57}
, {-156, 4, 112}
, {-43, -3, -40}
, {-19, 39, 10}
, {13, 38, 110}
, {33, -7, -54}
, {5, 14, 82}
, {15, -37, 15}
, {12, -83, -107}
, {-111, -49, 41}
, {-144, 22, 21}
, {28, 22, 74}
, {-15, -20, -144}
, {27, -95, 38}
, {96, 97, -11}
, {-7, 12, 31}
, {-5, -12, 50}
, {-107, 46, 45}
, {-108, -31, -97}
, {-85, 0, 90}
, {-79, 53, -10}
, {107, 98, -82}
, {44, 96, 13}
, {33, 88, 66}
, {-50, -8, -100}
}
, {{-61, -80, 12}
, {-54, -69, 43}
, {6, 5, -40}
, {67, 68, -4}
, {88, -63, 0}
, {49, -91, -40}
, {89, 69, 41}
, {-78, -63, 123}
, {90, -49, -25}
, {21, -137, -124}
, {-141, -78, 13}
, {-51, 30, 51}
, {66, -14, 28}
, {45, 48, -62}
, {129, 87, 23}
, {20, -26, -49}
, {-86, -75, 13}
, {-80, -102, -117}
, {89, 104, 99}
, {-58, -47, 106}
, {-84, -110, -39}
, {77, 87, -14}
, {-77, -29, -1}
, {13, -63, -94}
, {32, -149, 7}
, {-38, -9, -78}
, {52, -26, -4}
, {47, 13, -21}
, {-43, 7, -50}
, {-82, -43, -46}
, {31, 42, 47}
, {74, 27, -36}
}
, {{-29, -42, -29}
, {-36, 18, -4}
, {-93, 38, 24}
, {25, 4, -34}
, {-43, 32, 32}
, {-54, -59, 49}
, {64, -55, 21}
, {51, -76, -28}
, {-92, 0, -21}
, {-86, -53, -27}
, {0, -89, -15}
, {-14, -67, 76}
, {-24, 10, -46}
, {26, -85, 18}
, {-44, 77, 34}
, {66, 35, -80}
, {-44, -18, -70}
, {-62, -68, 77}
, {-31, 19, 25}
, {42, -45, -52}
, {-9, -66, 85}
, {-28, -43, -32}
, {51, -43, -10}
, {62, -71, 3}
, {-31, 5, -83}
, {-87, 50, -50}
, {-19, -84, 13}
, {36, -76, -52}
, {55, 7, 41}
, {22, 85, -39}
, {48, 15, -55}
, {-57, 71, -97}
}
, {{-75, -142, -70}
, {6, 25, -86}
, {13, 77, -65}
, {62, -63, -131}
, {-91, -76, 32}
, {-79, 85, 101}
, {8, 64, -82}
, {-76, -29, 162}
, {-34, -54, -21}
, {0, 1, -37}
, {-117, 54, 7}
, {58, 38, -146}
, {62, 2, -18}
, {34, 47, -107}
, {-58, -37, -53}
, {84, -3, 59}
, {87, -36, -86}
, {-16, -69, -120}
, {-142, 19, -54}
, {-16, -9, 112}
, {13, 85, 25}
, {64, -68, -16}
, {-80, 83, -97}
, {11, 25, 45}
, {61, 73, -127}
, {86, -23, 72}
, {53, -81, -4}
, {54, 16, -89}
, {73, 140, 81}
, {6, -20, 34}
, {-53, 19, -38}
, {-62, 39, -31}
}
, {{-91, 0, -63}
, {-9, -22, 34}
, {-85, 50, -52}
, {59, 86, 20}
, {61, -91, -43}
, {-9, -4, -82}
, {-43, 28, 26}
, {-27, -36, 71}
, {-124, -45, -129}
, {10, 11, 0}
, {85, 19, 11}
, {-65, 70, 40}
, {-110, 60, -119}
, {71, 67, 3}
, {-90, 48, 74}
, {-98, -94, -85}
, {8, -79, 85}
, {65, 20, -43}
, {-12, -21, 109}
, {58, 68, 106}
, {-81, -206, -149}
, {55, 36, -14}
, {-68, -32, -124}
, {3, -21, -41}
, {65, -107, -63}
, {-16, -15, -85}
, {-48, -8, -47}
, {-62, 4, -58}
, {-38, 83, 39}
, {-21, -6, -113}
, {-58, -108, -62}
, {-27, 63, 107}
}
, {{37, -4, -51}
, {46, -47, -59}
, {-74, 50, 5}
, {-24, 62, -35}
, {-82, 39, 4}
, {-134, -18, -83}
, {-78, -16, -15}
, {0, -13, 48}
, {12, -92, 70}
, {-55, 17, 104}
, {46, -69, 60}
, {80, -32, 23}
, {-6, 37, -38}
, {-8, 11, -4}
, {-122, 1, -51}
, {76, 36, 50}
, {-40, -28, 75}
, {53, 30, 91}
, {36, 5, -4}
, {51, 41, 42}
, {55, 15, -15}
, {-24, 15, -42}
, {-90, 25, 17}
, {71, 36, -43}
, {15, -87, -78}
, {69, 44, 94}
, {0, -6, -38}
, {114, 9, -2}
, {-55, -86, 31}
, {91, 41, 97}
, {-36, -122, -87}
, {39, 91, 75}
}
, {{-39, -99, -48}
, {57, -62, -88}
, {13, 67, 47}
, {103, -17, 47}
, {64, -7, 26}
, {15, -15, -105}
, {9, -75, 62}
, {-78, -43, -36}
, {72, 104, 18}
, {-12, 2, -2}
, {-12, -174, -33}
, {-64, -13, 92}
, {-43, 12, 116}
, {-36, 84, -65}
, {119, -4, -11}
, {-43, 17, -97}
, {27, -24, 26}
, {89, 105, 25}
, {77, 80, 50}
, {-77, -42, -9}
, {-74, -61, -112}
, {-92, 41, -26}
, {75, 87, -55}
, {12, 10, 59}
, {40, -32, 22}
, {2, -84, -59}
, {52, 24, -12}
, {58, -60, -2}
, {19, -78, 112}
, {-51, 39, -90}
, {163, 44, 93}
, {0, 93, 142}
}
, {{1, 27, 23}
, {-80, 42, -81}
, {-63, -89, 17}
, {-94, 38, 14}
, {-52, 45, -33}
, {-35, -99, -102}
, {-77, 38, -42}
, {-79, -2, 52}
, {-24, 35, -11}
, {-45, -10, 58}
, {35, -82, 38}
, {-10, -45, -78}
, {62, -70, -44}
, {82, -93, -72}
, {26, -64, 39}
, {-77, -6, -28}
, {58, -60, -5}
, {-34, 29, -93}
, {59, -22, -9}
, {4, -46, -19}
, {-24, -32, -70}
, {-53, 75, 12}
, {17, 57, -80}
, {-56, 25, 80}
, {29, 19, 6}
, {-49, -64, -55}
, {-47, -18, -84}
, {-14, 81, -43}
, {1, 46, 18}
, {-61, -28, 0}
, {44, -70, -56}
, {16, -53, -17}
}
, {{1, 71, 84}
, {61, -24, 113}
, {-79, 54, -102}
, {23, 40, -21}
, {-58, 5, -21}
, {7, -73, -112}
, {-15, -74, 20}
, {75, 41, -35}
, {113, 112, 68}
, {-81, -40, 34}
, {107, 43, -39}
, {-23, -9, -20}
, {-7, -32, -90}
, {20, -32, -46}
, {-1, -36, -16}
, {-30, -79, -16}
, {-40, 82, 57}
, {80, 53, 11}
, {73, -6, 72}
, {-28, -43, -89}
, {73, 98, -37}
, {-90, -188, -150}
, {135, 108, 134}
, {23, -52, -6}
, {108, 94, 26}
, {-112, -23, -56}
, {0, 67, 139}
, {-58, 19, -49}
, {-110, -70, -14}
, {-85, 2, 89}
, {48, 89, 2}
, {70, -84, 86}
}
, {{-8, -95, -20}
, {-85, 1, -122}
, {68, 18, -30}
, {-53, 12, -72}
, {-132, 15, -14}
, {60, -18, 6}
, {-81, -68, 12}
, {-109, -130, -2}
, {-152, -102, -106}
, {73, 60, 8}
, {50, 17, -21}
, {63, -96, 19}
, {82, -66, 26}
, {42, 55, -68}
, {-12, 28, -55}
, {5, -13, -62}
, {16, -41, 33}
, {14, -28, 10}
, {-35, -9, 62}
, {-66, 35, 39}
, {25, 10, 77}
, {-1, 56, -26}
, {-3, 78, -27}
, {36, 78, -2}
, {-22, 26, 18}
, {-68, 8, 80}
, {34, -41, -27}
, {-105, -86, -7}
, {-102, 49, 87}
, {21, -50, -63}
, {-26, -65, -49}
, {78, 39, 107}
}
, {{-50, -137, -18}
, {66, 42, 54}
, {-41, 77, -22}
, {-109, 0, -15}
, {-51, -67, -44}
, {21, -119, -110}
, {58, 4, -12}
, {98, 41, 59}
, {36, -22, 8}
, {-45, -1, 42}
, {-5, -56, 7}
, {-117, -17, -20}
, {-31, 32, 60}
, {3, -18, 126}
, {-80, -13, -2}
, {3, 1, 0}
, {6, 24, 135}
, {-105, -43, 97}
, {-66, 65, -40}
, {-70, -95, -21}
, {-26, 0, 99}
, {9, 89, 20}
, {-75, 99, 35}
, {-37, -14, 137}
, {-15, 78, -7}
, {-119, -72, 42}
, {-24, -71, -79}
, {-26, -49, 93}
, {14, -18, 41}
, {-78, -105, 50}
, {-34, 117, 89}
, {-127, -123, 172}
}
, {{10, 20, 54}
, {81, -79, 3}
, {46, 4, -51}
, {-38, -26, -29}
, {50, 98, 49}
, {-18, 17, 110}
, {46, 18, -39}
, {-45, -25, 16}
, {51, 36, 83}
, {40, -47, -53}
, {-44, 18, 49}
, {90, 33, -9}
, {-9, -158, -137}
, {28, -31, 62}
, {-70, 22, 39}
, {34, 49, 54}
, {-27, -89, 4}
, {-32, 102, 37}
, {-54, 44, -45}
, {38, -38, -45}
, {55, 60, 9}
, {17, -79, -101}
, {94, 58, 88}
, {-30, 43, -24}
, {30, -63, 0}
, {-98, -29, -12}
, {31, -29, 33}
, {40, -3, 89}
, {84, -60, -95}
, {43, 49, 51}
, {108, 9, 39}
, {35, 6, 51}
}
, {{-47, 60, -30}
, {26, 23, 53}
, {-45, -33, -60}
, {-62, -102, -66}
, {54, -108, 17}
, {39, -13, -3}
, {34, 16, -11}
, {93, -20, -99}
, {-44, -124, 82}
, {-14, 110, 27}
, {120, 26, -102}
, {60, -13, -78}
, {-83, 63, 13}
, {59, -51, 27}
, {49, -5, 99}
, {-70, -55, 0}
, {-106, 30, 22}
, {-101, -89, 85}
, {30, 18, 7}
, {11, -45, -96}
, {-84, -55, 12}
, {41, -108, 35}
, {-98, -40, -23}
, {21, -48, 70}
, {-4, 34, 71}
, {27, -37, 96}
, {60, 68, -27}
, {0, -21, 34}
, {57, -40, 69}
, {82, 35, -116}
, {-155, -9, 42}
, {31, -47, 0}
}
, {{-84, -36, -34}
, {18, 24, 1}
, {-29, -16, -65}
, {-40, 75, -25}
, {-89, -88, -27}
, {125, 105, -23}
, {-27, -14, 42}
, {24, 88, 71}
, {33, 46, 86}
, {-239, -134, -304}
, {-25, 58, 60}
, {-2, -108, 2}
, {-132, 63, -74}
, {22, -51, 87}
, {-77, 31, 15}
, {88, 66, 115}
, {-89, 46, -18}
, {-133, 37, -45}
, {91, 43, 99}
, {-276, -153, -296}
, {88, 44, 12}
, {-13, 1, 100}
, {115, 2, 38}
, {-57, -105, -55}
, {-199, -146, -237}
, {27, 30, -25}
, {-159, 8, -76}
, {44, 86, 64}
, {-4, 10, 87}
, {-37, -147, -166}
, {-60, -71, 12}
, {-112, -85, -120}
}
, {{-15, -40, -9}
, {-130, -26, -4}
, {4, 54, 33}
, {-33, -89, 8}
, {-6, 67, -58}
, {8, -1, 27}
, {-2, 75, -63}
, {82, -45, -33}
, {144, 117, 22}
, {-115, -114, -10}
, {-9, 45, 40}
, {-40, 2, 60}
, {-80, -91, -49}
, {-77, -41, -16}
, {50, -45, 26}
, {-38, 22, 108}
, {-49, 35, -54}
, {65, 76, 89}
, {106, -69, -58}
, {40, -22, 33}
, {36, 114, -9}
, {28, -4, -9}
, {74, 43, 133}
, {24, -94, -55}
, {-74, 34, 104}
, {-52, 37, 43}
, {60, 78, 64}
, {83, 74, -103}
, {-79, -80, -97}
, {-128, -5, 23}
, {127, 25, 128}
, {-21, 9, -24}
}
}
;

#undef INPUT_CHANNELS
#undef CONV_FILTERS
#undef CONV_KERNEL_SIZE
/**
  ******************************************************************************
  * @file    maxpool.cc
  * @author  Pierre-Emmanuel Novac <penovac@unice.fr>, LEAT, CNRS, Université Côte d'Azur, France
  * @version 1.0.0
  * @date    24 march 2020
  * @brief   Template generating plain C code for the implementation of Convolutional Neural Networks on MCU
  */

#ifndef SINGLE_FILE
#include "number.h"
#endif

#define INPUT_CHANNELS  32
#define INPUT_SAMPLES   21
#define POOL_SIZE       4
#define POOL_STRIDE     4
#define POOL_PAD        0 // Unsupported
#define POOL_LENGTH	    ( ( (INPUT_SAMPLES - POOL_SIZE + (2*POOL_PAD) ) / POOL_STRIDE ) + 1 )

#define ACTIVATION_LINEAR

typedef number_t max_pooling1d_3_output_type[INPUT_CHANNELS][POOL_LENGTH];

static inline void max_pooling1d_3(
  const number_t input[INPUT_CHANNELS][INPUT_SAMPLES], 	    // IN
  number_t output[INPUT_CHANNELS][POOL_LENGTH]) {	// OUT

  unsigned short pos_x, k; 	// loop indexes for output volume
  unsigned int x;
  number_t max, tmp; 

  for (k = 0; k < INPUT_CHANNELS; k++) 
    for (pos_x = 0; pos_x < POOL_LENGTH; pos_x++) {
#ifdef ACTIVATION_LINEAR
      max = input[k][pos_x*POOL_STRIDE];
      x = 1;
#elif defined(ACTIVATION_RELU)
      max = 0;
      x = 0;
#endif
      for (; x < POOL_SIZE; x++) {
        tmp = input[k][(pos_x*POOL_STRIDE)+x]; 
        if (max < tmp)
          max = tmp;
      }
      output[k][pos_x] = max; 
    }
}

#undef INPUT_CHANNELS  
#undef INPUT_SAMPLES
#undef POOL_SIZE
#undef POOL_STRIDE
#undef POOL_PAD
#undef POOL_LENGTH
#undef ACTIVATION_LINEAR
/**
  ******************************************************************************
  * @file    conv.cc
  * @author  Pierre-Emmanuel Novac <penovac@unice.fr>, LEAT, CNRS, Université Côte d'Azur, France
  * @version 1.0.0
  * @date    24 march 2020
  * @brief   Template generating plain C code for the implementation of Convolutional Neural Networks on MCU
  */

#ifndef SINGLE_FILE
#include "number.h"
#endif

#define INPUT_CHANNELS      32
#define INPUT_SAMPLES       5
#define CONV_FILTERS        32
#define CONV_KERNEL_SIZE    3
#define CONV_STRIDE         1

#define ZEROPADDING_LEFT    0
#define ZEROPADDING_RIGHT   0

#define CONV_OUTSAMPLES     ( ( (INPUT_SAMPLES - CONV_KERNEL_SIZE + ZEROPADDING_LEFT + ZEROPADDING_RIGHT) / CONV_STRIDE ) + 1 )

#define ACTIVATION_RELU

typedef number_t conv1d_3_output_type[CONV_FILTERS][CONV_OUTSAMPLES];

static inline void conv1d_3(
  const number_t input[INPUT_CHANNELS][INPUT_SAMPLES],               // IN
  const number_t kernel[CONV_FILTERS][INPUT_CHANNELS][CONV_KERNEL_SIZE], // IN

  const number_t bias[CONV_FILTERS],						                // IN

  number_t output[CONV_FILTERS][CONV_OUTSAMPLES]) {               // OUT

  unsigned short pos_x, z, k; 	// loop indexes for output volume
  unsigned short x;
  short input_x;
  long_number_t	kernel_mac;
  static long_number_t	output_acc[CONV_OUTSAMPLES];
  long_number_t tmp;

  for (k = 0; k < CONV_FILTERS; k++) { 
    for (pos_x = 0; pos_x < CONV_OUTSAMPLES; pos_x++) { 
      output_acc[pos_x] = 0;
	    for (z = 0; z < INPUT_CHANNELS; z++) {

        kernel_mac = 0; 
        for (x = 0; x < CONV_KERNEL_SIZE; x++) {
          input_x = pos_x * CONV_STRIDE - ZEROPADDING_LEFT + x;
          if (input_x < 0 || input_x >= INPUT_SAMPLES) // ZeroPadding1D
            tmp = 0;
          else
            tmp = input[z][input_x] * kernel[k][z][x]; 
          kernel_mac = kernel_mac + tmp; 
        }

	      output_acc[pos_x] = output_acc[pos_x] + kernel_mac; 
      }
      output_acc[pos_x] = scale_number_t(output_acc[pos_x]);

      output_acc[pos_x] = output_acc[pos_x] + bias[k]; 

    }

    for (pos_x = 0; pos_x < CONV_OUTSAMPLES; pos_x++) {
#ifdef ACTIVATION_LINEAR
      output[k][pos_x] = clamp_to_number_t(output_acc[pos_x]);
#elif defined(ACTIVATION_RELU)
      // Activation function: ReLU
      if (output_acc[pos_x] < 0)
        output[k][pos_x] = 0;
      else
        output[k][pos_x] = clamp_to_number_t(output_acc[pos_x]);
#endif
    }
  }
}

#undef INPUT_CHANNELS
#undef INPUT_SAMPLES
#undef CONV_FILTERS
#undef CONV_KERNEL_SIZE
#undef CONV_STRIDE
#undef ZEROPADDING_LEFT
#undef ZEROPADDING_RIGHT
#undef CONV_OUTSAMPLES
#undef ACTIVATION_RELU
/**
  ******************************************************************************
  * @file    weights/conv.cc
  * @author  Pierre-Emmanuel Novac <penovac@unice.fr>, LEAT, CNRS, Université Côte d'Azur, France
  * @version 1.0.0
  * @date    24 march 2020
  * @brief   Template generating plain C code for the implementation of Convolutional Neural Networks on MCU
  */

#define INPUT_CHANNELS    32
#define CONV_FILTERS      32
#define CONV_KERNEL_SIZE  3


const int16_t conv1d_3_bias[CONV_FILTERS] = {8, -28, -5, -18, -15, -22, 38, 30, 29, 58, 89, -12, -18, 40, 66, 86, -10, 34, -3, 110, -2, 27, 49, 83, 22, 21, 7, 27, -4, 61, -11, 65}
;

const int16_t conv1d_3_kernel[CONV_FILTERS][INPUT_CHANNELS][CONV_KERNEL_SIZE] = {{{5, 27, 48}
, {-131, -25, 34}
, {-8, -73, -8}
, {-62, 46, -54}
, {-73, 11, -1}
, {-72, 64, 35}
, {111, -50, 36}
, {56, -19, -1}
, {107, -42, -61}
, {-70, 155, -32}
, {51, -8, -36}
, {-40, 141, -41}
, {-23, -12, -101}
, {-49, 71, 118}
, {-193, 38, 28}
, {-100, -69, -22}
, {-17, -12, 86}
, {93, 172, -50}
, {-66, 13, -2}
, {44, 8, 70}
, {-179, -35, 9}
, {-136, -22, -138}
, {-60, 75, -34}
, {22, -13, 84}
, {41, -72, 39}
, {-24, -35, -132}
, {-155, -4, 42}
, {59, 104, -58}
, {-77, -131, 18}
, {58, 92, -37}
, {27, 23, 34}
, {-131, -137, 87}
}
, {{38, -51, -33}
, {-68, -8, -87}
, {-28, -56, 6}
, {53, 76, 13}
, {9, 28, 13}
, {-53, -61, 4}
, {68, -62, -83}
, {-46, 66, 72}
, {27, -30, 62}
, {-71, 112, 129}
, {-65, -21, 90}
, {-128, 31, -44}
, {-37, 18, 62}
, {0, -58, 26}
, {-27, -45, 6}
, {17, 14, -59}
, {25, -33, 48}
, {118, 121, 224}
, {5, 24, -57}
, {-80, -2, -47}
, {-100, 21, -123}
, {-8, 69, -49}
, {-14, -78, -88}
, {34, 12, 174}
, {69, -92, -96}
, {-108, -20, 154}
, {-46, 52, -37}
, {92, 5, -22}
, {-125, 31, -11}
, {20, -23, -3}
, {40, 89, 117}
, {-108, 95, 47}
}
, {{72, -22, 68}
, {20, 61, -40}
, {-71, -16, 19}
, {81, 32, 62}
, {-25, 18, 5}
, {-102, -77, -84}
, {-60, 53, 60}
, {59, -103, -60}
, {71, -66, 6}
, {-24, 68, -26}
, {-55, 54, 49}
, {73, 45, -8}
, {-7, -11, 62}
, {-25, 21, -21}
, {27, 68, 52}
, {81, -83, 4}
, {-43, -6, -69}
, {62, -86, -3}
, {-60, -72, -52}
, {23, 8, 44}
, {30, -61, 37}
, {-90, -32, -25}
, {-77, -60, -86}
, {-93, -81, 10}
, {29, -2, -55}
, {18, 58, -1}
, {76, -27, -1}
, {-73, -74, 30}
, {-87, -110, -107}
, {-70, 71, -7}
, {-61, -57, 7}
, {33, 36, 7}
}
, {{-39, -64, 23}
, {-102, -22, -36}
, {91, 108, 38}
, {17, -13, -49}
, {28, 94, 87}
, {21, -13, -82}
, {85, 74, 69}
, {-73, -22, -11}
, {-40, 65, 67}
, {0, -77, 28}
, {76, -16, -75}
, {3, 10, 104}
, {40, 67, 33}
, {-45, -92, -44}
, {-128, 7, -96}
, {-20, -78, -54}
, {64, 105, 108}
, {-26, 45, -82}
, {-196, -27, -111}
, {8, 49, -37}
, {71, -47, -53}
, {-72, -84, 42}
, {20, 93, 31}
, {16, -62, 4}
, {-15, -84, 9}
, {-37, -84, -25}
, {-43, 100, 22}
, {-1, 34, -125}
, {66, 55, -55}
, {-44, -90, -14}
, {149, 45, 57}
, {-124, 17, 26}
}
, {{125, -1, 54}
, {69, 115, 82}
, {-26, -20, -1}
, {-24, -34, -83}
, {34, 0, -6}
, {40, -53, 23}
, {-6, -30, 44}
, {-233, -125, -194}
, {24, 0, -37}
, {84, 116, 100}
, {62, 36, -9}
, {45, 72, -10}
, {-121, -103, -85}
, {23, -75, -19}
, {6, -41, -11}
, {-77, 63, -29}
, {-35, -39, -32}
, {79, 63, 86}
, {-33, 85, -25}
, {-26, -35, -60}
, {122, 124, 120}
, {24, 52, 19}
, {33, 52, 18}
, {-32, -47, 88}
, {20, -6, -26}
, {-41, -171, -48}
, {15, 97, 74}
, {101, 67, 12}
, {-16, -56, 82}
, {-37, -87, -21}
, {-43, -127, 4}
, {20, -53, -14}
}
, {{129, 134, 119}
, {-123, -94, -143}
, {-31, 13, -48}
, {-39, 22, -83}
, {52, 51, -31}
, {-27, -60, -108}
, {41, -57, -55}
, {125, 67, -70}
, {-78, -42, -119}
, {14, 89, 95}
, {-42, -79, 62}
, {64, 78, 69}
, {44, -20, 77}
, {161, 143, 19}
, {1, -5, 83}
, {44, 41, 9}
, {34, 75, -32}
, {149, 123, 258}
, {3, 111, 68}
, {3, -26, -35}
, {-4, 26, -59}
, {-9, 24, 33}
, {42, 19, -62}
, {6, -68, -51}
, {-26, 44, 37}
, {86, -10, 62}
, {28, 35, 27}
, {13, 57, 2}
, {-62, 52, -38}
, {-49, -3, 106}
, {-192, -78, -125}
, {54, -18, 100}
}
, {{149, 57, 123}
, {-66, -48, -99}
, {26, 45, 111}
, {-3, 44, 78}
, {61, 47, -21}
, {83, 43, 10}
, {-115, -2, -48}
, {175, 166, 126}
, {-123, -13, -1}
, {64, 11, -28}
, {-8, -78, 47}
, {-6, 85, 73}
, {-43, 74, 50}
, {125, 131, 14}
, {58, -68, -24}
, {-42, -47, -47}
, {33, -59, 43}
, {-16, -26, 25}
, {-24, 71, 98}
, {18, 56, 86}
, {9, 92, 75}
, {-99, -58, -64}
, {48, -78, 46}
, {-67, -124, -165}
, {-86, 21, 71}
, {-88, -7, -127}
, {23, 93, -28}
, {22, -14, 120}
, {-85, -45, -4}
, {86, -36, 0}
, {3, 23, -68}
, {-202, -206, -177}
}
, {{-146, 16, -55}
, {7, 112, -98}
, {-14, -126, -79}
, {-113, 15, -83}
, {3, -60, 16}
, {22, 62, 65}
, {-67, 34, -25}
, {71, -16, 85}
, {75, 95, 91}
, {-104, 51, -91}
, {26, -2, 49}
, {-103, -103, -79}
, {-47, 17, -49}
, {121, 17, 151}
, {3, -33, 7}
, {-20, -16, 22}
, {68, 59, 61}
, {75, 55, 1}
, {66, 72, -22}
, {-89, -67, 75}
, {36, -78, 42}
, {53, 67, -39}
, {-59, 0, 83}
, {-12, 51, -31}
, {-21, -86, 55}
, {-43, 84, 80}
, {29, -14, 16}
, {-90, -43, -95}
, {73, -1, 16}
, {1, -60, -117}
, {-96, -186, -189}
, {2, -41, 8}
}
, {{9, 32, 64}
, {55, 85, 51}
, {59, -38, 52}
, {-7, 34, 62}
, {44, 21, -28}
, {8, -77, -25}
, {128, 95, 100}
, {-14, 35, -10}
, {-58, -74, -64}
, {-48, 45, -86}
, {18, -89, -8}
, {-6, 22, 82}
, {-86, 40, 66}
, {112, 28, 78}
, {96, 40, 44}
, {-73, 59, 75}
, {55, 54, 10}
, {-39, 29, -19}
, {10, 0, -65}
, {29, 2, 57}
, {8, 65, -6}
, {-57, -27, -46}
, {94, 72, 50}
, {-110, 54, -79}
, {82, 5, 107}
, {-97, -55, -2}
, {23, 55, -19}
, {97, -17, 136}
, {54, -79, -66}
, {-47, 23, 15}
, {139, 93, 98}
, {-25, -13, -84}
}
, {{64, 10, -38}
, {-38, -5, -74}
, {4, 130, 93}
, {25, 53, 41}
, {-9, -59, 5}
, {-50, 1, -2}
, {112, 61, 49}
, {28, -69, -5}
, {-175, -119, -73}
, {-4, 0, -40}
, {64, 57, 96}
, {13, -3, 64}
, {-11, 73, -2}
, {-149, -88, -123}
, {-86, -40, 0}
, {-37, -52, 56}
, {6, -48, 6}
, {-75, -141, -178}
, {-156, -87, -191}
, {15, -67, 71}
, {-103, -91, -39}
, {50, 24, 4}
, {36, 40, 101}
, {-83, 96, -42}
, {55, -81, 5}
, {8, -63, 91}
, {70, 93, 82}
, {-125, -93, -152}
, {34, 40, 10}
, {-89, -75, 50}
, {-8, 25, 54}
, {-93, 55, -19}
}
, {{87, 155, 19}
, {-179, -71, -131}
, {-23, 118, 41}
, {-50, -1, -28}
, {73, 18, -78}
, {-108, 0, -55}
, {-27, -1, 50}
, {-20, 20, 40}
, {77, -25, 103}
, {49, 96, 68}
, {32, 100, 24}
, {-67, -41, -82}
, {60, 18, -11}
, {81, 9, 98}
, {40, -36, 65}
, {77, -81, -63}
, {-26, -103, -94}
, {162, 151, 145}
, {-70, -33, 117}
, {49, 56, -52}
, {-61, -46, -40}
, {-16, 74, 30}
, {-82, -112, -124}
, {223, 1, 124}
, {93, -42, 1}
, {112, -89, 54}
, {-38, -64, -115}
, {-180, -60, -96}
, {103, -43, -36}
, {-62, -42, -173}
, {-3, 144, 69}
, {84, -17, -34}
}
, {{-26, -59, -51}
, {-9, -102, -48}
, {-1, -102, -31}
, {-99, -13, -50}
, {13, 88, -20}
, {-72, -70, -40}
, {-72, -53, -27}
, {37, 72, -40}
, {38, 54, -58}
, {45, -57, 57}
, {81, -55, -86}
, {-3, 0, -33}
, {-37, -70, -62}
, {80, -105, -23}
, {43, -55, 58}
, {-69, -26, 14}
, {54, -34, 64}
, {14, 21, -28}
, {-12, -73, -44}
, {-4, 7, -53}
, {-42, -67, 70}
, {-21, -61, 51}
, {-79, -16, 40}
, {-108, -141, 2}
, {17, 24, -45}
, {-39, 6, 116}
, {-13, -26, -108}
, {-78, -87, -62}
, {5, 43, 10}
, {37, -45, 0}
, {21, 95, -61}
, {46, -65, -91}
}
, {{20, 5, 7}
, {-12, -48, -14}
, {-42, -56, -30}
, {-7, 55, -15}
, {-77, 23, -48}
, {-8, -49, 1}
, {107, -43, -14}
, {-71, -76, -81}
, {13, 126, 63}
, {-111, 51, -49}
, {-148, -144, 52}
, {-6, 5, 97}
, {49, -4, -43}
, {-108, 46, 17}
, {-91, -79, 33}
, {7, -18, 5}
, {19, 23, 31}
, {-18, 15, 130}
, {-61, -81, -12}
, {8, -36, 77}
, {38, 26, 139}
, {-148, -113, -47}
, {-110, 59, 84}
, {-32, -59, 95}
, {72, -64, -69}
, {34, -27, -107}
, {-37, 75, 14}
, {45, 73, 193}
, {-94, 4, -87}
, {-79, 46, 89}
, {-89, 41, -29}
, {-66, 70, 146}
}
, {{133, 162, 150}
, {-88, -92, -32}
, {134, 140, 13}
, {165, -3, 60}
, {-19, -21, 48}
, {55, 54, -74}
, {-9, -98, 19}
, {106, 107, 76}
, {18, 10, 56}
, {138, 11, 103}
, {-3, -26, 16}
, {-68, 66, -35}
, {101, -74, -53}
, {-36, -117, -22}
, {10, 21, -123}
, {-43, 21, 40}
, {83, 12, -69}
, {0, -65, -95}
, {-12, -40, -50}
, {22, -16, -49}
, {28, 21, 0}
, {-8, 46, 116}
, {-53, -97, 45}
, {-105, -31, -6}
, {14, -60, 90}
, {-55, -87, -126}
, {117, 26, 103}
, {-145, -58, -100}
, {17, 35, -55}
, {15, 0, 132}
, {-58, -42, -123}
, {-149, -20, -151}
}
, {{52, 62, 33}
, {-119, 27, -16}
, {-84, 11, 6}
, {17, 19, 91}
, {91, 97, -12}
, {28, 36, -30}
, {71, 54, 64}
, {52, -35, -32}
, {-35, -8, 45}
, {-20, -41, 50}
, {-55, 55, 28}
, {-145, -182, -203}
, {37, 6, 112}
, {95, -2, 79}
, {64, -6, -26}
, {-19, -22, 39}
, {-82, 16, -102}
, {17, -17, 178}
, {71, 52, 84}
, {33, -17, 29}
, {-120, -174, -185}
, {-122, -63, -31}
, {-40, -56, -37}
, {-25, -89, 24}
, {34, -21, -62}
, {14, 1, 125}
, {-125, -183, -170}
, {48, 20, -37}
, {-45, 6, -19}
, {-16, -61, 33}
, {117, 170, 96}
, {-18, -37, 30}
}
, {{-41, 9, -74}
, {-80, -97, -167}
, {29, 73, 85}
, {-37, -42, -87}
, {-60, 35, -30}
, {124, 112, 89}
, {119, 95, 92}
, {-9, 65, 6}
, {-54, -92, -64}
, {100, -26, 9}
, {70, 80, 98}
, {-79, -53, 22}
, {63, -8, 45}
, {23, 24, 59}
, {-139, -79, -142}
, {-19, 67, -21}
, {-108, -85, -141}
, {27, -92, -79}
, {-20, -134, -144}
, {38, -69, 34}
, {38, -45, -99}
, {-3, -32, 29}
, {-3, 56, -40}
, {59, 45, -35}
, {-29, 48, 24}
, {-20, 4, -81}
, {-20, 3, 79}
, {-79, -27, -134}
, {8, -5, -71}
, {-130, -161, -203}
, {-128, 20, -53}
, {-47, -67, -15}
}
, {{16, 137, 106}
, {-120, -99, -116}
, {-45, 65, 62}
, {-1, 64, -65}
, {72, -75, -47}
, {-55, -88, -13}
, {-145, -28, -47}
, {-144, -175, -223}
, {23, 71, -31}
, {20, -30, 135}
, {14, 38, 23}
, {104, 57, 47}
, {-126, -38, 10}
, {-112, 15, 61}
, {87, 101, 82}
, {12, -73, -43}
, {-57, 23, -8}
, {69, 64, 34}
, {44, -117, -19}
, {-2, 6, 4}
, {43, -59, 103}
, {105, 27, 109}
, {-24, -60, 9}
, {124, 104, -12}
, {11, 32, 81}
, {99, -91, 4}
, {42, -69, -14}
, {-10, -8, 10}
, {-46, -68, -20}
, {92, 68, -2}
, {26, -55, -22}
, {-9, -114, 0}
}
, {{-19, -108, 108}
, {-115, -81, 11}
, {-80, -32, 59}
, {-92, -65, -26}
, {-5, 22, 52}
, {-65, -33, 53}
, {18, 79, 4}
, {62, 40, 39}
, {-267, -180, -114}
, {19, 78, 104}
, {-80, 29, -13}
, {20, -7, 159}
, {51, 100, 18}
, {-73, 42, 101}
, {-33, 21, 48}
, {-84, 36, 71}
, {-75, 16, 93}
, {-58, 31, 31}
, {-36, 14, 92}
, {69, -48, -69}
, {-59, -63, -79}
, {41, -109, 63}
, {-92, 17, -32}
, {-63, -50, 27}
, {-27, -24, 67}
, {64, 50, 40}
, {-46, 6, -87}
, {-137, 11, 51}
, {70, -49, -74}
, {-132, -66, -16}
, {-95, 37, -17}
, {18, -14, 27}
}
, {{23, 0, 12}
, {106, -10, -5}
, {100, 28, 150}
, {1, 30, -22}
, {-8, -34, -3}
, {44, 14, 96}
, {-41, 110, -67}
, {-146, -123, -199}
, {-58, -146, -77}
, {116, 93, 18}
, {-51, 42, -32}
, {125, 100, 45}
, {33, -45, 116}
, {-16, -16, -89}
, {39, -1, -18}
, {37, 16, 52}
, {82, -30, 39}
, {33, 96, 53}
, {44, -7, -46}
, {68, -15, 53}
, {-37, -24, -5}
, {83, 75, 16}
, {34, -37, 35}
, {-92, -41, 79}
, {7, -89, -68}
, {-47, -112, -135}
, {18, -33, 43}
, {-77, -58, -11}
, {-66, -20, -92}
, {4, -11, -88}
, {-10, 33, -59}
, {7, 94, -24}
}
, {{-37, -1, 129}
, {191, 33, 82}
, {37, -77, -35}
, {-72, -33, 41}
, {-116, -87, -61}
, {-4, 65, 41}
, {13, 107, 109}
, {-151, -27, -143}
, {115, 113, 72}
, {-133, 11, -89}
, {8, -6, 89}
, {18, 26, -11}
, {-42, -136, -69}
, {78, 44, 6}
, {76, 67, 91}
, {81, -69, 84}
, {9, -41, -26}
, {66, 112, 99}
, {25, -32, -17}
, {87, -76, -5}
, {76, 29, -53}
, {20, 58, 87}
, {-89, 17, -85}
, {77, 58, -7}
, {68, 29, -47}
, {-227, -296, -198}
, {-88, -21, 36}
, {-44, -28, 56}
, {-216, -183, -74}
, {87, -104, -50}
, {276, 208, 241}
, {-234, -14, -180}
}
, {{-63, 16, 3}
, {69, 14, 85}
, {-149, -110, -161}
, {85, -11, 45}
, {-50, -52, -82}
, {-21, -12, -5}
, {7, 31, -10}
, {0, -43, -76}
, {174, 31, 12}
, {-25, -12, -85}
, {63, -30, -49}
, {-29, 92, 51}
, {44, -8, 40}
, {29, -35, 35}
, {65, 0, -32}
, {87, 46, 61}
, {-107, -64, -20}
, {-42, 101, 90}
, {135, 60, 127}
, {-38, 0, -35}
, {-58, 68, -8}
, {-24, 103, 28}
, {-67, -41, 31}
, {129, 80, 59}
, {-63, -13, 100}
, {25, 62, 67}
, {-19, 24, 31}
, {75, 35, 34}
, {39, -76, 39}
, {-28, -49, -42}
, {-48, -80, -48}
, {109, 71, 133}
}
, {{67, 8, 149}
, {-45, -7, 19}
, {28, 58, 38}
, {68, 67, 56}
, {-55, -115, 55}
, {82, 79, 16}
, {-78, -9, 27}
, {126, 37, 28}
, {-83, -122, -99}
, {-57, -63, -64}
, {-69, -44, -38}
, {-8, 10, 32}
, {-8, -98, 28}
, {-68, 1, 26}
, {73, 77, 140}
, {-64, -27, -64}
, {10, -2, -8}
, {1, -57, -86}
, {-85, -22, -39}
, {32, 33, -36}
, {-25, 3, 47}
, {-15, 14, 14}
, {-12, 1, -5}
, {-87, -14, -48}
, {64, -26, -66}
, {-22, -15, -94}
, {-66, 73, 31}
, {-139, -6, 12}
, {-95, -20, -86}
, {94, 96, 13}
, {-3, 92, 67}
, {-174, -50, -168}
}
, {{38, 38, -40}
, {-18, -85, -117}
, {-23, 27, 33}
, {-45, 80, 147}
, {-55, -17, 7}
, {-15, 74, -66}
, {-225, -137, -184}
, {-39, 154, 78}
, {-148, -147, -173}
, {1, 56, -48}
, {-32, 70, 97}
, {129, 29, -29}
, {-3, -66, 90}
, {34, 17, -13}
, {3, 27, -144}
, {-59, -4, 47}
, {-47, -79, -60}
, {156, 226, 181}
, {204, 5, -70}
, {-24, -64, -78}
, {-8, -38, 27}
, {109, 70, -49}
, {-48, -88, 13}
, {28, -14, 105}
, {-24, -9, -10}
, {-10, 49, 66}
, {36, -59, 30}
, {-35, -64, -5}
, {10, 64, 29}
, {108, 36, 7}
, {64, -48, -258}
, {-113, 0, 24}
}
, {{-141, -15, -118}
, {116, 87, 58}
, {58, -28, -13}
, {-23, -21, -5}
, {69, 70, 80}
, {47, 111, 107}
, {92, -17, 90}
, {-64, 0, 47}
, {-117, 7, 32}
, {-70, -80, 28}
, {-25, 15, 81}
, {-4, -77, -22}
, {14, 46, -11}
, {96, 18, -29}
, {6, 39, 1}
, {-35, -58, 14}
, {-39, -126, -51}
, {37, -31, -97}
, {25, -25, -26}
, {34, 20, 77}
, {-168, -114, -104}
, {-105, -125, -137}
, {-6, 29, 29}
, {61, 20, 61}
, {87, -9, 95}
, {58, 28, -8}
, {11, -8, -111}
, {19, -5, 44}
, {-71, -39, -62}
, {-52, -14, -50}
, {75, 54, 48}
, {-46, -16, -24}
}
, {{127, 103, 82}
, {48, 70, 107}
, {-7, 105, 96}
, {-84, 53, -31}
, {-49, -45, -45}
, {-27, -4, -14}
, {22, -29, -22}
, {46, 4, 26}
, {65, 20, -17}
, {-34, 47, 23}
, {35, -7, 30}
, {-6, 105, 42}
, {82, 31, -41}
, {66, 37, 111}
, {0, -19, 42}
, {41, 77, 48}
, {-101, -112, 47}
, {55, 46, 70}
, {11, 96, 102}
, {-25, 47, -58}
, {68, -101, 85}
, {110, 49, 155}
, {-22, -39, -82}
, {-5, 58, 99}
, {-57, -44, -71}
, {96, 29, 29}
, {44, 35, 28}
, {132, 0, 101}
, {-124, -6, -14}
, {25, 35, -79}
, {-141, -155, -155}
, {31, 37, 88}
}
, {{73, 9, 137}
, {19, 39, 13}
, {95, 70, 18}
, {-117, 43, -71}
, {-34, -108, -81}
, {-79, -55, -91}
, {155, 124, 54}
, {-22, -70, -40}
, {-19, -114, -108}
, {58, 89, 73}
, {69, -80, 86}
, {98, 49, 51}
, {0, -39, 9}
, {60, 39, -102}
, {20, -27, -76}
, {35, 84, 73}
, {60, -11, -55}
, {91, 26, -70}
, {-53, -27, -56}
, {41, 54, 48}
, {18, 88, -6}
, {110, 53, 51}
, {-34, -16, -63}
, {74, -48, -39}
, {29, 8, -36}
, {37, 31, 105}
, {112, -2, 71}
, {126, -10, 0}
, {-80, 2, -5}
, {-48, -50, -68}
, {8, -104, -113}
, {81, 31, 62}
}
, {{65, 50, 43}
, {-68, -45, -111}
, {-79, -29, 69}
, {6, 29, 42}
, {128, 101, 15}
, {24, -40, -92}
, {-36, -31, -13}
, {70, 60, 125}
, {11, -84, -152}
, {64, 77, -65}
, {-14, 50, -29}
, {-27, -72, -1}
, {-13, 7, 20}
, {-3, 73, 126}
, {18, -93, -20}
, {-66, 0, 69}
, {87, -61, -54}
, {140, 158, 87}
, {-47, -49, -18}
, {54, -39, -33}
, {26, -41, -42}
, {-155, -90, -45}
, {10, -85, 45}
, {-23, -28, -49}
, {7, 24, 61}
, {141, 51, 102}
, {40, 60, -87}
, {78, -11, 87}
, {72, 3, -22}
, {-24, -54, -18}
, {58, 34, 105}
, {43, -58, 7}
}
, {{117, 15, 145}
, {134, 118, -15}
, {-35, -1, -20}
, {-15, 65, 119}
, {43, -51, 80}
, {35, -7, 65}
, {-15, 30, -81}
, {33, -36, 66}
, {64, 78, 37}
, {-26, 36, 31}
, {68, -27, -33}
, {-56, -13, -23}
, {-37, -9, 24}
, {-149, -58, -108}
, {-1, 2, -11}
, {34, -79, -53}
, {-77, -16, -71}
, {-60, -8, -73}
, {81, 62, 77}
, {-14, 0, 53}
, {133, 34, 53}
, {-13, 9, 48}
, {25, 58, -18}
, {-106, -55, -86}
, {-6, 5, -14}
, {-41, -88, -116}
, {75, 41, 102}
, {100, -11, 93}
, {41, 2, -4}
, {33, 84, -11}
, {-125, -5, -31}
, {-42, -74, -100}
}
, {{-7, -49, -8}
, {-41, -70, -15}
, {-25, -84, -56}
, {-83, -85, -12}
, {-68, -16, -61}
, {-65, 55, 18}
, {50, -48, -57}
, {47, -58, 0}
, {-13, 62, 51}
, {-56, -77, 11}
, {14, -99, 31}
, {38, -85, 11}
, {-8, -92, -23}
, {-71, -42, 58}
, {-15, -36, -74}
, {-42, -21, 47}
, {-76, 47, 46}
, {-12, 49, 57}
, {-40, 43, -20}
, {68, -8, -57}
, {33, -80, 60}
, {-39, -26, -87}
, {-27, 6, -21}
, {-62, 67, 52}
, {27, 65, 35}
, {26, -3, -33}
, {-45, -57, 63}
, {-38, -15, -81}
, {-51, 66, -2}
, {-64, -40, -17}
, {52, -33, -27}
, {-58, -60, -11}
}
, {{99, -19, 4}
, {-20, 29, 156}
, {-30, 30, -13}
, {0, -66, 28}
, {98, 29, 23}
, {-20, -59, 4}
, {-59, -16, -14}
, {134, 8, 74}
, {-33, -13, 3}
, {77, 17, -48}
, {-25, 125, 30}
, {-78, 26, -131}
, {-66, -46, -72}
, {1, 99, 110}
, {25, -57, -37}
, {34, 69, -26}
, {-114, -53, 35}
, {69, 54, 107}
, {-77, 10, -24}
, {15, -65, -77}
, {-4, -66, 8}
, {-48, 26, 53}
, {-33, 22, -35}
, {109, 113, 128}
, {46, 71, -42}
, {69, -26, -15}
, {-47, 65, 37}
, {-33, 82, 102}
, {66, 6, -92}
, {39, -51, 68}
, {102, 149, 77}
, {-58, -138, -64}
}
, {{57, -76, 77}
, {0, 29, -83}
, {-43, -16, 51}
, {-26, -52, -69}
, {-1, -26, -38}
, {-46, -88, -9}
, {-9, -71, -46}
, {73, -10, 29}
, {65, -49, 75}
, {-90, -80, 79}
, {-108, 24, 25}
, {12, -42, 57}
, {-31, 26, -78}
, {-94, 30, 39}
, {-64, -62, -9}
, {60, -90, -36}
, {-62, 69, -99}
, {-65, -9, -85}
, {48, 60, -66}
, {-66, -14, 75}
, {-6, -10, 34}
, {-25, -81, -67}
, {11, 31, 72}
, {55, -18, 24}
, {83, -44, 39}
, {66, 12, -86}
, {-60, -2, 10}
, {38, -21, -97}
, {-34, -74, -85}
, {48, 31, -105}
, {-3, 1, 61}
, {2, -15, -44}
}
, {{174, 26, 32}
, {-213, -115, -119}
, {-125, -79, -32}
, {-9, 68, -74}
, {69, 79, -101}
, {-19, -57, -30}
, {-19, -75, -73}
, {-90, 67, -49}
, {23, 108, 20}
, {143, 28, 56}
, {-63, 37, -59}
, {-137, -13, -245}
, {-162, 35, -21}
, {-21, 37, 73}
, {1, 142, 81}
, {-19, -66, -2}
, {-38, -55, -133}
, {154, 279, 100}
, {65, 26, 86}
, {-32, 19, 1}
, {35, 33, -103}
, {83, 19, 12}
, {51, -82, -93}
, {-76, 42, 31}
, {4, 1, -23}
, {-60, 47, -46}
, {-22, -155, -46}
, {5, -54, 25}
, {-83, 67, 18}
, {12, 57, -58}
, {167, 48, 83}
, {-191, 64, 79}
}
}
;

#undef INPUT_CHANNELS
#undef CONV_FILTERS
#undef CONV_KERNEL_SIZE
/**
  ******************************************************************************
  * @file    maxpool.cc
  * @author  Pierre-Emmanuel Novac <penovac@unice.fr>, LEAT, CNRS, Université Côte d'Azur, France
  * @version 1.0.0
  * @date    24 march 2020
  * @brief   Template generating plain C code for the implementation of Convolutional Neural Networks on MCU
  */

#ifndef SINGLE_FILE
#include "number.h"
#endif

#define INPUT_CHANNELS  32
#define INPUT_SAMPLES   3
#define POOL_SIZE       1
#define POOL_STRIDE     1
#define POOL_PAD        0 // Unsupported
#define POOL_LENGTH	    ( ( (INPUT_SAMPLES - POOL_SIZE + (2*POOL_PAD) ) / POOL_STRIDE ) + 1 )

#define ACTIVATION_LINEAR

typedef number_t max_pooling1d_4_output_type[INPUT_CHANNELS][POOL_LENGTH];

static inline void max_pooling1d_4(
  const number_t input[INPUT_CHANNELS][INPUT_SAMPLES], 	    // IN
  number_t output[INPUT_CHANNELS][POOL_LENGTH]) {	// OUT

  unsigned short pos_x, k; 	// loop indexes for output volume
  unsigned int x;
  number_t max, tmp; 

  for (k = 0; k < INPUT_CHANNELS; k++) 
    for (pos_x = 0; pos_x < POOL_LENGTH; pos_x++) {
#ifdef ACTIVATION_LINEAR
      max = input[k][pos_x*POOL_STRIDE];
      x = 1;
#elif defined(ACTIVATION_RELU)
      max = 0;
      x = 0;
#endif
      for (; x < POOL_SIZE; x++) {
        tmp = input[k][(pos_x*POOL_STRIDE)+x]; 
        if (max < tmp)
          max = tmp;
      }
      output[k][pos_x] = max; 
    }
}

#undef INPUT_CHANNELS  
#undef INPUT_SAMPLES
#undef POOL_SIZE
#undef POOL_STRIDE
#undef POOL_PAD
#undef POOL_LENGTH
#undef ACTIVATION_LINEAR
/**
  ******************************************************************************
  * @file    flatten.cc
  * @author  Pierre-Emmanuel Novac <penovac@unice.fr>, LEAT, CNRS, Université Côte d'Azur, France
  * @version 1.0.0
  * @date    24 march 2020
  * @brief   Template generating plain C code for the implementation of Convolutional Neural Networks on MCU
  */

#ifndef SINGLE_FILE
#include "number.h"
#endif

#define INPUT_DIM [3][32]
#define OUTPUT_DIM 96

//typedef number_t *flatten_output_type;
typedef number_t flatten_output_type[OUTPUT_DIM];

#define flatten //noop (IN, OUT)  OUT = (number_t*)IN

#undef INPUT_DIM
#undef OUTPUT_DIM

/**
  ******************************************************************************
  * @file    fc.cc
  * @author  Pierre-Emmanuel Novac <penovac@unice.fr>, LEAT, CNRS, Université Côte d'Azur, France
  * @version 1.0.0
  * @date    24 march 2020
  * @brief   Template generating plain C code for the implementation of Convolutional Neural Networks on MCU
  */

#ifndef SINGLE_FILE
#include "number.h"
#endif

#define INPUT_SAMPLES 96
#define FC_UNITS 10
#define ACTIVATION_LINEAR

typedef number_t dense_output_type[FC_UNITS];

static inline void dense(
  const number_t input[INPUT_SAMPLES], 			      // IN
	const number_t kernel[FC_UNITS][INPUT_SAMPLES],  // IN

	const number_t bias[FC_UNITS],			              // IN

	number_t output[FC_UNITS]) {			                // OUT

  unsigned short k, z; 
  long_number_t output_acc; 

  for (k = 0; k < FC_UNITS; k++) { 
    output_acc = 0; 
    for (z = 0; z < INPUT_SAMPLES; z++) 
      output_acc = output_acc + ( kernel[k][z] * input[z] ); 

    output_acc = scale_number_t(output_acc);

    output_acc = output_acc + bias[k]; 


    // Activation function
#ifdef ACTIVATION_LINEAR
    // Linear (MEANS NONE)
    output[k] = clamp_to_number_t(output_acc);
#elif defined(ACTIVATION_RELU)
    // ReLU
    if (output_acc < 0)
      output[k] = 0;
    else
      output[k] = clamp_to_number_t(output_acc);
#endif
  }
}

#undef INPUT_SAMPLES
#undef FC_UNITS
#undef ACTIVATION_LINEAR
/**
  ******************************************************************************
  * @file    weights/fc.cc
  * @author  Pierre-Emmanuel Novac <penovac@unice.fr>, LEAT, CNRS, Université Côte d'Azur, France
  * @version 1.0.0
  * @date    24 march 2020
  * @brief   Template generating plain C code for the implementation of Convolutional Neural Networks on MCU
  */

#define INPUT_SAMPLES 96
#define FC_UNITS 10


const int16_t dense_bias[FC_UNITS] = {31, -64, -15, -8, -66, 7, 18, 36, 5, 44}
;

const int16_t dense_kernel[FC_UNITS][INPUT_SAMPLES] = {{-71, -150, -124, 20, -5, -65, 11, 0, 96, -44, -104, -109, -69, -121, -151, 139, 47, -112, 156, 32, 109, -36, 103, 100, -11, -129, -23, -64, 71, -13, 60, 105, -61, 77, -16, -14, -61, -144, -134, 124, 113, 81, -118, -198, -112, 65, -42, -54, -178, -98, -132, -99, -109, -71, -123, -67, -135, -10, -100, -33, 119, 76, 122, 183, 115, 137, 60, 116, 206, -135, 28, -27, -20, 54, 71, -166, -156, -54, -11, -17, 2, 125, 123, 136, 95, -15, 109, 98, 6, 105, -84, 38, -40, -157, -103, 1}
, {-325, -210, -139, 148, 120, 214, 25, -28, -37, 15, 95, -15, 7, 62, 84, 41, -10, 117, -31, -114, 34, -90, 36, -76, -144, -86, -150, -39, -22, -121, 293, 147, 89, -144, 4, -163, -5, -136, -118, 32, 23, -77, -135, -5, 85, -4, -14, -158, 201, 111, 127, -40, -46, -56, -73, -117, -55, -251, -218, -138, 43, 20, -31, -105, -125, -83, 106, 92, 149, -154, -110, -218, 35, -24, 6, 88, -47, 23, 136, 103, 144, -67, -29, -25, -34, -75, -79, 60, 84, 4, -54, -8, 110, 299, 120, 207}
, {60, -31, 118, -210, -39, -60, 34, -53, 112, 83, 64, 84, -35, -55, -131, 163, 29, -33, 111, 109, 212, 54, 88, 120, 0, 100, 85, -25, -6, 59, -76, 53, 10, -79, 6, 24, -153, -124, -41, -99, -113, -137, 13, -140, -121, -23, 28, -74, 8, 6, -96, 73, -67, -59, 28, -63, -128, -285, -221, -223, -163, 37, 27, -71, 98, -143, -153, -134, -37, -80, -118, 68, 68, 20, -3, -43, 73, 37, 117, 4, 113, -116, -140, 64, -14, -117, -107, -3, 58, -15, 13, -49, -70, -104, -148, -166}
, {57, 50, 4, 53, 53, 62, -41, 44, -6, 134, 140, 118, -68, 122, 65, -133, -166, -227, 74, -5, 68, -97, -142, -110, -53, 13, -5, 60, 45, 54, 35, -17, -6, -99, -35, 47, 26, -16, 0, 140, 23, -23, -51, -72, -114, -62, 63, 43, -108, 20, -99, 110, 74, 86, 69, 154, 147, -50, -111, -25, -93, 50, 47, 89, 9, -25, -288, 30, 46, 74, 133, 78, -98, -104, -152, 101, 7, 25, 0, 66, -3, 140, -35, 205, 18, 24, 38, -66, -120, -129, -4, -88, -46, 27, -39, -160}
, {35, -116, -80, 93, -49, 19, 109, 107, -3, 2, 119, 38, -37, -47, 62, 20, -33, -27, -24, -54, 37, 60, 25, -41, 63, 30, -123, 68, 75, 40, -134, -5, -81, -14, 26, -62, 190, 52, 121, 24, 70, -55, 69, 124, 50, -161, -126, -154, 146, 59, 120, 49, 93, 43, 85, -5, -34, 83, 99, 45, 56, -2, -67, 108, 87, 174, -71, -53, -173, -15, -29, -51, -8, 63, -90, -16, -28, -13, 76, -79, -99, 4, 30, 8, 43, 71, 108, -6, -142, -5, -38, 46, -99, 68, 30, 77}
, {-16, -68, -22, 36, -52, -123, 95, -46, 106, -27, 14, -47, 129, 85, 160, 96, -99, -15, -155, -97, -168, -126, -109, 16, -11, 100, 23, -97, -11, -63, -101, -55, -106, 62, -61, 7, 0, 46, 75, -147, -135, -144, -86, -83, -98, -92, 131, -11, 99, 22, -19, -42, -168, -114, -11, -105, -95, 158, -72, 124, 52, 56, 143, -75, -106, -58, -201, -167, -285, 166, 40, 153, 39, 45, 145, 35, 107, 8, 69, -75, 56, 73, 4, -43, -71, -19, 58, -67, 95, 132, -64, 7, 110, -139, -258, -117}
, {244, 72, 204, -143, -116, -12, 2, 105, 33, -87, 21, -19, 159, 93, 70, 165, -58, 76, -5, -132, -101, -73, -73, 39, 51, -79, 74, 124, -76, 117, -88, -64, -204, -143, -68, -188, 14, -7, 81, -162, -158, -245, -41, 19, 40, 142, 86, 31, 18, 50, -16, 167, 112, 59, -8, -23, -68, 21, -50, 63, 27, 11, 26, 16, -16, -23, 9, -59, -136, 90, 73, -23, -62, -133, -47, 59, 79, 92, 67, 108, 70, -75, -147, -57, 6, -65, 105, -113, -136, -45, 67, -113, 56, -36, 83, 60}
, {14, 86, -7, -115, -29, -218, 96, 121, -80, -43, 99, -29, -18, -24, -48, 84, -3, 85, 140, 16, 119, -66, -69, 22, -36, 9, 9, -64, -198, -224, -201, -53, -284, -103, 94, -136, -241, -190, -101, 73, -32, 27, -198, 6, -9, -217, -138, -82, -83, -66, -108, -62, 1, 32, 56, 88, 97, -107, 11, -30, -179, -138, -86, -119, -33, -58, 100, 66, 41, -225, -171, -277, 60, 25, 95, 62, 33, 11, -107, -46, -156, -5, 18, 80, -39, 18, -12, 66, 103, 93, -61, -124, -104, -99, -265, -242}
, {-99, -115, -85, -176, -103, -62, -10, -104, 4, 49, 108, -59, -25, -13, -58, 10, -11, -64, -122, -111, -14, 82, 96, 127, -80, -132, -106, 67, -42, 161, 11, 75, 50, -27, -46, 63, 72, -72, -28, -52, 77, -2, -128, -25, -92, 178, 192, 225, 1, 7, -87, 101, 36, -16, 143, 71, 161, -56, -60, 17, 81, 130, 45, -105, 15, -154, -48, -112, -156, -26, -62, 64, -45, 38, 164, 101, 27, 154, -142, -158, -2, 5, -106, -45, 47, -13, 91, 4, -109, 20, -87, 94, -28, -120, -79, -61}
, {161, 231, 202, 199, 73, 101, -52, 89, 20, 32, -130, 75, -245, -316, -340, -69, -236, -226, 29, -38, -16, 101, -30, 57, -25, -112, 47, 12, -13, -134, 45, 125, 235, -174, -23, 5, 9, 50, -8, -199, -228, -99, 152, 67, 209, 47, 10, 67, -259, -119, -166, -115, -177, -198, -299, -155, -40, 253, 208, 72, -114, 7, -42, 59, -77, -53, -112, -70, -83, 200, 0, 177, -129, -123, -314, -230, -269, -335, 64, 16, 34, -99, -88, -63, 2, -23, -92, 226, 182, 158, 97, -113, 114, 162, 153, 229}
}
;

#undef INPUT_SAMPLES
#undef FC_UNITS
/**
  ******************************************************************************
  * @file    model.hh
  * @author  Pierre-Emmanuel Novac <penovac@unice.fr>, LEAT, CNRS, Université Côte d'Azur, France
  * @version 1.0.0
  * @date    08 july 2020
  * @brief   Template generating plain C code for the implementation of Convolutional Neural Networks on MCU
  */

#ifndef __MODEL_H__
#define __MODEL_H__

#ifndef SINGLE_FILE
#include "number.h"
#endif

#define MODEL_OUTPUT_SAMPLES 10
#define MODEL_INPUT_SAMPLES 16000 // node 0 is InputLayer so use its output shape as input shape of the model
#define MODEL_INPUT_CHANNELS 1

void cnn(
  const number_t input[MODEL_INPUT_CHANNELS][MODEL_INPUT_SAMPLES],
  //dense_output_type dense_output);
  number_t output[MODEL_OUTPUT_SAMPLES]);

#endif//__MODEL_H__
/**
  ******************************************************************************
  * @file    model.cc
  * @author  Pierre-Emmanuel Novac <penovac@unice.fr>, LEAT, CNRS, Université Côte d'Azur, France
  * @version 1.0.0
  * @date    24 march 2020
  * @brief   Template generating plain C code for the implementation of Convolutional Neural Networks on MCU
  */

#ifndef SINGLE_FILE
#include "number.h"
#include "model.h"

 // InputLayer is excluded
#include "max_pooling1d.c" // InputLayer is excluded
#include "conv1d.c"
#include "weights/conv1d.c" // InputLayer is excluded
#include "max_pooling1d_1.c" // InputLayer is excluded
#include "conv1d_1.c"
#include "weights/conv1d_1.c" // InputLayer is excluded
#include "max_pooling1d_2.c" // InputLayer is excluded
#include "conv1d_2.c"
#include "weights/conv1d_2.c" // InputLayer is excluded
#include "max_pooling1d_3.c" // InputLayer is excluded
#include "conv1d_3.c"
#include "weights/conv1d_3.c" // InputLayer is excluded
#include "max_pooling1d_4.c" // InputLayer is excluded
#include "flatten.c" // InputLayer is excluded
#include "dense.c"
#include "weights/dense.c"
#endif

void cnn(
  const number_t input[MODEL_INPUT_CHANNELS][MODEL_INPUT_SAMPLES],
  dense_output_type dense_output) {

  // Output array allocation
  static union {
    max_pooling1d_output_type max_pooling1d_output;
    max_pooling1d_1_output_type max_pooling1d_1_output;
    max_pooling1d_2_output_type max_pooling1d_2_output;
    max_pooling1d_3_output_type max_pooling1d_3_output;
    max_pooling1d_4_output_type max_pooling1d_4_output;
    flatten_output_type flatten_output;
  } activations1;

  static union {
    conv1d_output_type conv1d_output;
    conv1d_1_output_type conv1d_1_output;
    conv1d_2_output_type conv1d_2_output;
    conv1d_3_output_type conv1d_3_output;
  } activations2;


  //static union {
//
//    static input_1_output_type input_1_output;
//
//    static max_pooling1d_output_type max_pooling1d_output;
//
//    static conv1d_output_type conv1d_output;
//
//    static max_pooling1d_1_output_type max_pooling1d_1_output;
//
//    static conv1d_1_output_type conv1d_1_output;
//
//    static max_pooling1d_2_output_type max_pooling1d_2_output;
//
//    static conv1d_2_output_type conv1d_2_output;
//
//    static max_pooling1d_3_output_type max_pooling1d_3_output;
//
//    static conv1d_3_output_type conv1d_3_output;
//
//    static max_pooling1d_4_output_type max_pooling1d_4_output;
//
//    static flatten_output_type flatten_output;
//
  //} activations;

  // Model layers call chain
 // InputLayer is excluded 
  max_pooling1d(
     // First layer uses input passed as model parameter
    input,
    activations1.max_pooling1d_output
  );
 // InputLayer is excluded 
  conv1d(
    
    activations1.max_pooling1d_output,
    conv1d_kernel,
    conv1d_bias,
    activations2.conv1d_output
  );
 // InputLayer is excluded 
  max_pooling1d_1(
    
    activations2.conv1d_output,
    activations1.max_pooling1d_1_output
  );
 // InputLayer is excluded 
  conv1d_1(
    
    activations1.max_pooling1d_1_output,
    conv1d_1_kernel,
    conv1d_1_bias,
    activations2.conv1d_1_output
  );
 // InputLayer is excluded 
  max_pooling1d_2(
    
    activations2.conv1d_1_output,
    activations1.max_pooling1d_2_output
  );
 // InputLayer is excluded 
  conv1d_2(
    
    activations1.max_pooling1d_2_output,
    conv1d_2_kernel,
    conv1d_2_bias,
    activations2.conv1d_2_output
  );
 // InputLayer is excluded 
  max_pooling1d_3(
    
    activations2.conv1d_2_output,
    activations1.max_pooling1d_3_output
  );
 // InputLayer is excluded 
  conv1d_3(
    
    activations1.max_pooling1d_3_output,
    conv1d_3_kernel,
    conv1d_3_bias,
    activations2.conv1d_3_output
  );
 // InputLayer is excluded 
  max_pooling1d_4(
    
    activations2.conv1d_3_output,
    activations1.max_pooling1d_4_output
  );
 // InputLayer is excluded 
  flatten(
    
    activations1.max_pooling1d_4_output,
    activations1.flatten_output
  );
 // InputLayer is excluded 
  dense(
    
    activations1.flatten_output,
    dense_kernel,
    dense_bias, // Last layer uses output passed as model parameter
    dense_output
  );

}
