#define SINGLE_FILE
/**
  ******************************************************************************
  * @file    number.hh
  * @author  Pierre-Emmanuel Novac <penovac@unice.fr>, LEAT, CNRS, Université Côte d'Azur, France
  * @version 1.0.0
  * @date    2 february 2021
  * @brief   Template generating plain C code for the implementation of Convolutional Neural Networks on MCU
  */

#ifndef __NUMBER_H__
#define __NUMBER_H__

#include <stdint.h>

#define FIXED_POINT	9	// Fixed point scaling factor, set to 0 when using floating point
#define NUMBER_MIN	-32768	// Max value for this numeric type
#define NUMBER_MAX	32767	// Min value for this numeric type
typedef int16_t number_t;		// Standard size numeric type used for weights and activations
typedef int32_t long_number_t;	// Long numeric type used for intermediate results

#ifndef min
static inline long_number_t min(long_number_t a, long_number_t b) {
	if (a <= b)
		return a;
	return b;
}
#endif

#ifndef max
static inline long_number_t max(long_number_t a, long_number_t b) {
	if (a >= b)
		return a;
	return b;
}
#endif

#if FIXED_POINT > 0 // Scaling/clamping for fixed-point representation
static inline long_number_t scale_number_t(long_number_t number) {
	return number >> FIXED_POINT;
}
static inline number_t clamp_to_number_t(long_number_t number) {
	return (number_t) max(NUMBER_MIN, min(NUMBER_MAX, number));
}
#else // No scaling/clamping required for floating-point
static inline long_number_t scale_number_t(long_number_t number) {
	return number;
}
static inline number_t clamp_to_number_t(long_number_t number) {
	return (number_t) number;
}
#endif


#endif //__NUMBER_H__
/**
  ******************************************************************************
  * @file    maxpool.cc
  * @author  Pierre-Emmanuel Novac <penovac@unice.fr>, LEAT, CNRS, Université Côte d'Azur, France
  * @version 1.0.0
  * @date    24 march 2020
  * @brief   Template generating plain C code for the implementation of Convolutional Neural Networks on MCU
  */

#ifndef SINGLE_FILE
#include "number.h"
#endif

#define INPUT_CHANNELS  1
#define INPUT_SAMPLES   16000
#define POOL_SIZE       10
#define POOL_STRIDE     10
#define POOL_PAD        0 // Unsupported
#define POOL_LENGTH	    ( ( (INPUT_SAMPLES - POOL_SIZE + (2*POOL_PAD) ) / POOL_STRIDE ) + 1 )

#define ACTIVATION_LINEAR

typedef number_t max_pooling1d_output_type[INPUT_CHANNELS][POOL_LENGTH];

static inline void max_pooling1d(
  const number_t input[INPUT_CHANNELS][INPUT_SAMPLES], 	    // IN
  number_t output[INPUT_CHANNELS][POOL_LENGTH]) {	// OUT

  unsigned short pos_x, k; 	// loop indexes for output volume
  unsigned int x;
  number_t max, tmp; 

  for (k = 0; k < INPUT_CHANNELS; k++) 
    for (pos_x = 0; pos_x < POOL_LENGTH; pos_x++) {
#ifdef ACTIVATION_LINEAR
      max = input[k][pos_x*POOL_STRIDE];
      x = 1;
#elif defined(ACTIVATION_RELU)
      max = 0;
      x = 0;
#endif
      for (; x < POOL_SIZE; x++) {
        tmp = input[k][(pos_x*POOL_STRIDE)+x]; 
        if (max < tmp)
          max = tmp;
      }
      output[k][pos_x] = max; 
    }
}

#undef INPUT_CHANNELS  
#undef INPUT_SAMPLES
#undef POOL_SIZE
#undef POOL_STRIDE
#undef POOL_PAD
#undef POOL_LENGTH
#undef ACTIVATION_LINEAR
/**
  ******************************************************************************
  * @file    conv.cc
  * @author  Pierre-Emmanuel Novac <penovac@unice.fr>, LEAT, CNRS, Université Côte d'Azur, France
  * @version 1.0.0
  * @date    24 march 2020
  * @brief   Template generating plain C code for the implementation of Convolutional Neural Networks on MCU
  */

#ifndef SINGLE_FILE
#include "number.h"
#endif

#define INPUT_CHANNELS      1
#define INPUT_SAMPLES       1600
#define CONV_FILTERS        32
#define CONV_KERNEL_SIZE    80
#define CONV_STRIDE         4

#define ZEROPADDING_LEFT    0
#define ZEROPADDING_RIGHT   0

#define CONV_OUTSAMPLES     ( ( (INPUT_SAMPLES - CONV_KERNEL_SIZE + ZEROPADDING_LEFT + ZEROPADDING_RIGHT) / CONV_STRIDE ) + 1 )

#define ACTIVATION_RELU

typedef number_t conv1d_output_type[CONV_FILTERS][CONV_OUTSAMPLES];

static inline void conv1d(
  const number_t input[INPUT_CHANNELS][INPUT_SAMPLES],               // IN
  const number_t kernel[CONV_FILTERS][INPUT_CHANNELS][CONV_KERNEL_SIZE], // IN

  const number_t bias[CONV_FILTERS],						                // IN

  number_t output[CONV_FILTERS][CONV_OUTSAMPLES]) {               // OUT

  unsigned short pos_x, z, k; 	// loop indexes for output volume
  unsigned short x;
  short input_x;
  long_number_t	kernel_mac;
  static long_number_t	output_acc[CONV_OUTSAMPLES];
  long_number_t tmp;

  for (k = 0; k < CONV_FILTERS; k++) { 
    for (pos_x = 0; pos_x < CONV_OUTSAMPLES; pos_x++) { 
      output_acc[pos_x] = 0;
	    for (z = 0; z < INPUT_CHANNELS; z++) {

        kernel_mac = 0; 
        for (x = 0; x < CONV_KERNEL_SIZE; x++) {
          input_x = pos_x * CONV_STRIDE - ZEROPADDING_LEFT + x;
          if (input_x < 0 || input_x >= INPUT_SAMPLES) // ZeroPadding1D
            tmp = 0;
          else
            tmp = input[z][input_x] * kernel[k][z][x]; 
          kernel_mac = kernel_mac + tmp; 
        }

	      output_acc[pos_x] = output_acc[pos_x] + kernel_mac; 
      }
      output_acc[pos_x] = scale_number_t(output_acc[pos_x]);

      output_acc[pos_x] = output_acc[pos_x] + bias[k]; 

    }

    for (pos_x = 0; pos_x < CONV_OUTSAMPLES; pos_x++) {
#ifdef ACTIVATION_LINEAR
      output[k][pos_x] = clamp_to_number_t(output_acc[pos_x]);
#elif defined(ACTIVATION_RELU)
      // Activation function: ReLU
      if (output_acc[pos_x] < 0)
        output[k][pos_x] = 0;
      else
        output[k][pos_x] = clamp_to_number_t(output_acc[pos_x]);
#endif
    }
  }
}

#undef INPUT_CHANNELS
#undef INPUT_SAMPLES
#undef CONV_FILTERS
#undef CONV_KERNEL_SIZE
#undef CONV_STRIDE
#undef ZEROPADDING_LEFT
#undef ZEROPADDING_RIGHT
#undef CONV_OUTSAMPLES
#undef ACTIVATION_RELU
/**
  ******************************************************************************
  * @file    weights/conv.cc
  * @author  Pierre-Emmanuel Novac <penovac@unice.fr>, LEAT, CNRS, Université Côte d'Azur, France
  * @version 1.0.0
  * @date    24 march 2020
  * @brief   Template generating plain C code for the implementation of Convolutional Neural Networks on MCU
  */

#define INPUT_CHANNELS    1
#define CONV_FILTERS      32
#define CONV_KERNEL_SIZE  80


const int16_t conv1d_bias[CONV_FILTERS] = {-18, 98, 9, 11, 2, -2, 116, 52, -12, 27, 14, -10, 10, 25, 68, -56, -22, 129, 17, 27, 44, -6, 157, -152, 32, 17, 56, 70, 52, 94, -1, 71}
;

const int16_t conv1d_kernel[CONV_FILTERS][INPUT_CHANNELS][CONV_KERNEL_SIZE] = {{{1, 21, 32, 13, -26, -14, -1, -24, -44, -28, -17, -14, 22, 17, 11, -7, 14, 8, -3, 5, 21, 25, -7, -12, 8, 8, 4, -11, 1, -2, 22, 25, 30, 29, 32, 9, -6, 5, 10, 12, 33, 26, -14, -22, 0, 19, 21, 44, 13, -3, 0, 21, 1, -8, 0, -16, -12, 3, 23, 21, 7, 28, 47, 46, 30, 36, 36, -6, -17, -5, 21, 20, 16, 5, -26, 0, 53, 60, 23, 0}
}
, {{17, 1, -38, -52, -33, -35, -23, 15, 53, 50, 43, 15, 14, 36, 15, -25, -29, 2, 15, 10, 17, 0, -1, 55, 83, 13, -41, -34, -30, -29, 38, 64, 52, 15, 0, -25, 18, 58, 46, -6, 10, -17, -9, 8, 57, 38, 14, 1, -35, -59, -38, 21, -4, -63, -50, -11, -44, -47, 10, 22, -28, -31, -27, -18, -33, -9, -65, -75, -56, -25, -16, -14, -55, -72, -81, -28, 21, 5, -58, -86}
}
, {{-32, 52, -33, 7, -5, 15, 3, -39, 41, -45, 14, 47, -71, 51, -18, -28, 42, 3, -17, -24, 48, -81, 48, 27, -57, 41, -10, -15, 46, -36, -10, 27, -14, -13, 14, -11, -8, 20, -24, 39, -21, -7, 1, 0, 4, 3, -19, 35, -33, 4, 14, -47, 23, -19, 24, -7, 0, 25, -26, 17, -17, 20, -32, 11, -20, 23, -4, -36, 43, 2, -22, 20, 9, -28, 12, -26, 31, -13, -20, 21}
}
, {{-3, -1, -7, -9, 0, -4, -14, 22, -27, 18, -2, 28, -1, 13, 11, -21, 19, -67, 37, -35, -40, 41, -58, 30, -33, 14, 18, 20, 44, 26, 17, 20, -26, -5, 5, -58, 7, 1, -79, 1, -16, -85, 38, -8, -14, 49, 2, 9, 51, 33, -13, 70, -10, 12, 5, -21, -10, 6, -50, -5, -16, -34, 9, -4, 20, -8, 17, 10, -7, 16, -17, 10, -26, 8, 9, -2, 20, -21, 26, -23}
}
, {{-23, -22, 0, 11, -17, 0, 21, 29, 8, 0, 43, 31, 44, 5, 49, 35, 32, 44, -14, 23, 26, -42, -7, -5, -24, -30, -47, -28, -30, -32, -78, -38, -56, -65, -35, -34, -1, -30, -2, 19, -13, 2, 27, -5, 32, 12, 50, 19, 47, 44, 17, 37, 29, 27, 29, 20, -21, -29, 1, -78, 14, -9, -62, 17, -8, -34, 18, -12, -18, 5, 0, -26, 25, -17, -8, 0, 19, 14, 22, 19}
}
, {{28, 59, 26, 22, 7, -8, -26, -20, -26, -49, -34, 13, 19, -18, -40, -48, -33, -27, -37, -53, -22, 2, 11, 5, 32, 37, 56, 30, 34, 21, 50, 62, 39, 13, 10, 13, 10, 1, 9, 6, -37, -34, -23, -19, -45, -4, -8, 1, -22, -33, -53, -18, -11, -13, -4, 4, -25, -24, -2, -6, 32, 64, 50, -2, 30, 24, 4, 12, 14, -25, -31, -7, 11, 16, -24, -24, -27, -13, -10, -1}
}
, {{46, 12, 16, 31, 32, 33, 6, 50, 36, 37, 58, 38, -16, -10, -14, -21, -34, 10, -15, -47, -50, 9, 0, 29, 63, 54, 0, 14, 45, -3, -26, -35, -18, -36, 1, 22, 13, 35, 51, 14, 17, 18, 44, 23, 30, 17, 15, 14, 34, 0, 1, -16, 36, 17, -7, -11, -19, -39, -5, -14, 0, 17, 18, 4, 32, 15, -14, 32, -10, -16, -16, -37, -46, -40, -37, -14, -16, 26, 15, -19}
}
, {{-23, -16, -15, 0, -20, 5, -23, 6, 11, -1, 9, 29, -31, 21, -7, 8, 16, 1, -7, 2, -3, -36, 32, -37, -19, 23, -7, 2, -14, -1, 5, -9, -38, -16, -14, -29, -19, 10, -32, -15, 16, 21, -6, 14, 17, 11, -10, 4, 19, -17, -23, -4, -27, -19, 10, -39, -11, -43, -79, -32, -26, -64, 31, 8, 23, 65, 26, 59, 75, 9, 32, 28, -1, 0, 12, -2, -19, -21, -3, -8}
}
, {{8, 10, 4, -14, 27, -9, 12, -11, 12, 3, 4, 1, -9, -2, -21, 18, 8, -19, 18, 7, -33, 43, -2, -3, -27, -12, -57, -33, -125, -113, -157, -172, -153, -154, -154, -83, -80, -47, -6, 22, -4, 5, 10, 7, -3, 9, -9, -16, 28, -4, 3, 29, -26, 4, -3, 3, 26, -1, -18, 30, 8, 20, -6, 10, 17, 5, 13, 0, 12, -6, 14, 2, -5, 17, -4, 22, -1, -14, 29, 7}
}
, {{-21, 0, -24, -17, 4, -6, 24, 16, -13, -22, -19, -15, -20, -29, -12, -23, 22, 17, 33, 39, 16, 26, 9, 8, 24, -12, -4, -23, -28, -13, -44, -60, -67, -64, -85, -105, -116, -114, -100, -74, -65, -48, -33, -62, -59, -62, -39, -55, -46, -53, -64, -37, -61, -76, -82, -93, -73, -81, -72, -85, -45, -60, -44, -41, -31, -8, -22, -38, -67, -67, -65, -81, -72, -108, -84, -23, -11, -20, -23, 11}
}
, {{-49, 29, 3, -61, 24, -23, -56, -15, -26, -32, 4, 4, -34, 37, 34, 2, 40, 45, 12, -7, 10, 1, -5, -15, -20, 30, -35, 6, 15, -27, 13, -33, 16, -25, 22, -20, 29, 35, 26, 58, 12, 26, 0, 27, -6, 3, -1, 7, -28, -24, 12, -51, -35, -11, -54, -17, 1, -50, 47, 6, 4, 30, 0, -5, 36, -32, 6, -3, 5, -19, 5, 13, -21, 29, -32, 14, 5, -27, -6, 0}
}
, {{-5, -23, -3, 9, -13, -13, -9, 6, -17, -3, 13, -23, 11, -4, -34, 16, -15, -34, 2, 1, -57, 9, 3, -44, 2, -9, 7, -23, 21, -25, 9, 40, -20, 47, 41, -22, 77, 8, 20, 56, 18, 48, 57, 59, 18, 75, 17, 45, 59, 12, 52, 32, 18, 9, 44, 0, 12, 21, -20, 38, -54, 16, -7, -62, 10, -14, -43, 13, -36, -28, 21, -42, 11, -6, -9, 2, 9, -18, 26, -16}
}
, {{19, 0, 0, 10, 38, -44, 31, 22, -52, 49, -29, 5, 32, -22, 20, -8, -7, -4, 14, -25, 23, -10, 16, -7, -70, 69, -64, 8, 33, -30, 8, -24, 15, -1, 22, -38, 25, 35, -60, 31, 24, -50, 39, -11, -17, 12, 23, -33, -8, 0, 4, 12, 20, -37, 41, -13, -20, 26, -31, 22, -23, -3, -14, 5, -36, 12, 28, -23, 20, -2, -26, 17, -24, 11, 13, -27, 15, -15, 21, -28}
}
, {{14, -22, 16, -17, 14, -1, -32, 59, -75, 42, 1, -45, 45, 10, -43, 30, 6, -50, 58, -42, -16, 41, -37, 7, 12, -1, -8, 8, -10, -5, 25, -6, -39, 27, 5, -39, 37, -1, -20, 16, -13, 25, -29, 6, 17, -39, 54, -52, 38, -17, -21, 19, 21, -43, 19, 19, -38, 28, -8, -9, 26, -30, 17, -13, 19, -40, 20, 6, -19, 42, -55, 42, -6, -16, 20, -22, 9, 1, -13, 7}
}
, {{16, -10, 37, -4, 0, 27, -14, 10, 25, -20, 2, 45, -33, 18, 30, -22, 30, 39, -37, 21, 36, -46, 68, -20, 10, 21, 17, 16, 1, 19, -2, 55, -29, 12, 24, 11, 18, -18, 26, 12, -3, -14, 41, -22, 2, 20, -40, 41, -47, 18, 12, -31, 8, 13, -12, -4, 3, -18, 30, -57, 31, -20, -25, 5, -44, -1, -6, -47, 22, -53, 5, -33, -29, -2, -54, -2, -37, -1, -6, -17}
}
, {{18, 34, -8, 32, -5, 20, 41, 48, 4, 37, 13, -6, 22, 9, 24, 24, 31, -23, 42, 28, 0, -5, 0, -2, 41, 36, 1, 6, 0, 15, 2, 9, -9, -7, 19, 9, -16, 4, 11, 17, 17, 11, -33, -4, 9, -19, 29, -24, 37, 5, 10, 33, -15, 36, -7, 18, 16, -6, 31, 10, 12, -3, -7, 5, 14, 11, 6, 19, 2, 13, 2, 8, 42, -6, 17, 6, -8, 38, -6, 37}
}
, {{-10, -28, -13, 7, 17, 15, 44, 35, 15, -21, 8, 0, -18, -47, -45, -50, -9, 36, 51, 29, 26, 4, -8, -25, -2, 0, 7, -35, -36, -6, 17, 34, 30, 29, -6, -3, 2, -30, -53, -27, 0, -13, 26, 42, 35, 12, 22, -11, -26, -4, -3, -24, -37, -17, -28, -19, -18, 18, 20, 19, 0, 28, 32, 26, -14, 19, 25, 4, -46, -40, -45, -6, 14, 40, 17, 0, 4, 16, 7, -7}
}
, {{29, -10, 24, 24, -23, -5, 23, -8, 29, 19, 25, 14, -12, 1, -39, 18, -17, -14, -25, 18, -16, -36, 12, -12, -10, -17, -34, -10, -36, -11, 13, 3, 51, 3, 42, 31, 31, 7, -24, 2, -13, -30, -23, -9, -49, -29, -23, -37, -37, 5, -37, 6, -35, -38, 9, -39, -12, -12, -25, 9, -9, 9, -1, 31, -11, -7, 38, -3, 21, 10, 35, 31, 46, -5, 29, 34, -3, 60, 5, 12}
}
, {{-37, -54, -5, -41, -10, -43, 2, -21, -32, 10, -59, -31, -49, -32, -51, -61, 0, -47, -10, -14, -38, -11, -10, -38, 15, -6, -13, 3, 4, 6, 19, -6, 1, 3, 18, -21, 3, 14, 26, -9, 19, 30, -17, 44, 15, 15, 32, 32, 8, 35, 29, 28, 30, 26, 9, 56, 5, 37, 38, 2, 39, 16, 20, 29, 14, 33, 23, 8, 23, 34, 11, 22, 61, 14, 25, 31, 11, 22, 17, -8}
}
, {{37, 31, -5, 17, -14, -5, -50, -46, -18, 18, 52, 30, 54, 40, -5, 4, 22, 23, 3, 12, -11, -23, -25, -38, -23, -12, -13, -6, 13, 7, 16, -10, -15, -27, -12, -42, -6, -6, -11, -13, -1, -8, 5, 5, -32, -25, 7, -3, 12, 15, -1, -22, 0, -3, -22, 16, 43, 18, 26, -14, -1, 19, 19, 14, 19, 22, 38, 37, 32, 6, 25, 11, 6, 14, -8, 31, 41, 15, 39, 52}
}
, {{11, -45, 15, -3, -32, 47, -55, 14, 19, -14, -14, 6, -13, -6, 1, -5, -1, 22, -39, 6, 0, -31, 37, -16, -16, 22, -28, -12, 26, -47, 35, 11, -40, 36, -20, -13, 44, -58, 38, -22, -6, -7, 9, 10, -5, 5, -9, 38, -63, 36, -6, -26, 40, -42, 43, -42, 14, 45, -28, -11, 1, 3, -8, 26, -30, -6, 67, -86, 61, 21, -74, 70, -44, 0, 28, -18, -17, 25, -4, -2}
}
, {{23, 14, 15, -19, 1, -9, -19, 23, 9, -33, -7, 24, -23, 7, 31, -8, -4, -19, -4, -9, -26, 12, -2, -11, 24, 21, -19, -10, -8, -8, 40, 19, 39, 38, 5, -7, -20, -28, -6, -1, -36, 17, 18, 7, 36, 27, 20, 59, 42, 15, -35, -46, -47, -21, -44, -57, -28, -24, -39, -6, -39, -35, -45, -4, -16, 8, 15, -3, 39, 57, 40, 41, 2, 18, 15, -16, -6, -27, -24, -10}
}
, {{-50, -44, -33, -60, -43, -53, -43, -54, -20, -23, -26, -30, -21, -69, -50, -34, -41, -16, 24, -20, -12, -12, 6, 26, 54, 27, -8, -22, -27, -3, 23, -12, -14, -20, 3, -13, -5, -12, -18, -9, -5, -14, 42, 57, 44, 41, 27, 11, 3, 1, -49, -37, -40, -63, -22, -14, -49, 8, 39, 35, 28, 44, 17, 11, 0, 27, 47, 21, 47, 48, 10, 2, 21, 13, 5, -22, -38, -23, -16, 6}
}
, {{29, 24, 41, 17, 17, 12, 9, 4, 11, 45, -4, 18, 41, 6, 41, 46, 25, 3, 20, 15, -16, 7, 23, 23, 1, 4, -11, 0, 21, 64, 14, 27, 15, 2, 23, 16, 50, 57, 15, -5, -66, -82, -52, -67, -54, -26, -104, -75, -62, -46, -35, -50, -81, -57, -80, -68, -15, -27, 12, -43, -38, -44, -32, -4, 33, 54, 21, 44, -9, 36, 4, 52, 17, -5, 37, 9, 16, 40, 52, 61}
}
, {{-4, -23, 5, -6, 0, -9, 23, -7, 0, -3, 15, -22, -19, 5, 0, -33, 0, 26, -2, -10, -22, -36, -50, -35, -29, -13, -22, 11, 13, 11, 46, 56, 66, 31, 43, 37, 25, 31, 41, 32, 3, 2, 34, 4, -18, 13, 15, -18, -35, -56, -53, -67, -60, -59, -28, -11, -7, -3, 0, -8, -28, -10, -12, -8, 27, 29, 37, 59, 35, 48, 40, -12, -21, -3, -66, -44, -18, -19, -44, 10}
}
, {{-9, -9, 32, -4, -20, 26, -38, -20, 25, -7, -8, 7, -13, -10, -6, -4, -18, -43, 19, 16, 26, -21, -1, 22, -7, 15, 19, 18, -54, 6, -20, -55, 37, -13, 14, 16, 17, -25, -36, -32, -13, -17, 16, 0, 35, 19, 40, 32, 48, -3, -39, 0, -40, -64, -43, -13, -6, 21, 8, 14, 55, 21, 48, -11, -22, 18, -27, -40, 41, 0, -12, 24, -47, -50, 9, 1, -30, 31, 8, 17}
}
, {{50, -46, 23, 7, -24, 6, 32, -7, 7, 10, -63, 49, 18, -46, 52, 7, -18, 40, -38, -29, 38, -5, -22, 30, 14, -36, 14, -16, 3, 14, -26, -4, -21, 12, -16, 37, 21, -81, 57, -39, -29, 26, 6, 3, -21, -10, 7, 25, -30, 24, -14, -19, -23, -3, 8, 38, -20, -2, -2, -28, 9, -10, -2, -1, 12, -32, 43, -48, 0, 9, -46, 2, 20, -21, 16, -34, -15, 27, -8, -20}
}
, {{-36, -50, -41, -51, -30, -51, -32, -6, -36, -15, -24, -3, -23, -22, -19, -24, -18, 16, -29, -9, 1, -15, -9, -42, -10, -2, -22, -45, 24, -21, -28, -19, 24, -31, -31, 26, -21, 2, 13, -18, 9, -12, 6, 6, -6, 31, 41, 9, 10, 45, 19, 59, 58, 43, 61, 35, 52, 54, -3, 10, 22, 1, 14, 6, -20, 9, -1, -48, -41, -40, -18, 6, 49, 32, 61, 68, 74, 51, 58, 27}
}
, {{27, 13, -4, -22, 19, 16, -1, 23, -2, 17, -17, -10, 1, 4, -27, -57, -47, -39, -79, -56, -28, -43, -25, -10, -28, -7, 27, 28, 23, 45, -1, 25, 11, -3, -35, -26, -27, -80, -69, -46, -70, 1, -2, -13, 2, -3, -13, 15, 31, 4, -8, 4, 2, 0, 28, 19, 25, 7, 32, -14, 33, 3, -16, -1, 38, 47, 21, 13, 51, -22, 38, 58, -37, 18, 36, -20, 46, 49, 0, 18}
}
, {{-28, -17, -41, -55, -42, -77, -49, -56, -24, 23, -5, -51, -65, -48, -14, -3, -32, 7, -13, 16, 30, 76, 49, 58, 15, -26, -40, -23, 24, 81, 58, 36, -15, -20, -81, -33, -38, -24, -20, 3, 34, -1, 0, -1, 16, -21, 0, -11, -27, -1, 2, 38, -23, -52, -69, -91, -61, -62, -60, -11, 14, 35, -6, -64, -57, -39, -29, 4, 0, 31, 52, 19, 0, -50, -32, 7, -20, -56, -93, -47}
}
, {{6, 20, 4, -33, -36, 5, 19, 30, -16, 26, -10, -33, 3, 24, -27, 20, -39, -2, 17, 29, 6, 34, -38, -18, -14, 11, -42, 39, 0, 9, -6, 23, -11, -19, 28, 3, -26, -40, 43, -20, 20, -24, 60, -40, -20, 39, -59, 41, -9, -7, 5, -4, 13, 19, -23, -19, 31, -69, 55, -18, 5, 1, -3, 10, -3, -2, -23, 35, -40, 44, -9, -35, 16, -20, 5, 44, -46, 28, -5, -8}
}
, {{29, 32, 21, 55, 41, 23, 85, 9, 58, 59, 65, 61, 37, 87, 53, 29, 78, 33, 21, 61, -26, 57, 26, -48, 56, -1, -23, 7, 32, -63, 1, 8, -34, 16, -32, -19, 33, -20, -7, 22, -20, 7, -17, 11, -22, 9, -38, 5, -18, -21, -32, -37, -5, -27, -18, -10, -48, -22, -15, -42, -21, -45, 11, -31, -4, 13, -40, 20, -42, 20, -8, -19, 17, 19, 3, -35, 30, -39, -1, -6}
}
}
;

#undef INPUT_CHANNELS
#undef CONV_FILTERS
#undef CONV_KERNEL_SIZE
/**
  ******************************************************************************
  * @file    maxpool.cc
  * @author  Pierre-Emmanuel Novac <penovac@unice.fr>, LEAT, CNRS, Université Côte d'Azur, France
  * @version 1.0.0
  * @date    24 march 2020
  * @brief   Template generating plain C code for the implementation of Convolutional Neural Networks on MCU
  */

#ifndef SINGLE_FILE
#include "number.h"
#endif

#define INPUT_CHANNELS  32
#define INPUT_SAMPLES   381
#define POOL_SIZE       4
#define POOL_STRIDE     4
#define POOL_PAD        0 // Unsupported
#define POOL_LENGTH	    ( ( (INPUT_SAMPLES - POOL_SIZE + (2*POOL_PAD) ) / POOL_STRIDE ) + 1 )

#define ACTIVATION_LINEAR

typedef number_t max_pooling1d_1_output_type[INPUT_CHANNELS][POOL_LENGTH];

static inline void max_pooling1d_1(
  const number_t input[INPUT_CHANNELS][INPUT_SAMPLES], 	    // IN
  number_t output[INPUT_CHANNELS][POOL_LENGTH]) {	// OUT

  unsigned short pos_x, k; 	// loop indexes for output volume
  unsigned int x;
  number_t max, tmp; 

  for (k = 0; k < INPUT_CHANNELS; k++) 
    for (pos_x = 0; pos_x < POOL_LENGTH; pos_x++) {
#ifdef ACTIVATION_LINEAR
      max = input[k][pos_x*POOL_STRIDE];
      x = 1;
#elif defined(ACTIVATION_RELU)
      max = 0;
      x = 0;
#endif
      for (; x < POOL_SIZE; x++) {
        tmp = input[k][(pos_x*POOL_STRIDE)+x]; 
        if (max < tmp)
          max = tmp;
      }
      output[k][pos_x] = max; 
    }
}

#undef INPUT_CHANNELS  
#undef INPUT_SAMPLES
#undef POOL_SIZE
#undef POOL_STRIDE
#undef POOL_PAD
#undef POOL_LENGTH
#undef ACTIVATION_LINEAR
/**
  ******************************************************************************
  * @file    conv.cc
  * @author  Pierre-Emmanuel Novac <penovac@unice.fr>, LEAT, CNRS, Université Côte d'Azur, France
  * @version 1.0.0
  * @date    24 march 2020
  * @brief   Template generating plain C code for the implementation of Convolutional Neural Networks on MCU
  */

#ifndef SINGLE_FILE
#include "number.h"
#endif

#define INPUT_CHANNELS      32
#define INPUT_SAMPLES       95
#define CONV_FILTERS        32
#define CONV_KERNEL_SIZE    3
#define CONV_STRIDE         1

#define ZEROPADDING_LEFT    0
#define ZEROPADDING_RIGHT   0

#define CONV_OUTSAMPLES     ( ( (INPUT_SAMPLES - CONV_KERNEL_SIZE + ZEROPADDING_LEFT + ZEROPADDING_RIGHT) / CONV_STRIDE ) + 1 )

#define ACTIVATION_RELU

typedef number_t conv1d_1_output_type[CONV_FILTERS][CONV_OUTSAMPLES];

static inline void conv1d_1(
  const number_t input[INPUT_CHANNELS][INPUT_SAMPLES],               // IN
  const number_t kernel[CONV_FILTERS][INPUT_CHANNELS][CONV_KERNEL_SIZE], // IN

  const number_t bias[CONV_FILTERS],						                // IN

  number_t output[CONV_FILTERS][CONV_OUTSAMPLES]) {               // OUT

  unsigned short pos_x, z, k; 	// loop indexes for output volume
  unsigned short x;
  short input_x;
  long_number_t	kernel_mac;
  static long_number_t	output_acc[CONV_OUTSAMPLES];
  long_number_t tmp;

  for (k = 0; k < CONV_FILTERS; k++) { 
    for (pos_x = 0; pos_x < CONV_OUTSAMPLES; pos_x++) { 
      output_acc[pos_x] = 0;
	    for (z = 0; z < INPUT_CHANNELS; z++) {

        kernel_mac = 0; 
        for (x = 0; x < CONV_KERNEL_SIZE; x++) {
          input_x = pos_x * CONV_STRIDE - ZEROPADDING_LEFT + x;
          if (input_x < 0 || input_x >= INPUT_SAMPLES) // ZeroPadding1D
            tmp = 0;
          else
            tmp = input[z][input_x] * kernel[k][z][x]; 
          kernel_mac = kernel_mac + tmp; 
        }

	      output_acc[pos_x] = output_acc[pos_x] + kernel_mac; 
      }
      output_acc[pos_x] = scale_number_t(output_acc[pos_x]);

      output_acc[pos_x] = output_acc[pos_x] + bias[k]; 

    }

    for (pos_x = 0; pos_x < CONV_OUTSAMPLES; pos_x++) {
#ifdef ACTIVATION_LINEAR
      output[k][pos_x] = clamp_to_number_t(output_acc[pos_x]);
#elif defined(ACTIVATION_RELU)
      // Activation function: ReLU
      if (output_acc[pos_x] < 0)
        output[k][pos_x] = 0;
      else
        output[k][pos_x] = clamp_to_number_t(output_acc[pos_x]);
#endif
    }
  }
}

#undef INPUT_CHANNELS
#undef INPUT_SAMPLES
#undef CONV_FILTERS
#undef CONV_KERNEL_SIZE
#undef CONV_STRIDE
#undef ZEROPADDING_LEFT
#undef ZEROPADDING_RIGHT
#undef CONV_OUTSAMPLES
#undef ACTIVATION_RELU
/**
  ******************************************************************************
  * @file    weights/conv.cc
  * @author  Pierre-Emmanuel Novac <penovac@unice.fr>, LEAT, CNRS, Université Côte d'Azur, France
  * @version 1.0.0
  * @date    24 march 2020
  * @brief   Template generating plain C code for the implementation of Convolutional Neural Networks on MCU
  */

#define INPUT_CHANNELS    32
#define CONV_FILTERS      32
#define CONV_KERNEL_SIZE  3


const int16_t conv1d_1_bias[CONV_FILTERS] = {129, 27, 76, -12, -6, -12, -1, -88, 8, 20, -100, 129, 70, -83, -85, 50, 62, -36, 121, 94, 21, -10, 12, -64, -3, 34, -97, -16, -61, -66, 87, 86}
;

const int16_t conv1d_1_kernel[CONV_FILTERS][INPUT_CHANNELS][CONV_KERNEL_SIZE] = {{{71, -96, -104}
, {66, 69, 99}
, {56, -22, -55}
, {-8, -54, -93}
, {30, -37, 13}
, {28, -8, -86}
, {64, -17, -61}
, {-50, -83, -56}
, {-138, -101, -53}
, {-6, -37, -154}
, {-24, -47, -78}
, {71, -57, -79}
, {8, 20, 43}
, {103, -9, 41}
, {91, 111, 7}
, {-42, -54, 2}
, {51, -55, 3}
, {44, 65, 13}
, {-76, -68, -30}
, {64, 71, 36}
, {-72, -122, 63}
, {44, 9, -112}
, {-262, -126, -58}
, {-85, -152, -116}
, {28, -131, -150}
, {-29, -140, -144}
, {57, 28, 103}
, {-113, -151, -121}
, {-194, -121, -140}
, {28, 38, 3}
, {-26, -42, -37}
, {119, 123, 19}
}
, {{-81, -54, -4}
, {-151, -61, -155}
, {202, 175, 114}
, {67, 6, 69}
, {64, 53, -7}
, {-98, -76, -2}
, {-88, -41, 3}
, {-59, 0, -17}
, {66, 60, 26}
, {-54, -31, 30}
, {29, 16, -62}
, {61, 28, 51}
, {126, -12, 167}
, {201, 122, 93}
, {91, -37, 98}
, {66, -22, 4}
, {-40, -100, -53}
, {59, 69, 16}
, {77, -27, 18}
, {-33, 64, -51}
, {98, 143, 149}
, {55, -59, -20}
, {-17, -33, -61}
, {52, -16, -144}
, {-76, -16, 51}
, {-19, 18, -117}
, {3, 22, 111}
, {69, 0, -21}
, {-3, 81, -92}
, {-143, -55, -43}
, {-64, -4, 107}
, {64, 90, 98}
}
, {{-60, -46, -98}
, {76, 79, 116}
, {28, -13, 98}
, {41, 0, -100}
, {17, -69, -75}
, {-13, -74, -120}
, {116, 40, -8}
, {26, -149, 86}
, {-97, -61, -8}
, {-5, 78, 17}
, {-88, 21, -103}
, {-128, -44, -180}
, {184, -5, -5}
, {133, 24, 72}
, {27, -32, 51}
, {31, -48, -102}
, {-103, -122, -114}
, {92, 25, 96}
, {-146, -49, -54}
, {23, -40, 47}
, {-92, 46, 112}
, {-12, 22, -95}
, {-252, -89, 81}
, {51, -126, 15}
, {-152, -3, -91}
, {-134, -8, 49}
, {69, 123, 121}
, {-109, -187, -7}
, {-23, -135, -40}
, {-11, -55, -61}
, {55, 12, -14}
, {85, 28, -61}
}
, {{-50, 53, 91}
, {42, -120, -47}
, {47, 13, 28}
, {64, 76, 46}
, {112, 25, 109}
, {65, -4, -1}
, {75, -25, 77}
, {-49, 55, 33}
, {-86, -1, -101}
, {-67, 73, -44}
, {65, 52, -2}
, {58, -20, 49}
, {100, 129, -1}
, {144, 114, 11}
, {-55, -45, 0}
, {31, 46, -18}
, {-20, 70, 63}
, {-52, 92, -51}
, {-26, 39, -39}
, {92, -36, 60}
, {113, -65, 97}
, {31, 48, -1}
, {-98, -130, -88}
, {-120, -49, -20}
, {-69, -33, -11}
, {12, 135, 60}
, {98, 2, 167}
, {31, 12, 15}
, {-48, -56, -116}
, {-65, 26, -20}
, {61, 141, 158}
, {62, -19, 23}
}
, {{58, -74, -13}
, {-14, -40, -92}
, {253, 136, 223}
, {100, -13, 33}
, {-28, -16, 91}
, {-92, 36, -74}
, {76, 25, 16}
, {-17, -9, 80}
, {61, 41, 59}
, {-28, 41, 53}
, {-67, -45, -42}
, {-16, 22, 45}
, {168, 182, 141}
, {97, 215, 174}
, {96, -3, -57}
, {-20, 45, -24}
, {-46, 90, -38}
, {-91, 77, 27}
, {-14, 52, 89}
, {-19, -70, -36}
, {174, 92, 195}
, {8, -11, -12}
, {-11, 27, -45}
, {-11, -32, 16}
, {-133, 48, 3}
, {56, 43, 15}
, {143, 106, 150}
, {-41, -20, 96}
, {-91, 32, -53}
, {-119, -99, -100}
, {180, 52, 2}
, {-62, -15, 1}
}
, {{-53, 69, 5}
, {-46, 26, -44}
, {0, 4, -88}
, {20, -71, -94}
, {-92, 46, -85}
, {46, 12, -38}
, {-44, 61, 81}
, {-43, -48, 21}
, {37, -72, -40}
, {74, -35, -50}
, {-84, 78, -104}
, {-62, -39, -68}
, {-90, -44, -31}
, {-25, -24, 17}
, {9, -36, -95}
, {5, -78, 15}
, {-30, -30, -15}
, {-55, 43, -29}
, {-44, 12, -23}
, {15, -85, -44}
, {-42, -42, 53}
, {-22, -67, -43}
, {-44, 36, 21}
, {0, -91, 17}
, {2, 71, 53}
, {-53, 48, -63}
, {-62, -12, 38}
, {-82, 10, 28}
, {-100, -16, -86}
, {-24, -69, -19}
, {38, 57, 0}
, {-20, 22, 32}
}
, {{34, -40, 95}
, {-130, -130, -51}
, {-1, 38, -24}
, {-90, 60, 0}
, {23, -11, -88}
, {90, -108, 54}
, {119, 104, -13}
, {-116, 67, 55}
, {93, 3, 36}
, {127, -31, -49}
, {8, -91, 41}
, {-34, 19, 30}
, {44, -73, 86}
, {7, -13, -103}
, {-14, 8, -1}
, {-26, -66, -74}
, {40, 44, -24}
, {-48, -24, -22}
, {51, 14, 29}
, {-8, 36, 66}
, {28, 32, -147}
, {60, 71, 97}
, {44, -100, -58}
, {-7, 80, -87}
, {-46, 17, 3}
, {116, 114, -46}
, {15, -28, -46}
, {56, -22, -69}
, {74, -111, 49}
, {-159, -140, -25}
, {-7, 105, 63}
, {47, 28, 19}
}
, {{-88, -58, -18}
, {-9, -211, -148}
, {186, 177, 268}
, {66, 115, 138}
, {-12, 48, -35}
, {-1, -17, -14}
, {6, -70, 62}
, {107, -8, 118}
, {38, -110, -39}
, {32, -106, -96}
, {59, 129, -47}
, {90, 18, 59}
, {158, 40, 196}
, {192, 170, 204}
, {-19, 73, -32}
, {-75, 72, 77}
, {-16, -41, 79}
, {-18, 68, 20}
, {-34, -5, -85}
, {7, -1, -28}
, {140, 76, 146}
, {89, 13, -44}
, {95, -83, -50}
, {-42, 89, -52}
, {-29, -34, 90}
, {164, 98, 119}
, {1, 82, 75}
, {40, 49, 15}
, {39, 71, 63}
, {-57, -85, -146}
, {109, 30, 24}
, {29, 23, -38}
}
, {{-19, 13, -72}
, {-46, -153, -116}
, {51, 58, 146}
, {-14, 107, 120}
, {15, 88, -12}
, {-80, -78, -2}
, {-57, -10, 64}
, {77, -60, -56}
, {26, 76, 112}
, {-64, -80, -68}
, {5, -10, 57}
, {-22, -41, 10}
, {80, 120, -5}
, {95, 161, 199}
, {-57, 0, 107}
, {19, -42, 1}
, {-11, 14, -54}
, {65, 10, 31}
, {-74, -51, 1}
, {-57, 30, 23}
, {81, 71, 190}
, {-31, 21, -82}
, {50, -14, -14}
, {23, -43, -87}
, {-18, -63, 10}
, {-21, -25, -5}
, {0, 29, 31}
, {51, -23, -59}
, {19, 59, -34}
, {-58, -63, 41}
, {2, 74, 59}
, {70, 102, 41}
}
, {{75, -73, -25}
, {-188, 0, -75}
, {-48, 37, -94}
, {103, 77, 11}
, {123, 40, 162}
, {127, 104, 56}
, {53, 10, 85}
, {139, -86, 123}
, {44, -20, -84}
, {-101, -32, -136}
, {12, -41, 2}
, {-23, -54, 55}
, {23, -64, 81}
, {-105, -28, -75}
, {-53, 40, -3}
, {-59, -84, -21}
, {-14, -2, -27}
, {-39, 89, 98}
, {-69, 47, -93}
, {0, -58, -40}
, {-104, -33, -25}
, {131, -88, 155}
, {-74, 26, 40}
, {13, -61, -82}
, {104, 112, 73}
, {66, -21, 61}
, {-25, -46, -3}
, {104, 8, 61}
, {-9, 27, -105}
, {-25, -49, -2}
, {-68, -76, -63}
, {107, -34, 4}
}
, {{-65, -31, 14}
, {-7, -86, -29}
, {164, 164, 151}
, {-52, 99, 73}
, {102, 70, 23}
, {50, 20, 64}
, {30, -3, -35}
, {-36, -6, -6}
, {79, -32, 77}
, {57, 57, 19}
, {13, 51, 40}
, {49, 66, -56}
, {113, 66, 42}
, {203, 159, 148}
, {94, 59, -22}
, {18, -61, 79}
, {63, 16, -68}
, {-54, 2, -80}
, {76, -64, -64}
, {-65, -17, 72}
, {91, 160, 161}
, {-19, 2, 59}
, {-57, 90, -5}
, {15, 40, 78}
, {-49, 10, 63}
, {34, 91, 93}
, {10, 82, -5}
, {-14, 10, 44}
, {-6, 10, 56}
, {14, -32, -36}
, {-50, 79, 84}
, {75, 54, -39}
}
, {{15, 43, -52}
, {50, 71, 0}
, {-5, 75, 88}
, {-9, -34, 111}
, {46, -45, -75}
, {-25, -8, -110}
, {71, -70, 34}
, {-69, 85, 121}
, {-106, -243, -222}
, {-293, -247, -75}
, {-51, -139, -117}
, {-155, -184, -53}
, {88, -53, -86}
, {71, -15, 96}
, {69, -54, -66}
, {-49, -14, -83}
, {-100, -5, -7}
, {0, 36, 79}
, {-103, 12, 23}
, {0, 40, 103}
, {-69, 173, 128}
, {-77, -139, 27}
, {1, 50, 141}
, {-152, 19, -40}
, {-38, -16, 4}
, {-127, 138, 46}
, {2, 111, -111}
, {-128, 70, 124}
, {34, 36, 149}
, {35, 28, 63}
, {54, 32, -21}
, {49, 77, -168}
}
, {{61, 15, 55}
, {-160, -82, -142}
, {-25, -51, -13}
, {100, 77, 19}
, {-93, -82, -78}
, {-49, -65, -122}
, {65, 10, 102}
, {39, 74, -76}
, {94, 18, 90}
, {-15, 14, -38}
, {39, -59, 32}
, {-17, 24, 80}
, {4, 35, 33}
, {-16, -51, -88}
, {57, -22, 94}
, {92, 84, 50}
, {17, 29, -82}
, {100, 83, 11}
, {-44, -11, 70}
, {111, -55, 66}
, {48, -56, -133}
, {-73, -2, 11}
, {-42, -135, -29}
, {-38, -91, -168}
, {-115, -94, -138}
, {54, -38, 16}
, {-47, -112, -99}
, {14, -4, 75}
, {52, -72, -28}
, {20, -23, -120}
, {-52, 50, -91}
, {-17, 78, 59}
}
, {{-21, 82, 66}
, {11, 126, 104}
, {130, 128, 118}
, {31, -58, -63}
, {91, 21, 127}
, {23, -12, 62}
, {-44, -2, -87}
, {-58, 77, -45}
, {78, 113, 130}
, {-23, 32, -1}
, {3, 57, 73}
, {-81, 43, 78}
, {117, 24, 112}
, {11, 83, 70}
, {-8, -20, -78}
, {-42, 5, -54}
, {-55, -48, 30}
, {16, -35, -15}
, {-48, -52, -52}
, {12, -76, -72}
, {108, 113, 94}
, {110, -37, 13}
, {21, 10, 90}
, {-33, 103, 39}
, {37, 91, 113}
, {112, 75, 34}
, {55, 24, 82}
, {-3, -28, -50}
, {13, 98, -63}
, {143, 130, 104}
, {182, 76, 92}
, {-15, 0, -87}
}
, {{-54, -139, -157}
, {72, 19, -6}
, {5, -15, -144}
, {-59, -85, -69}
, {-27, -13, 95}
, {-38, 39, -30}
, {-42, -97, -87}
, {20, -40, -16}
, {26, 67, 0}
, {13, -120, -115}
, {12, -28, -42}
, {69, 87, 67}
, {0, 7, -2}
, {-9, 1, -147}
, {122, 34, -65}
, {-13, 0, -17}
, {-19, -43, -41}
, {-46, -46, -24}
, {-74, 32, 31}
, {-95, -52, -7}
, {138, 24, -132}
, {100, 85, -100}
, {-51, -92, 88}
, {146, 113, -11}
, {6, 24, -10}
, {-37, -73, -93}
, {-3, -5, 49}
, {-24, 27, -4}
, {-59, 72, 63}
, {-22, -18, -49}
, {13, 31, -39}
, {54, 112, 95}
}
, {{-120, -63, 46}
, {28, -11, -28}
, {-132, -35, -102}
, {-33, -83, -30}
, {-89, -13, -80}
, {-38, -138, -36}
, {-26, 0, -103}
, {111, -16, -68}
, {114, 34, 112}
, {59, 62, -38}
, {-48, 9, -16}
, {-96, -69, -59}
, {-54, 100, 67}
, {79, -44, 72}
, {89, -22, 29}
, {-13, 3, -100}
, {-144, -94, -29}
, {31, -21, -80}
, {-81, 18, 57}
, {-13, 17, -61}
, {106, 43, 13}
, {-73, -134, -109}
, {94, -12, 108}
, {124, 38, -21}
, {109, -74, 50}
, {-37, -68, 36}
, {-20, 58, -20}
, {55, 4, 16}
, {18, 50, -10}
, {64, 64, 15}
, {-96, -106, -42}
, {48, 13, -40}
}
, {{-69, 75, 17}
, {-55, -30, -155}
, {9, -29, -108}
, {-42, 24, 56}
, {-16, -59, 88}
, {-25, -48, -60}
, {-28, 4, 58}
, {-27, -28, 52}
, {-7, 21, -49}
, {-84, -7, 40}
, {-25, 2, 66}
, {63, 34, 2}
, {-103, -114, -53}
, {3, -91, -50}
, {-177, -149, 48}
, {-135, -100, 11}
, {0, 83, 53}
, {-27, -1, 37}
, {-17, -32, 51}
, {43, -72, 11}
, {104, 46, 23}
, {-28, 65, 9}
, {101, 146, 103}
, {-7, -64, -21}
, {20, 131, 51}
, {63, 172, 48}
, {-9, -89, -125}
, {99, 99, 44}
, {78, -63, 17}
, {-14, -53, -107}
, {-165, -79, -116}
, {-199, -177, -2}
}
, {{2, -21, 27}
, {85, 109, 62}
, {197, 83, 125}
, {125, 26, 67}
, {-27, -63, 115}
, {48, -37, 98}
, {49, 12, -13}
, {-62, 41, 52}
, {-141, -45, -54}
, {-121, -112, -151}
, {118, 111, -23}
, {-65, -31, 47}
, {190, 32, 111}
, {196, 101, 43}
, {52, 65, 9}
, {28, -77, -65}
, {101, 63, -34}
, {52, -29, -25}
, {-67, 51, -100}
, {65, 2, 13}
, {36, 10, 104}
, {31, 113, 100}
, {12, -47, -24}
, {-12, -11, -16}
, {59, -17, -23}
, {-5, -41, 149}
, {102, 149, 90}
, {-101, -112, -32}
, {44, 37, 76}
, {-26, -73, -1}
, {175, 51, 206}
, {-5, 12, 19}
}
, {{6, -63, -77}
, {12, 50, -45}
, {7, -14, -107}
, {42, -4, -51}
, {94, 49, -9}
, {52, 17, 31}
, {-60, 50, 56}
, {-101, 11, 12}
, {67, -6, 1}
, {53, 44, -32}
, {86, -107, -82}
, {10, 48, -63}
, {-41, -19, 78}
, {-14, -11, 62}
, {97, -38, 90}
, {20, -6, -30}
, {41, -69, 29}
, {77, -39, 33}
, {28, -68, -6}
, {11, -70, -86}
, {-18, -66, 2}
, {70, -31, 32}
, {-174, -181, -27}
, {23, -104, 25}
, {-27, 21, -43}
, {-156, -80, 8}
, {96, 104, -36}
, {4, -46, -95}
, {-171, -12, -22}
, {9, -13, -167}
, {-5, 31, 42}
, {103, 35, 91}
}
, {{-74, 9, 27}
, {-123, -98, 23}
, {36, 140, 188}
, {47, 28, 21}
, {55, 19, -98}
, {-61, -92, -118}
, {64, 56, 36}
, {107, 118, 77}
, {-13, -19, -105}
, {-78, -114, -118}
, {85, 99, 133}
, {35, -60, 73}
, {41, 36, -38}
, {181, 189, 193}
, {91, 76, -48}
, {-81, -52, 35}
, {-6, -12, -30}
, {25, -70, 12}
, {-60, 4, 78}
, {67, -84, 82}
, {165, 211, 245}
, {39, -93, 15}
, {34, 57, 18}
, {-147, -129, 36}
, {-86, 0, -4}
, {27, 22, -9}
, {17, 99, 75}
, {-59, 23, -36}
, {55, -93, -36}
, {-21, -56, -73}
, {42, 52, 100}
, {0, -66, 95}
}
, {{49, -50, 16}
, {-13, -89, 13}
, {37, 14, -45}
, {31, 2, 80}
, {-15, 132, 16}
, {59, 68, 120}
, {47, -66, 74}
, {81, 43, 41}
, {-135, 11, 31}
, {68, -63, 30}
, {122, 63, 62}
, {-86, -71, -16}
, {74, -72, -12}
, {8, -96, 35}
, {-16, -78, 8}
, {-75, -20, 12}
, {84, 50, 29}
, {37, -76, 41}
, {-20, -59, -9}
, {-8, -78, -34}
, {-108, -18, 51}
, {31, 22, 142}
, {66, 3, 117}
, {85, -134, -84}
, {147, -44, 147}
, {19, 129, 45}
, {-90, -33, -48}
, {74, 12, -73}
, {65, -41, 120}
, {-13, -90, 6}
, {-52, -16, 1}
, {80, -47, -24}
}
, {{-99, -34, -21}
, {84, 80, 81}
, {39, 110, 57}
, {49, 86, 13}
, {14, -56, -36}
, {-4, 96, 94}
, {-51, -51, -97}
, {-7, 26, -15}
, {76, -42, 8}
, {75, 107, -3}
, {19, 101, 127}
, {-50, -129, -15}
, {79, -62, 84}
, {61, 29, 105}
, {-106, -100, -12}
, {0, -104, -10}
, {79, 34, -11}
, {29, 69, 72}
, {-92, 50, 31}
, {-39, 32, -55}
, {140, 77, 33}
, {-41, -13, -83}
, {-19, 18, 23}
, {-55, 57, 88}
, {93, 29, 5}
, {-10, -16, 68}
, {26, 47, 0}
, {22, -49, 9}
, {-7, 94, 25}
, {90, 57, 42}
, {53, 219, 157}
, {-56, -40, -91}
}
, {{79, 78, 29}
, {-98, -26, 102}
, {-162, -154, -128}
, {-17, 54, 41}
, {60, -92, -6}
, {-112, -27, 41}
, {-12, -40, 91}
, {91, 97, -38}
, {-175, -77, 0}
, {-81, -35, 117}
, {0, 80, 111}
, {-103, 87, 4}
, {24, 22, -29}
, {-51, -70, -30}
, {-99, -41, -4}
, {-65, 79, -75}
, {53, 22, 29}
, {2, 54, -31}
, {-61, 16, 23}
, {16, -6, 61}
, {31, -18, -105}
, {-61, 29, 7}
, {69, 106, -5}
, {-100, -14, 69}
, {-19, 20, 25}
, {0, -22, 103}
, {-155, -174, -59}
, {1, 40, 86}
, {56, 91, -33}
, {-111, -83, -87}
, {-147, -74, -70}
, {23, -126, -38}
}
, {{64, 15, -72}
, {55, 117, 141}
, {119, -19, 158}
, {-34, -24, 57}
, {-131, -93, 54}
, {-4, -88, 102}
, {6, 5, 33}
, {41, -3, 13}
, {57, -28, -64}
, {-60, 41, 69}
, {44, 31, -48}
, {-33, 19, -12}
, {-20, 69, -42}
, {93, 71, 27}
, {17, -34, -48}
, {11, -42, 1}
, {26, 78, -62}
, {5, -59, -12}
, {42, -44, -38}
, {60, -62, 37}
, {13, 96, 54}
, {15, 75, 78}
, {83, 2, -21}
, {-126, 8, -25}
, {-86, -32, 47}
, {151, -54, 24}
, {-78, 15, 110}
, {-25, 41, 5}
, {92, -68, -164}
, {21, 0, -51}
, {182, 151, 143}
, {-90, -53, 97}
}
, {{6, 91, -67}
, {12, -15, 24}
, {-88, -122, -70}
, {71, -46, -56}
, {-60, -7, -68}
, {40, -53, -104}
, {97, 59, 72}
, {-93, -129, -13}
, {-76, -85, -75}
, {20, -56, -129}
, {-62, 42, 60}
, {36, -31, -114}
, {-14, -38, 72}
, {-60, -35, -21}
, {-11, 102, -69}
, {80, 65, 88}
, {103, 93, 31}
, {-45, 87, 32}
, {-5, -82, 3}
, {98, 18, -55}
, {-26, -57, 13}
, {3, -24, 35}
, {-46, -189, 5}
, {-40, 87, -46}
, {9, -103, 48}
, {-29, 87, -60}
, {-76, 44, 72}
, {30, -29, 63}
, {-56, -13, 25}
, {-72, 0, -128}
, {-3, -35, 94}
, {105, 94, -8}
}
, {{12, -21, -1}
, {74, -36, -67}
, {10, -25, 29}
, {113, -57, 16}
, {-76, 58, 29}
, {96, 1, -104}
, {74, -8, -7}
, {-4, -91, -40}
, {-98, -121, -21}
, {7, 41, 23}
, {88, 17, 28}
, {109, 71, -101}
, {-92, -76, 31}
, {45, 72, 72}
, {16, 73, 37}
, {27, -79, 84}
, {-87, -32, 22}
, {-51, -2, -82}
, {99, 62, -93}
, {-66, -84, -50}
, {91, -54, -101}
, {-50, 24, 47}
, {-34, -4, -55}
, {7, -68, -15}
, {12, 15, -85}
, {-101, -21, -18}
, {-119, 7, 31}
, {97, 43, -181}
, {-83, -12, -185}
, {-98, -14, -21}
, {52, -47, -9}
, {-112, 40, 122}
}
, {{24, -73, 81}
, {34, -26, 12}
, {139, 203, 135}
, {-36, 16, 38}
, {-16, 121, 80}
, {89, -37, -31}
, {-20, -96, -82}
, {-31, 39, 77}
, {-182, -9, -44}
, {-167, 34, 62}
, {-5, 132, 12}
, {34, -49, 4}
, {178, 25, -9}
, {70, 109, 60}
, {61, 94, -78}
, {8, -61, 32}
, {72, 59, -41}
, {67, -52, 68}
, {17, 48, 65}
, {-10, 79, 42}
, {88, -28, 74}
, {20, -21, 48}
, {-68, 25, 110}
, {17, -70, -42}
, {87, -23, -54}
, {-99, 56, 46}
, {53, 50, 79}
, {-31, 71, -11}
, {103, -6, -43}
, {-57, -19, -46}
, {36, 42, 49}
, {34, 64, -97}
}
, {{67, 60, -74}
, {74, 95, 42}
, {40, 64, -33}
, {-97, 51, -58}
, {109, 48, -61}
, {68, 99, 40}
, {62, -68, -71}
, {27, -102, -74}
, {44, -2, 55}
, {-91, -8, 70}
, {-56, -77, 12}
, {13, 64, -80}
, {119, 91, -81}
, {139, -14, -28}
, {32, 20, -44}
, {50, 80, -75}
, {80, -17, -68}
, {85, 37, -6}
, {-55, -45, 57}
, {-64, -75, -75}
, {75, 35, 34}
, {80, 68, -1}
, {11, 80, 17}
, {-15, -62, 37}
, {78, 44, -71}
, {-23, 79, 72}
, {79, 121, 7}
, {-22, 22, -138}
, {-82, 53, 19}
, {28, 80, -87}
, {163, 58, 106}
, {-37, 79, -7}
}
, {{-24, 31, -17}
, {59, 75, -60}
, {73, 111, 194}
, {-47, -37, -30}
, {109, -89, -3}
, {-57, 114, 28}
, {82, 0, -8}
, {-26, -122, -63}
, {-54, 17, 48}
, {-2, -62, 30}
, {-37, 19, 90}
, {26, 48, 16}
, {145, 103, -21}
, {103, 211, 63}
, {27, 35, -2}
, {-28, -90, -11}
, {-49, 26, 65}
, {-69, -28, -16}
, {-40, 79, 34}
, {-51, 0, 46}
, {20, 53, 5}
, {-82, 84, 42}
, {-54, -83, -61}
, {63, -55, 98}
, {-9, -64, 28}
, {85, -17, -23}
, {-14, 36, 46}
, {53, -25, 74}
, {105, -13, 16}
, {3, -75, 29}
, {150, -40, 106}
, {-22, -41, 51}
}
, {{25, -31, 60}
, {20, 55, 15}
, {88, 109, 48}
, {61, 51, 44}
, {-31, -17, 58}
, {31, -25, -16}
, {-47, 56, 34}
, {-33, -23, 23}
, {-37, 88, -53}
, {-69, -97, 49}
, {48, 43, -14}
, {54, -71, -31}
, {-105, 24, -10}
, {-71, -72, -2}
, {-74, -52, -105}
, {11, -60, 32}
, {35, -57, 30}
, {-46, 4, 93}
, {-46, 7, 34}
, {-39, 54, 10}
, {-19, -96, 44}
, {19, 68, -31}
, {42, -31, -124}
, {21, 1, 81}
, {8, 98, -67}
, {58, 34, 24}
, {-47, 106, -60}
, {-67, -127, -28}
, {93, -90, 138}
, {-130, -131, -81}
, {-32, 49, -19}
, {43, 29, 32}
}
, {{30, -38, -34}
, {112, -21, -80}
, {49, -18, -107}
, {-45, -91, 0}
, {-52, 59, 98}
, {-82, 64, -48}
, {-116, -107, -31}
, {-42, 67, -1}
, {-97, -24, 8}
, {-2, 35, 10}
, {19, 22, -6}
, {14, -15, 59}
, {52, -22, 21}
, {-22, -48, -7}
, {-57, -115, -40}
, {-102, 54, 51}
, {-149, -64, -77}
, {-22, 94, 76}
, {-33, 17, 53}
, {-100, 34, 23}
, {50, -65, -50}
, {-42, 106, -18}
, {-5, 83, 0}
, {-81, 58, 24}
, {2, 96, -33}
, {-29, 35, -60}
, {-62, -98, -83}
, {-43, 36, -44}
, {-2, -44, 57}
, {46, 93, 76}
, {-92, 1, 5}
, {-31, -75, -61}
}
, {{80, -56, 27}
, {21, -69, -13}
, {-142, -82, -141}
, {-7, -13, -50}
, {158, -32, 71}
, {33, 25, 75}
, {6, 11, 41}
, {-1, -8, -90}
, {-23, -28, -122}
, {-86, -29, 47}
, {-46, 48, -20}
, {101, 100, -66}
, {-142, -26, 27}
, {-140, -85, -119}
, {27, -5, -62}
, {18, -9, -41}
, {5, -10, 12}
, {91, -39, 28}
, {87, 29, -58}
, {50, -36, -10}
, {-36, -47, -122}
, {-31, -42, 53}
, {-74, 36, -170}
, {-22, 17, -93}
, {91, 158, -53}
, {-74, -35, -87}
, {-71, -5, -84}
, {99, 35, -87}
, {57, -35, -56}
, {-2, -152, -80}
, {-70, 11, -46}
, {-83, 51, 75}
}
}
;

#undef INPUT_CHANNELS
#undef CONV_FILTERS
#undef CONV_KERNEL_SIZE
/**
  ******************************************************************************
  * @file    maxpool.cc
  * @author  Pierre-Emmanuel Novac <penovac@unice.fr>, LEAT, CNRS, Université Côte d'Azur, France
  * @version 1.0.0
  * @date    24 march 2020
  * @brief   Template generating plain C code for the implementation of Convolutional Neural Networks on MCU
  */

#ifndef SINGLE_FILE
#include "number.h"
#endif

#define INPUT_CHANNELS  32
#define INPUT_SAMPLES   93
#define POOL_SIZE       4
#define POOL_STRIDE     4
#define POOL_PAD        0 // Unsupported
#define POOL_LENGTH	    ( ( (INPUT_SAMPLES - POOL_SIZE + (2*POOL_PAD) ) / POOL_STRIDE ) + 1 )

#define ACTIVATION_LINEAR

typedef number_t max_pooling1d_2_output_type[INPUT_CHANNELS][POOL_LENGTH];

static inline void max_pooling1d_2(
  const number_t input[INPUT_CHANNELS][INPUT_SAMPLES], 	    // IN
  number_t output[INPUT_CHANNELS][POOL_LENGTH]) {	// OUT

  unsigned short pos_x, k; 	// loop indexes for output volume
  unsigned int x;
  number_t max, tmp; 

  for (k = 0; k < INPUT_CHANNELS; k++) 
    for (pos_x = 0; pos_x < POOL_LENGTH; pos_x++) {
#ifdef ACTIVATION_LINEAR
      max = input[k][pos_x*POOL_STRIDE];
      x = 1;
#elif defined(ACTIVATION_RELU)
      max = 0;
      x = 0;
#endif
      for (; x < POOL_SIZE; x++) {
        tmp = input[k][(pos_x*POOL_STRIDE)+x]; 
        if (max < tmp)
          max = tmp;
      }
      output[k][pos_x] = max; 
    }
}

#undef INPUT_CHANNELS  
#undef INPUT_SAMPLES
#undef POOL_SIZE
#undef POOL_STRIDE
#undef POOL_PAD
#undef POOL_LENGTH
#undef ACTIVATION_LINEAR
/**
  ******************************************************************************
  * @file    conv.cc
  * @author  Pierre-Emmanuel Novac <penovac@unice.fr>, LEAT, CNRS, Université Côte d'Azur, France
  * @version 1.0.0
  * @date    24 march 2020
  * @brief   Template generating plain C code for the implementation of Convolutional Neural Networks on MCU
  */

#ifndef SINGLE_FILE
#include "number.h"
#endif

#define INPUT_CHANNELS      32
#define INPUT_SAMPLES       23
#define CONV_FILTERS        32
#define CONV_KERNEL_SIZE    3
#define CONV_STRIDE         1

#define ZEROPADDING_LEFT    0
#define ZEROPADDING_RIGHT   0

#define CONV_OUTSAMPLES     ( ( (INPUT_SAMPLES - CONV_KERNEL_SIZE + ZEROPADDING_LEFT + ZEROPADDING_RIGHT) / CONV_STRIDE ) + 1 )

#define ACTIVATION_RELU

typedef number_t conv1d_2_output_type[CONV_FILTERS][CONV_OUTSAMPLES];

static inline void conv1d_2(
  const number_t input[INPUT_CHANNELS][INPUT_SAMPLES],               // IN
  const number_t kernel[CONV_FILTERS][INPUT_CHANNELS][CONV_KERNEL_SIZE], // IN

  const number_t bias[CONV_FILTERS],						                // IN

  number_t output[CONV_FILTERS][CONV_OUTSAMPLES]) {               // OUT

  unsigned short pos_x, z, k; 	// loop indexes for output volume
  unsigned short x;
  short input_x;
  long_number_t	kernel_mac;
  static long_number_t	output_acc[CONV_OUTSAMPLES];
  long_number_t tmp;

  for (k = 0; k < CONV_FILTERS; k++) { 
    for (pos_x = 0; pos_x < CONV_OUTSAMPLES; pos_x++) { 
      output_acc[pos_x] = 0;
	    for (z = 0; z < INPUT_CHANNELS; z++) {

        kernel_mac = 0; 
        for (x = 0; x < CONV_KERNEL_SIZE; x++) {
          input_x = pos_x * CONV_STRIDE - ZEROPADDING_LEFT + x;
          if (input_x < 0 || input_x >= INPUT_SAMPLES) // ZeroPadding1D
            tmp = 0;
          else
            tmp = input[z][input_x] * kernel[k][z][x]; 
          kernel_mac = kernel_mac + tmp; 
        }

	      output_acc[pos_x] = output_acc[pos_x] + kernel_mac; 
      }
      output_acc[pos_x] = scale_number_t(output_acc[pos_x]);

      output_acc[pos_x] = output_acc[pos_x] + bias[k]; 

    }

    for (pos_x = 0; pos_x < CONV_OUTSAMPLES; pos_x++) {
#ifdef ACTIVATION_LINEAR
      output[k][pos_x] = clamp_to_number_t(output_acc[pos_x]);
#elif defined(ACTIVATION_RELU)
      // Activation function: ReLU
      if (output_acc[pos_x] < 0)
        output[k][pos_x] = 0;
      else
        output[k][pos_x] = clamp_to_number_t(output_acc[pos_x]);
#endif
    }
  }
}

#undef INPUT_CHANNELS
#undef INPUT_SAMPLES
#undef CONV_FILTERS
#undef CONV_KERNEL_SIZE
#undef CONV_STRIDE
#undef ZEROPADDING_LEFT
#undef ZEROPADDING_RIGHT
#undef CONV_OUTSAMPLES
#undef ACTIVATION_RELU
/**
  ******************************************************************************
  * @file    weights/conv.cc
  * @author  Pierre-Emmanuel Novac <penovac@unice.fr>, LEAT, CNRS, Université Côte d'Azur, France
  * @version 1.0.0
  * @date    24 march 2020
  * @brief   Template generating plain C code for the implementation of Convolutional Neural Networks on MCU
  */

#define INPUT_CHANNELS    32
#define CONV_FILTERS      32
#define CONV_KERNEL_SIZE  3


const int16_t conv1d_2_bias[CONV_FILTERS] = {-92, 151, -98, 51, 191, 16, -33, 50, 76, -22, 102, -58, 44, -44, 52, -17, 98, 67, -36, 4, 39, 22, 40, -6, 67, 27, 44, 180, 95, 88, -25, 9}
;

const int16_t conv1d_2_kernel[CONV_FILTERS][INPUT_CHANNELS][CONV_KERNEL_SIZE] = {{{-50, 39, 24}
, {82, 72, 6}
, {31, 30, 23}
, {37, 16, 7}
, {-12, 140, 80}
, {16, -48, -2}
, {-35, 23, 94}
, {-21, 112, 77}
, {71, 122, 128}
, {36, -34, 14}
, {76, 85, 102}
, {0, -41, 14}
, {-80, -90, -91}
, {46, 100, -40}
, {43, -81, 30}
, {-58, -14, -76}
, {29, -17, 10}
, {86, 89, 10}
, {-68, -16, 7}
, {83, -37, 87}
, {15, -38, 23}
, {-36, -47, -80}
, {-79, -69, 26}
, {96, -17, 39}
, {-37, -96, -52}
, {96, 41, -38}
, {73, 143, 11}
, {-50, 10, -29}
, {0, -32, 49}
, {-16, 70, -29}
, {-135, -45, -97}
, {-114, -120, -16}
}
, {{16, 56, 150}
, {27, -74, -127}
, {-106, 54, 75}
, {83, 110, -99}
, {23, -105, -49}
, {75, -14, 23}
, {92, 61, -121}
, {-39, 49, -19}
, {20, -89, -29}
, {164, 177, 12}
, {-48, -104, 33}
, {-25, -75, 106}
, {-34, -78, -43}
, {-78, -102, -104}
, {-126, -47, -47}
, {-154, 10, -105}
, {19, -120, 62}
, {-5, 72, -3}
, {77, 43, 58}
, {43, -5, -64}
, {134, 172, -8}
, {-186, -176, -100}
, {45, 11, -76}
, {-132, -134, 0}
, {-35, -78, -52}
, {-19, -84, 0}
, {19, 29, -125}
, {-50, 26, -7}
, {30, -35, -1}
, {-46, -67, -68}
, {-55, 73, 184}
, {39, 61, -16}
}
, {{-18, -6, -15}
, {-40, -101, -77}
, {-63, 15, -2}
, {75, 68, -65}
, {-46, -66, 36}
, {-86, 62, 47}
, {67, 22, 21}
, {-16, 49, 81}
, {-49, 35, 29}
, {15, -37, -45}
, {15, -1, 9}
, {10, 147, 111}
, {-27, -49, 73}
, {-88, -9, -9}
, {-3, -69, -53}
, {46, -106, -145}
, {136, 67, 62}
, {75, 46, 83}
, {34, 31, -56}
, {15, 1, 40}
, {113, -46, 16}
, {-25, -27, -14}
, {86, -10, 87}
, {97, 118, 66}
, {15, 85, -66}
, {49, 6, -109}
, {63, 74, 43}
, {55, 55, 1}
, {-27, 29, -13}
, {27, 47, -45}
, {-8, 52, -42}
, {54, 1, -84}
}
, {{68, 71, -9}
, {58, -36, -60}
, {178, 95, -63}
, {-5, 74, -81}
, {54, -6, 12}
, {-74, -7, -95}
, {38, 16, -50}
, {-23, -60, -71}
, {-38, 61, 72}
, {-56, 15, -39}
, {-7, 95, 31}
, {45, -67, 12}
, {79, -12, -105}
, {-4, -24, 70}
, {-88, -36, -130}
, {-45, -14, 71}
, {35, -208, -163}
, {-52, 9, 80}
, {123, 50, -7}
, {-97, 58, 46}
, {7, -3, -10}
, {-34, -15, 16}
, {-23, -260, -65}
, {-75, -87, -123}
, {-14, -7, -80}
, {52, -67, -229}
, {-51, -99, 42}
, {91, -32, 97}
, {79, -16, -32}
, {-25, 18, -97}
, {-9, 69, -46}
, {118, -48, -195}
}
, {{59, 108, 80}
, {136, 147, 42}
, {3, 90, 155}
, {7, -71, 50}
, {8, 66, -79}
, {-43, 59, -30}
, {-36, -55, 43}
, {84, 13, -111}
, {127, 137, 137}
, {-32, -129, 27}
, {-100, -119, -52}
, {67, 47, 48}
, {-20, 37, -12}
, {-147, -155, -117}
, {60, -38, -49}
, {-90, 33, 55}
, {-14, -17, 39}
, {-24, -69, -8}
, {-22, -14, 91}
, {123, 111, 3}
, {-181, -124, -113}
, {-119, 186, 30}
, {-70, 58, 41}
, {-142, -4, -21}
, {28, -44, -51}
, {83, 36, 38}
, {-103, -91, -78}
, {-92, -136, -140}
, {18, 62, -13}
, {-81, -55, -78}
, {159, 137, 82}
, {6, -70, 11}
}
, {{20, 152, 75}
, {57, 3, -78}
, {-49, 108, 70}
, {29, 35, 35}
, {85, 52, -48}
, {-15, -85, -58}
, {11, -12, -132}
, {101, -34, 26}
, {-30, -40, -10}
, {-58, -95, -176}
, {77, 9, 85}
, {-38, 76, 132}
, {-15, -4, -95}
, {-93, -29, -61}
, {-5, -124, -181}
, {-4, -105, 38}
, {21, -85, 101}
, {94, 94, 75}
, {3, 88, 81}
, {-52, -3, -83}
, {-71, -51, -100}
, {-78, 91, 4}
, {31, 45, -76}
, {-30, -49, 0}
, {81, 73, -4}
, {-73, 30, 32}
, {6, -50, 52}
, {-44, -62, 77}
, {-55, -15, 26}
, {-5, -80, 47}
, {-129, -21, 15}
, {65, -49, -47}
}
, {{49, -18, 35}
, {-40, 105, 161}
, {-17, 32, -22}
, {-13, -70, -14}
, {3, -12, 42}
, {84, -25, -81}
, {-35, -44, 23}
, {28, 81, 15}
, {-19, 28, 54}
, {88, -7, 67}
, {79, 9, -53}
, {-79, 15, 50}
, {-53, 31, 31}
, {30, -126, -147}
, {-87, -16, -86}
, {-39, 54, 118}
, {53, -28, 38}
, {-65, -62, 6}
, {76, -40, -83}
, {-24, 78, 105}
, {68, 0, 6}
, {-67, -32, 7}
, {15, -53, 47}
, {-19, 56, -82}
, {-80, -9, -61}
, {119, -42, 10}
, {-52, -32, 102}
, {40, 19, 32}
, {86, -51, 41}
, {46, 61, 84}
, {-49, 42, -112}
, {62, -102, 96}
}
, {{30, 89, 58}
, {21, 69, -27}
, {-69, -144, -14}
, {-64, -95, -83}
, {-38, -22, -60}
, {81, 43, 69}
, {79, 65, -92}
, {-101, -146, -64}
, {95, 41, -39}
, {-117, -85, -51}
, {57, 5, -41}
, {-83, -76, 26}
, {67, 78, 57}
, {61, -78, -106}
, {123, -3, 117}
, {75, -83, 66}
, {-36, 37, 22}
, {-54, -149, 37}
, {88, 97, 33}
, {-68, 12, -12}
, {17, -2, 14}
, {63, 45, -64}
, {-17, -54, 84}
, {-35, -115, 32}
, {-76, -62, 25}
, {-7, 101, -31}
, {-20, -42, -20}
, {28, -87, -19}
, {-70, -82, 48}
, {-56, -2, 39}
, {76, 58, -49}
, {37, 95, 71}
}
, {{-117, -41, -92}
, {-75, -11, -39}
, {-98, -33, 67}
, {-108, 16, 60}
, {-48, -1, 72}
, {-62, -25, 1}
, {-109, -95, -116}
, {-107, -81, 0}
, {-32, -119, -129}
, {-91, 15, -62}
, {-32, 39, 8}
, {149, 79, 170}
, {-82, 18, -115}
, {-37, 97, 124}
, {-101, -64, 29}
, {3, 72, -2}
, {-99, -145, -11}
, {-8, 72, 62}
, {-71, -85, -49}
, {78, 24, 39}
, {31, 14, 113}
, {-27, 24, 51}
, {-87, -20, -80}
, {-29, -34, 0}
, {32, -31, 35}
, {-28, -112, -44}
, {-66, 70, 85}
, {0, -46, 46}
, {-45, -114, 58}
, {-39, -57, -46}
, {82, 15, 55}
, {-85, 42, -12}
}
, {{-39, 4, -64}
, {38, 48, -7}
, {-55, -114, -151}
, {-2, -55, 82}
, {-62, -69, 2}
, {46, -23, -64}
, {-76, 37, -100}
, {-75, 48, 57}
, {25, -98, 53}
, {70, 65, -6}
, {25, 62, -100}
, {-49, -80, 23}
, {3, -32, -59}
, {64, -49, 26}
, {77, 4, 62}
, {53, 60, -152}
, {-75, 43, -20}
, {-18, 94, 49}
, {-4, -89, -65}
, {53, -29, -44}
, {120, 101, -36}
, {58, 16, 33}
, {-48, 58, 25}
, {44, 61, -103}
, {51, -66, -9}
, {9, 37, 17}
, {117, 59, 50}
, {-38, -74, 13}
, {-32, -78, -59}
, {-41, 63, 28}
, {9, 58, -36}
, {63, 74, -17}
}
, {{-13, 55, -19}
, {-90, -58, -6}
, {-29, -128, -136}
, {13, -61, -26}
, {47, -76, 2}
, {26, -24, -25}
, {-15, -16, -36}
, {-74, 20, -66}
, {-20, -118, -37}
, {-92, -37, 25}
, {-112, 12, -4}
, {134, 25, 84}
, {-64, 94, -24}
, {-158, -119, -99}
, {-67, -149, -178}
, {-6, 18, -202}
, {-74, -48, -52}
, {-72, -32, -2}
, {48, 30, -69}
, {86, 58, 42}
, {-144, -8, 4}
, {1, -60, -164}
, {-31, 78, 94}
, {-46, -80, -3}
, {59, 52, 73}
, {107, 109, -32}
, {22, -60, -2}
, {-159, -95, -141}
, {-127, -83, 36}
, {55, 79, 16}
, {24, -24, -215}
, {-40, 62, 108}
}
, {{73, -28, -20}
, {7, 109, 7}
, {52, -110, -76}
, {16, -17, 52}
, {27, 73, -42}
, {1, 9, -68}
, {-3, -83, 41}
, {71, 80, 99}
, {97, 55, 38}
, {-33, 12, -25}
, {70, 13, 87}
, {81, -12, 41}
, {-126, -3, 95}
, {58, -79, -83}
, {2, -80, -99}
, {-61, -46, 67}
, {91, -15, 66}
, {91, 20, 103}
, {-85, -108, -28}
, {-19, 38, 116}
, {79, -31, 10}
, {-129, -71, -102}
, {-37, 41, 17}
, {31, 115, -25}
, {-81, -3, 28}
, {-34, -57, 25}
, {34, 46, 119}
, {-28, 38, -74}
, {67, -55, -34}
, {65, -7, -72}
, {29, -70, -97}
, {-98, -15, -113}
}
, {{74, -56, -139}
, {-76, 43, 52}
, {56, 34, -125}
, {-11, 5, 32}
, {-36, -44, 44}
, {29, 47, -82}
, {-62, 57, 80}
, {-3, 53, 93}
, {84, -103, -34}
, {-21, 127, 157}
, {-85, 9, -45}
, {75, 99, -74}
, {-62, 17, -61}
, {44, -87, 41}
, {18, 59, -21}
, {74, 79, 107}
, {66, 33, 48}
, {40, -92, -19}
, {46, -73, -110}
, {-88, 103, 3}
, {70, 120, 113}
, {-74, -47, -103}
, {-66, 58, 98}
, {-51, 41, 33}
, {-90, -125, -28}
, {-117, -92, -30}
, {26, 25, 91}
, {40, 65, -77}
, {-56, 53, 54}
, {-44, -106, 110}
, {-10, -20, 19}
, {-45, -120, -67}
}
, {{85, 116, 129}
, {-72, -47, 36}
, {19, 108, -3}
, {-66, -68, -95}
, {4, -6, -14}
, {2, 67, 3}
, {10, -71, -80}
, {-58, 71, 4}
, {47, 0, 21}
, {-134, -69, -83}
, {-58, -66, 14}
, {113, 185, 86}
, {40, -13, 5}
, {-131, -40, -166}
, {8, -148, -63}
, {-189, -169, -176}
, {-29, 111, 92}
, {4, 106, -55}
, {-17, 2, 73}
, {-4, -91, 43}
, {-70, 31, -86}
, {-70, -65, -121}
, {122, 37, 99}
, {159, -29, 85}
, {23, -62, 53}
, {185, 98, 121}
, {24, 107, -51}
, {-13, -48, -73}
, {36, 26, 60}
, {55, 80, 77}
, {-4, -7, -28}
, {66, 41, 72}
}
, {{15, 37, -15}
, {14, 138, 131}
, {-108, 0, -126}
, {-13, -40, 44}
, {107, 24, 21}
, {-45, 51, -2}
, {-36, 79, 68}
, {-48, -12, 59}
, {69, 123, 110}
, {4, -7, 160}
, {105, 51, 65}
, {-45, -59, -109}
, {-61, 62, 73}
, {-53, -74, -67}
, {12, -116, -32}
, {37, 3, 19}
, {-98, 71, 9}
, {-39, -16, -73}
, {23, -8, 12}
, {-28, 127, 26}
, {-56, 13, 83}
, {-56, -91, 0}
, {76, -36, -112}
, {-26, 71, -16}
, {-76, 30, -49}
, {-83, -74, 52}
, {18, -30, -30}
, {-52, 22, -68}
, {17, 88, -31}
, {35, -6, 25}
, {-1, -57, 52}
, {17, 31, -16}
}
, {{52, 41, 86}
, {-70, -12, 76}
, {-41, 47, 81}
, {-52, -41, -89}
, {-30, 26, -47}
, {51, 61, -22}
, {32, 2, -17}
, {53, -10, -26}
, {-25, -9, -15}
, {-9, -104, -116}
, {-7, 54, 72}
, {-11, 118, -31}
, {-113, 63, -34}
, {51, 94, 51}
, {100, -25, 83}
, {8, 76, -76}
, {-88, 6, 51}
, {-38, 38, -25}
, {-63, -79, -5}
, {8, -24, -3}
, {-70, -114, 4}
, {53, -3, 38}
, {23, -79, 21}
, {60, 8, 47}
, {-115, -121, 27}
, {41, 68, 89}
, {-70, 22, -60}
, {-95, -86, -27}
, {-118, -68, 40}
, {-76, 9, -25}
, {21, 34, 21}
, {-113, 12, -97}
}
, {{-39, -62, 92}
, {41, -112, -134}
, {-134, -119, -16}
, {-65, 23, -50}
, {-14, 30, -73}
, {-36, 34, -39}
, {80, 15, -70}
, {-53, -11, -51}
, {-83, 2, -101}
, {100, 47, 131}
, {39, -102, -86}
, {26, -38, 138}
, {90, -68, -30}
, {-222, -121, -5}
, {-36, 100, -67}
, {17, 29, 64}
, {95, -68, -7}
, {58, -19, -17}
, {-79, -46, 22}
, {-31, 53, -23}
, {135, 119, 1}
, {-179, -213, -146}
, {3, -7, -13}
, {-47, -17, 70}
, {40, 26, 85}
, {-20, -114, 31}
, {45, 11, 31}
, {-100, -75, 7}
, {-121, -101, -44}
, {-44, 64, 44}
, {-13, -189, -60}
, {-23, 73, 36}
}
, {{-99, 0, -52}
, {-41, -63, -50}
, {24, -36, -60}
, {-67, -8, -74}
, {-99, -110, -106}
, {-52, -21, -54}
, {-106, -42, -26}
, {-23, 56, -120}
, {64, -51, 105}
, {47, -39, 98}
, {-63, 16, 57}
, {-189, -55, -229}
, {-96, -129, -87}
, {115, 68, 86}
, {14, 24, -16}
, {39, -48, 52}
, {85, -18, -72}
, {-138, -55, -43}
, {28, -63, 38}
, {21, 38, -36}
, {86, -30, -12}
, {5, 99, 107}
, {40, 64, -129}
, {-54, 17, -41}
, {-17, 62, -69}
, {-87, -30, 3}
, {-44, 16, -88}
, {-48, 69, 19}
, {-117, -17, -39}
, {-34, -158, -166}
, {105, -23, 72}
, {-19, -51, -118}
}
, {{76, -21, -2}
, {128, 152, 86}
, {-135, 59, -38}
, {-7, -85, -66}
, {43, 91, -4}
, {21, -38, 89}
, {-78, -19, 38}
, {83, 13, 46}
, {117, 102, 103}
, {-36, 59, -40}
, {21, 116, 127}
, {-3, -22, -47}
, {48, 58, 56}
, {39, 59, -34}
, {-136, -115, -75}
, {6, -36, -26}
, {-60, -97, 13}
, {51, 50, 17}
, {68, -26, 119}
, {80, 43, -31}
, {31, 43, -68}
, {-17, 44, 0}
, {-39, -133, 82}
, {-93, 18, 77}
, {25, 23, -41}
, {73, -5, 58}
, {97, 98, 41}
, {23, -75, -36}
, {-46, 22, 53}
, {51, 23, -59}
, {-94, 20, -82}
, {17, 42, -87}
}
, {{107, 51, 32}
, {116, 97, -33}
, {147, -29, -86}
, {110, 55, -83}
, {-23, 96, -51}
, {-39, 21, 75}
, {53, 37, -113}
, {74, -59, 90}
, {83, 86, 93}
, {29, 51, -37}
, {-16, 48, -14}
, {62, -88, -28}
, {48, -57, -24}
, {-36, -50, -2}
, {-237, -125, 0}
, {30, -112, 11}
, {71, -124, 10}
, {58, 31, 102}
, {109, -47, -38}
, {-12, -32, -63}
, {-59, -34, -19}
, {94, -3, -24}
, {-87, -159, 64}
, {-92, 10, -54}
, {20, -51, -50}
, {116, 13, 13}
, {10, -87, 21}
, {58, -102, 61}
, {-56, -62, 60}
, {-55, 73, -30}
, {66, -52, 1}
, {70, 54, -153}
}
, {{6, 39, 123}
, {-68, -46, 35}
, {21, -36, 92}
, {54, 74, -54}
, {-28, -8, 75}
, {-8, -51, 90}
, {67, 19, 18}
, {-85, -61, 51}
, {88, -93, -2}
, {-59, -25, -159}
, {-12, -73, -59}
, {29, 31, 129}
, {-16, 88, 56}
, {-4, 58, -69}
, {22, -20, 121}
, {-6, -9, 20}
, {-72, -66, -26}
, {23, -57, -67}
, {-6, 52, 16}
, {49, -31, -86}
, {-110, -116, -90}
, {24, -86, -35}
, {19, 88, -80}
, {-117, -25, -62}
, {90, 91, -34}
, {-16, 43, 31}
, {-26, 22, -36}
, {-80, -43, -44}
, {-87, -5, -119}
, {80, 36, -3}
, {18, 54, 52}
, {50, -15, -79}
}
, {{46, 124, 4}
, {64, 41, 77}
, {39, 136, -75}
, {37, -35, 30}
, {60, -29, -57}
, {39, 93, -77}
, {-23, 0, 78}
, {-93, -63, 106}
, {-70, -14, -46}
, {6, -106, -62}
, {-35, -55, 40}
, {-134, 199, -6}
, {40, -63, 65}
, {-25, -34, 10}
, {-33, -84, -22}
, {-10, 19, -67}
, {-102, 126, 143}
, {102, -13, -118}
, {67, -22, -84}
, {-91, -91, 125}
, {32, -69, 79}
, {41, 63, 42}
, {25, 4, 27}
, {50, 56, -11}
, {-68, 20, -53}
, {71, 39, 23}
, {-100, -21, -2}
, {41, -8, 11}
, {-1, -80, -40}
, {-38, -51, -6}
, {72, -38, 37}
, {35, -19, -63}
}
, {{76, -24, 54}
, {74, 118, 35}
, {32, 79, -59}
, {23, 76, 78}
, {98, 95, -39}
, {4, 61, -15}
, {28, -44, -86}
, {50, 54, 15}
, {-50, 95, 95}
, {74, -11, 134}
, {32, 22, -14}
, {-70, -57, -142}
, {-83, 50, -115}
, {-49, -45, 3}
, {12, 29, 63}
, {8, -58, -78}
, {-47, -21, -106}
, {-80, -42, 45}
, {35, 73, -11}
, {114, 75, -45}
, {-50, -39, -23}
, {-113, 21, -12}
, {-55, -103, 54}
, {-80, -18, -93}
, {16, -6, 6}
, {92, -73, 34}
, {16, 69, -46}
, {-19, -50, -76}
, {-29, 71, -35}
, {-44, -33, -16}
, {-12, -16, -112}
, {47, -62, 22}
}
, {{-82, 0, -42}
, {47, 0, -27}
, {-4, -36, 86}
, {2, 71, 28}
, {78, -36, 93}
, {-52, -20, -8}
, {-104, 87, 50}
, {-57, 83, -29}
, {-39, -33, -28}
, {-82, 54, -72}
, {-70, -62, -69}
, {-21, 16, 69}
, {32, 69, 81}
, {34, 108, 76}
, {5, -153, -40}
, {-97, -24, -159}
, {-47, -30, 13}
, {-48, -11, 84}
, {-71, -96, -51}
, {29, 5, -45}
, {-61, 8, -25}
, {0, 99, -2}
, {20, 38, 13}
, {-80, -7, -57}
, {67, -44, 32}
, {112, 83, -29}
, {80, 27, 20}
, {-30, -37, 14}
, {-104, 8, 32}
, {90, -19, 10}
, {-66, -1, -98}
, {-21, 68, 111}
}
, {{-124, -170, -88}
, {90, 133, -29}
, {-92, -61, -108}
, {-2, 74, 51}
, {-18, 123, 82}
, {-51, -67, -90}
, {30, -56, 16}
, {7, 5, 73}
, {83, 56, -5}
, {-66, 56, -3}
, {-5, -6, 29}
, {-25, -73, -86}
, {-12, -4, 114}
, {68, 23, 35}
, {100, 132, 148}
, {42, -54, -79}
, {-153, -77, -108}
, {-28, -65, 111}
, {76, -44, -36}
, {37, 116, 57}
, {-96, 2, -41}
, {-83, -87, 0}
, {-27, -95, -49}
, {15, 25, -56}
, {64, 58, 48}
, {-79, -76, -145}
, {25, -2, 81}
, {-82, -43, -116}
, {62, -15, 65}
, {29, 24, 44}
, {32, 11, 67}
, {27, -117, -54}
}
, {{-24, 29, -1}
, {-4, 39, -112}
, {-40, -155, -33}
, {49, -31, -17}
, {-58, 10, -77}
, {1, -16, -44}
, {25, 23, -19}
, {-12, -98, 8}
, {-75, 23, -152}
, {79, 0, -21}
, {-67, 44, 46}
, {-109, 78, 74}
, {-62, 56, -37}
, {-103, -33, -4}
, {92, 46, 9}
, {54, 4, 17}
, {18, -79, 77}
, {-24, -23, 5}
, {95, -7, -85}
, {-65, -111, -72}
, {82, 117, -27}
, {12, -92, -7}
, {20, 26, 119}
, {51, 92, -36}
, {6, 96, -1}
, {-51, 23, 7}
, {60, 68, 118}
, {-79, -46, -39}
, {-82, -25, -90}
, {68, 101, 12}
, {-1, -39, -78}
, {45, 11, 0}
}
, {{39, 128, 179}
, {43, 37, -71}
, {-16, 138, 194}
, {-9, 79, -104}
, {9, -89, 17}
, {-51, -47, -47}
, {55, -8, -60}
, {100, -22, 54}
, {-40, -30, -110}
, {-46, -54, -52}
, {-72, -60, -59}
, {-164, 82, 96}
, {116, -45, -77}
, {-9, -70, -1}
, {14, 60, -27}
, {5, 54, -18}
, {-127, -80, 71}
, {1, 93, -37}
, {55, -25, -64}
, {61, 10, -15}
, {60, -35, 9}
, {-133, -94, 19}
, {7, -141, 51}
, {-84, 74, 1}
, {68, 67, -95}
, {-5, 36, -27}
, {-95, -57, -32}
, {31, 102, -16}
, {-37, -7, -66}
, {59, -82, -67}
, {-119, -71, 69}
, {87, -33, -15}
}
, {{-30, 85, 34}
, {51, -30, 83}
, {-20, -55, 63}
, {-4, 13, -65}
, {62, 76, 20}
, {49, 58, -59}
, {-19, -85, 109}
, {64, 16, -66}
, {24, -5, 122}
, {39, 60, 42}
, {-46, -10, -5}
, {105, 73, 53}
, {21, -44, -74}
, {-14, -71, 73}
, {31, 69, 17}
, {49, 26, -26}
, {19, -58, -74}
, {17, -14, -78}
, {30, 34, -36}
, {70, 66, 159}
, {95, 37, 49}
, {3, 91, 21}
, {-93, -79, -26}
, {58, -39, 83}
, {-117, -118, 8}
, {-99, -29, -31}
, {-48, -70, -97}
, {72, -58, 60}
, {-58, 21, 89}
, {-7, -95, -42}
, {0, -108, -38}
, {-46, -2, 39}
}
, {{114, -15, -37}
, {96, 68, -129}
, {70, -11, -107}
, {58, -70, 52}
, {43, -44, -85}
, {-33, 10, 89}
, {73, -11, -5}
, {8, -89, 9}
, {-50, -50, -145}
, {39, 60, 89}
, {21, -81, -121}
, {-8, 105, -110}
, {104, 79, 59}
, {-8, 11, -28}
, {45, 6, 61}
, {-4, 46, 124}
, {24, 17, 78}
, {-5, -47, -149}
, {15, -16, -142}
, {93, -67, 27}
, {-18, 59, 108}
, {-7, 62, -16}
, {28, -17, -28}
, {-74, -63, -142}
, {-67, -46, 31}
, {24, 36, -79}
, {70, 22, -154}
, {-7, -14, -118}
, {-45, -94, -122}
, {59, -62, -43}
, {36, -20, 62}
, {83, -75, -89}
}
, {{-35, -85, 41}
, {74, -45, 14}
, {-110, -17, -33}
, {-40, 37, 42}
, {69, 71, -46}
, {-24, -41, 31}
, {102, -46, -33}
, {-59, -39, -16}
, {-36, -60, -78}
, {55, -27, -68}
, {-45, -40, 33}
, {-57, 71, 23}
, {86, 25, 43}
, {120, 73, -45}
, {51, 3, 49}
, {3, -75, -130}
, {23, -58, -41}
, {89, -78, 47}
, {40, 70, 54}
, {79, -61, 71}
, {-10, -83, -13}
, {3, -52, -36}
, {-61, -57, -17}
, {-2, -102, 83}
, {-22, 18, 95}
, {-75, -99, -29}
, {18, 17, 4}
, {-49, -21, 101}
, {-51, 37, -64}
, {55, -4, -43}
, {-5, 71, -34}
, {93, -6, 46}
}
, {{-144, -47, -97}
, {104, 0, 51}
, {-23, 24, 21}
, {-1, 46, 78}
, {95, 71, 54}
, {69, 56, 1}
, {-22, 20, -30}
, {135, 107, 3}
, {43, 12, 135}
, {17, 36, 82}
, {-60, 86, -62}
, {-96, -215, -147}
, {-41, 92, 66}
, {-56, -9, -80}
, {-57, -105, -81}
, {-75, 23, 34}
, {35, -82, -31}
, {68, 101, 100}
, {17, -17, -95}
, {121, 94, -54}
, {-30, 61, 53}
, {-4, 26, 65}
, {19, -15, 1}
, {78, -101, 40}
, {-4, -41, 37}
, {-107, -76, 9}
, {85, 49, -33}
, {27, -54, -30}
, {53, 25, 94}
, {-12, -89, -33}
, {-51, 74, 0}
, {-62, 45, -122}
}
, {{8, -33, 131}
, {-73, -84, 90}
, {56, 35, 5}
, {-24, -11, 32}
, {29, 9, -67}
, {70, 0, 40}
, {-43, 9, 74}
, {-4, -53, -21}
, {-111, 76, 58}
, {-54, -117, -65}
, {-115, -82, 4}
, {14, 114, 66}
, {48, 17, 79}
, {51, 64, 14}
, {-7, 39, -58}
, {-35, -28, -38}
, {123, 71, -13}
, {-145, -65, -53}
, {-49, -92, 112}
, {-5, -67, 24}
, {-85, -100, -129}
, {-52, -14, 57}
, {61, 101, -3}
, {-43, -20, -75}
, {-103, -83, 104}
, {-54, 30, 79}
, {-96, 45, -31}
, {21, 0, 6}
, {-113, 38, 67}
, {-102, 72, -73}
, {12, 56, 133}
, {50, -12, 89}
}
}
;

#undef INPUT_CHANNELS
#undef CONV_FILTERS
#undef CONV_KERNEL_SIZE
/**
  ******************************************************************************
  * @file    maxpool.cc
  * @author  Pierre-Emmanuel Novac <penovac@unice.fr>, LEAT, CNRS, Université Côte d'Azur, France
  * @version 1.0.0
  * @date    24 march 2020
  * @brief   Template generating plain C code for the implementation of Convolutional Neural Networks on MCU
  */

#ifndef SINGLE_FILE
#include "number.h"
#endif

#define INPUT_CHANNELS  32
#define INPUT_SAMPLES   21
#define POOL_SIZE       4
#define POOL_STRIDE     4
#define POOL_PAD        0 // Unsupported
#define POOL_LENGTH	    ( ( (INPUT_SAMPLES - POOL_SIZE + (2*POOL_PAD) ) / POOL_STRIDE ) + 1 )

#define ACTIVATION_LINEAR

typedef number_t max_pooling1d_3_output_type[INPUT_CHANNELS][POOL_LENGTH];

static inline void max_pooling1d_3(
  const number_t input[INPUT_CHANNELS][INPUT_SAMPLES], 	    // IN
  number_t output[INPUT_CHANNELS][POOL_LENGTH]) {	// OUT

  unsigned short pos_x, k; 	// loop indexes for output volume
  unsigned int x;
  number_t max, tmp; 

  for (k = 0; k < INPUT_CHANNELS; k++) 
    for (pos_x = 0; pos_x < POOL_LENGTH; pos_x++) {
#ifdef ACTIVATION_LINEAR
      max = input[k][pos_x*POOL_STRIDE];
      x = 1;
#elif defined(ACTIVATION_RELU)
      max = 0;
      x = 0;
#endif
      for (; x < POOL_SIZE; x++) {
        tmp = input[k][(pos_x*POOL_STRIDE)+x]; 
        if (max < tmp)
          max = tmp;
      }
      output[k][pos_x] = max; 
    }
}

#undef INPUT_CHANNELS  
#undef INPUT_SAMPLES
#undef POOL_SIZE
#undef POOL_STRIDE
#undef POOL_PAD
#undef POOL_LENGTH
#undef ACTIVATION_LINEAR
/**
  ******************************************************************************
  * @file    conv.cc
  * @author  Pierre-Emmanuel Novac <penovac@unice.fr>, LEAT, CNRS, Université Côte d'Azur, France
  * @version 1.0.0
  * @date    24 march 2020
  * @brief   Template generating plain C code for the implementation of Convolutional Neural Networks on MCU
  */

#ifndef SINGLE_FILE
#include "number.h"
#endif

#define INPUT_CHANNELS      32
#define INPUT_SAMPLES       5
#define CONV_FILTERS        32
#define CONV_KERNEL_SIZE    3
#define CONV_STRIDE         1

#define ZEROPADDING_LEFT    0
#define ZEROPADDING_RIGHT   0

#define CONV_OUTSAMPLES     ( ( (INPUT_SAMPLES - CONV_KERNEL_SIZE + ZEROPADDING_LEFT + ZEROPADDING_RIGHT) / CONV_STRIDE ) + 1 )

#define ACTIVATION_RELU

typedef number_t conv1d_3_output_type[CONV_FILTERS][CONV_OUTSAMPLES];

static inline void conv1d_3(
  const number_t input[INPUT_CHANNELS][INPUT_SAMPLES],               // IN
  const number_t kernel[CONV_FILTERS][INPUT_CHANNELS][CONV_KERNEL_SIZE], // IN

  const number_t bias[CONV_FILTERS],						                // IN

  number_t output[CONV_FILTERS][CONV_OUTSAMPLES]) {               // OUT

  unsigned short pos_x, z, k; 	// loop indexes for output volume
  unsigned short x;
  short input_x;
  long_number_t	kernel_mac;
  static long_number_t	output_acc[CONV_OUTSAMPLES];
  long_number_t tmp;

  for (k = 0; k < CONV_FILTERS; k++) { 
    for (pos_x = 0; pos_x < CONV_OUTSAMPLES; pos_x++) { 
      output_acc[pos_x] = 0;
	    for (z = 0; z < INPUT_CHANNELS; z++) {

        kernel_mac = 0; 
        for (x = 0; x < CONV_KERNEL_SIZE; x++) {
          input_x = pos_x * CONV_STRIDE - ZEROPADDING_LEFT + x;
          if (input_x < 0 || input_x >= INPUT_SAMPLES) // ZeroPadding1D
            tmp = 0;
          else
            tmp = input[z][input_x] * kernel[k][z][x]; 
          kernel_mac = kernel_mac + tmp; 
        }

	      output_acc[pos_x] = output_acc[pos_x] + kernel_mac; 
      }
      output_acc[pos_x] = scale_number_t(output_acc[pos_x]);

      output_acc[pos_x] = output_acc[pos_x] + bias[k]; 

    }

    for (pos_x = 0; pos_x < CONV_OUTSAMPLES; pos_x++) {
#ifdef ACTIVATION_LINEAR
      output[k][pos_x] = clamp_to_number_t(output_acc[pos_x]);
#elif defined(ACTIVATION_RELU)
      // Activation function: ReLU
      if (output_acc[pos_x] < 0)
        output[k][pos_x] = 0;
      else
        output[k][pos_x] = clamp_to_number_t(output_acc[pos_x]);
#endif
    }
  }
}

#undef INPUT_CHANNELS
#undef INPUT_SAMPLES
#undef CONV_FILTERS
#undef CONV_KERNEL_SIZE
#undef CONV_STRIDE
#undef ZEROPADDING_LEFT
#undef ZEROPADDING_RIGHT
#undef CONV_OUTSAMPLES
#undef ACTIVATION_RELU
/**
  ******************************************************************************
  * @file    weights/conv.cc
  * @author  Pierre-Emmanuel Novac <penovac@unice.fr>, LEAT, CNRS, Université Côte d'Azur, France
  * @version 1.0.0
  * @date    24 march 2020
  * @brief   Template generating plain C code for the implementation of Convolutional Neural Networks on MCU
  */

#define INPUT_CHANNELS    32
#define CONV_FILTERS      32
#define CONV_KERNEL_SIZE  3


const int16_t conv1d_3_bias[CONV_FILTERS] = {167, 1, -35, 77, 158, -28, -25, -16, -27, 11, 10, 164, 107, 3, 99, -3, 69, 61, 49, 41, 17, 41, -24, 86, 36, -33, -75, 72, 37, -33, 114, 30}
;

const int16_t conv1d_3_kernel[CONV_FILTERS][INPUT_CHANNELS][CONV_KERNEL_SIZE] = {{{-224, -204, -77}
, {66, 113, 127}
, {-180, -175, -151}
, {105, 56, 206}
, {168, 167, 134}
, {3, 50, -75}
, {-86, -23, -42}
, {-44, -163, -44}
, {48, 87, 131}
, {-53, -93, 32}
, {20, 66, -6}
, {-131, -159, -190}
, {-241, -151, -48}
, {-199, -146, -147}
, {-41, -50, 39}
, {-23, -104, -68}
, {11, -33, -12}
, {-28, -116, -122}
, {64, -32, -98}
, {3, 12, 85}
, {50, -20, -28}
, {-206, -143, -36}
, {40, 103, 38}
, {-37, 22, -122}
, {111, 86, 18}
, {59, 0, -60}
, {-34, 106, 93}
, {-25, 187, 243}
, {23, 44, 1}
, {26, 121, 81}
, {20, 6, -128}
, {-138, -186, -30}
}
, {{-6, 69, 107}
, {123, 153, 140}
, {-24, -11, -1}
, {-93, -74, -74}
, {140, 98, 104}
, {-34, -7, 39}
, {43, -6, 58}
, {18, -22, -57}
, {-80, 13, -38}
, {-26, 34, 17}
, {23, 74, -46}
, {-66, -79, 26}
, {13, 59, -21}
, {21, 127, 66}
, {24, -44, -68}
, {-27, 30, 3}
, {110, 296, 164}
, {55, 32, 35}
, {17, -34, -35}
, {-78, -156, -170}
, {38, -56, -84}
, {60, 21, -44}
, {-156, -78, -105}
, {19, -101, 2}
, {-44, -22, -51}
, {1, -74, -45}
, {4, -32, 101}
, {68, 76, 46}
, {70, 111, 48}
, {-73, -139, -141}
, {-50, 25, 37}
, {-137, -135, -41}
}
, {{33, 48, 88}
, {52, 45, -40}
, {-65, -24, -26}
, {21, 22, -28}
, {13, -86, 79}
, {-71, 34, 85}
, {-38, 42, 38}
, {-71, 0, -7}
, {-30, 71, -4}
, {-44, 10, -12}
, {99, 41, 40}
, {32, -22, 103}
, {22, 38, 87}
, {1, 18, -16}
, {-62, -55, 48}
, {-15, 54, -135}
, {-39, -64, -125}
, {66, 9, -84}
, {-140, 48, 102}
, {-60, 0, 24}
, {0, -60, -41}
, {-37, -30, 42}
, {-9, -111, 32}
, {60, 16, 22}
, {-109, 23, 99}
, {23, -7, -25}
, {-3, -15, -26}
, {-98, -96, 38}
, {11, 48, -28}
, {-81, -79, 46}
, {-129, -77, 10}
, {75, 63, -22}
}
, {{-187, -240, -165}
, {46, 12, 38}
, {-8, 18, -25}
, {94, 64, 75}
, {48, 7, 144}
, {-17, 19, 77}
, {-76, -49, -111}
, {-17, 127, 7}
, {-20, -160, -223}
, {77, -40, -73}
, {67, 93, 98}
, {73, -35, -75}
, {22, -33, 72}
, {-91, -37, -4}
, {-50, -90, -37}
, {-139, -178, -103}
, {77, 98, 13}
, {-9, -43, 5}
, {-91, -15, 2}
, {18, -74, -15}
, {70, 48, 94}
, {65, 28, -27}
, {-11, -14, -82}
, {-52, -12, 38}
, {-83, -13, -2}
, {19, -10, -20}
, {100, 35, 75}
, {56, 7, -64}
, {42, -29, 58}
, {-5, -33, 78}
, {-30, -126, -102}
, {96, 80, -4}
}
, {{-22, 6, -13}
, {-46, 53, 14}
, {57, 11, 55}
, {-9, -28, 5}
, {138, 42, -25}
, {-102, -67, -94}
, {15, -33, -37}
, {-16, -93, -120}
, {95, 112, 26}
, {-14, -32, 68}
, {35, 9, 104}
, {65, 13, -21}
, {-80, 20, 35}
, {-100, 80, 33}
, {56, 26, 50}
, {-141, -80, -5}
, {-105, -84, -92}
, {48, 26, 0}
, {-59, 30, 82}
, {-113, -225, -60}
, {-108, -58, 103}
, {-79, -51, -129}
, {119, 75, -12}
, {53, 33, 26}
, {-41, 94, 70}
, {-24, 43, 120}
, {-126, -227, -178}
, {-12, 116, -64}
, {-209, -155, -98}
, {1, 141, 40}
, {-72, 51, 4}
, {-2, -82, -91}
}
, {{49, 85, 83}
, {-147, -120, -114}
, {17, 13, 60}
, {-197, -122, 10}
, {59, -26, 36}
, {45, 27, -58}
, {-20, 30, -20}
, {-68, 52, 47}
, {173, 82, 15}
, {96, 53, 96}
, {51, -61, 40}
, {69, 74, 112}
, {-23, 0, -40}
, {53, 105, 38}
, {-67, 52, 17}
, {-83, -80, -106}
, {-52, 5, -134}
, {25, -1, -3}
, {47, 11, -37}
, {54, -27, 40}
, {80, 75, 20}
, {107, 79, 79}
, {10, 4, -4}
, {90, 5, -69}
, {4, -43, -83}
, {-31, -65, -14}
, {104, 142, 83}
, {-1, 113, 71}
, {-33, 28, -15}
, {49, -30, 85}
, {-87, 59, -42}
, {10, 74, 116}
}
, {{-15, -137, -161}
, {46, 80, 4}
, {13, -102, 61}
, {-74, -56, -68}
, {-93, -83, -8}
, {-49, -85, -78}
, {-15, -54, 5}
, {8, 47, -69}
, {-40, 75, 73}
, {12, -71, 71}
, {-2, -32, 56}
, {53, 42, 6}
, {-110, -67, -82}
, {34, -68, -16}
, {-141, 14, -79}
, {48, 7, 65}
, {12, 34, 18}
, {-18, 36, 13}
, {37, -38, -73}
, {-50, -92, -12}
, {0, 39, 46}
, {10, -74, 18}
, {-71, -8, -29}
, {-82, 50, 8}
, {-72, -85, -70}
, {0, -11, 75}
, {-101, -120, 12}
, {29, 17, -75}
, {17, -94, -90}
, {43, -79, -125}
, {-65, -65, -104}
, {-63, 66, -17}
}
, {{14, 61, 86}
, {-32, -24, -94}
, {-27, 89, 30}
, {-5, -15, -33}
, {45, -140, -54}
, {30, 7, -102}
, {-48, 11, 76}
, {55, 20, 58}
, {-78, -36, 56}
, {-30, 111, -49}
, {-16, 37, -48}
, {-78, 16, 4}
, {55, -23, 65}
, {87, -33, 33}
, {77, 34, -31}
, {-20, 0, -35}
, {94, 74, 48}
, {-16, 2, 5}
, {-5, 10, 4}
, {-30, 8, -53}
, {-34, -24, 25}
, {-41, -9, -20}
, {-121, -34, -66}
, {43, -61, 45}
, {33, 43, -4}
, {-28, 161, 130}
, {134, -54, 42}
, {-38, -8, -76}
, {63, 22, -79}
, {-58, -46, -79}
, {-106, 25, -66}
, {-8, 1, -3}
}
, {{-18, 72, 24}
, {153, -3, 28}
, {10, -16, -46}
, {-233, -34, -108}
, {-35, -108, 43}
, {-17, 2, -37}
, {-37, 64, -63}
, {28, 32, 29}
, {-74, -56, -128}
, {-25, 10, 6}
, {-91, 96, -68}
, {-93, 71, 69}
, {-53, 132, 20}
, {-64, 74, -76}
, {-18, 69, 46}
, {13, -77, -87}
, {68, 43, 56}
, {-17, -161, -105}
, {63, -54, 55}
, {48, -75, -18}
, {64, 10, 58}
, {34, 17, 86}
, {133, 25, 123}
, {-120, -107, 34}
, {-54, 38, 1}
, {31, 14, -16}
, {108, -109, 98}
, {21, -134, -5}
, {115, -30, 81}
, {67, -96, 29}
, {75, -99, 70}
, {71, 57, -29}
}
, {{-99, -7, 18}
, {102, 151, -22}
, {110, 1, 95}
, {-2, 56, -66}
, {71, 87, 18}
, {31, -74, 72}
, {110, 41, 99}
, {-115, -44, -138}
, {-25, -93, -70}
, {15, -78, -109}
, {-7, -73, -96}
, {-35, 25, -21}
, {-57, -111, -91}
, {5, 70, 123}
, {49, 76, -9}
, {88, 41, 27}
, {98, 8, 105}
, {28, -28, 58}
, {-21, 59, -22}
, {26, -102, -1}
, {-9, 44, -51}
, {93, 36, -24}
, {-82, 28, -53}
, {-76, -5, -44}
, {-64, -44, -58}
, {71, -3, -5}
, {27, 67, 29}
, {-124, -17, -75}
, {-63, -57, -72}
, {-67, 14, -81}
, {32, -31, 56}
, {-67, -49, -82}
}
, {{107, 47, 77}
, {76, 57, 96}
, {1, 113, 3}
, {22, -40, -34}
, {-91, -37, -5}
, {-47, 5, 113}
, {87, 10, 72}
, {7, 4, 5}
, {-124, -198, -241}
, {-23, -63, -45}
, {-93, -52, -56}
, {-25, 81, 65}
, {-35, 19, -11}
, {46, 54, 66}
, {18, 57, 112}
, {99, 80, 18}
, {7, 66, 78}
, {18, 34, -38}
, {25, -43, 107}
, {41, 37, 43}
, {-131, 44, 32}
, {2, -35, -51}
, {-15, 83, 46}
, {-36, 91, -59}
, {-30, -17, -34}
, {94, 1, 80}
, {43, 45, -54}
, {87, 44, -12}
, {-16, -41, -31}
, {-55, 56, 66}
, {69, 7, -16}
, {48, -1, -20}
}
, {{-21, -4, -108}
, {5, 89, 12}
, {-62, -77, -165}
, {-167, -195, -68}
, {99, 189, 161}
, {-119, -18, -109}
, {-154, 40, -44}
, {96, 63, 104}
, {23, 12, 66}
, {-6, 43, 31}
, {95, 134, 126}
, {-125, -100, -73}
, {-31, 8, -146}
, {-16, -71, 10}
, {-85, 90, 84}
, {-186, -114, -97}
, {201, 134, 125}
, {-68, -139, -94}
, {-31, -16, 11}
, {-210, -100, -99}
, {17, 36, -18}
, {-14, -93, -173}
, {-121, 39, -29}
, {97, -43, -15}
, {-68, 86, 93}
, {-11, -1, 37}
, {-57, -43, 16}
, {-32, 50, -32}
, {224, 72, 80}
, {58, 106, 59}
, {-123, 0, -28}
, {60, -92, -35}
}
, {{-129, -42, -21}
, {-40, -7, -53}
, {-89, 34, -19}
, {18, 9, -131}
, {147, 190, 187}
, {15, 2, -86}
, {9, -16, 21}
, {-120, 30, -59}
, {52, 5, 14}
, {42, 38, -71}
, {77, 36, 88}
, {-109, -38, -18}
, {-86, -163, -168}
, {30, 88, 50}
, {-16, -21, 34}
, {-18, -16, 51}
, {-120, 32, -5}
, {-25, 18, 76}
, {53, -43, -33}
, {-16, -33, -53}
, {91, 54, 15}
, {-46, -81, -114}
, {0, 74, -23}
, {-44, -58, -91}
, {29, 58, -55}
, {48, 44, 78}
, {-29, 46, -113}
, {73, 54, 6}
, {-171, 38, -109}
, {79, -79, 32}
, {-80, -131, -92}
, {-17, -120, 20}
}
, {{-33, 27, 50}
, {90, -9, 20}
, {-37, -84, -13}
, {-51, -21, -132}
, {84, -9, 34}
, {0, -5, 78}
, {-75, -49, -74}
, {104, -21, 21}
, {26, 14, -57}
, {61, 79, -61}
, {-34, -5, 26}
, {1, -3, 56}
, {77, -24, 37}
, {-7, 7, 27}
, {-62, 47, -102}
, {33, 2, -46}
, {88, 41, 97}
, {-76, 27, -20}
, {-96, 56, -91}
, {-24, -49, 8}
, {131, -3, -8}
, {132, -29, 114}
, {38, 3, -4}
, {-59, -80, 18}
, {-59, 124, 85}
, {63, -147, 103}
, {68, 38, 40}
, {-21, -49, -68}
, {44, -65, 178}
, {25, 98, -17}
, {85, 104, -86}
, {-32, -93, 4}
}
, {{12, -199, -125}
, {-140, -30, -145}
, {-38, -53, -80}
, {-166, -100, 19}
, {180, 104, 79}
, {-67, 32, 72}
, {36, -66, -22}
, {157, 171, 63}
, {19, 11, -2}
, {54, 50, 37}
, {-62, 122, 22}
, {-23, -108, -15}
, {-40, -51, -64}
, {75, 17, 18}
, {-46, -103, 36}
, {-78, -130, -24}
, {-13, 58, -26}
, {-130, -34, -39}
, {20, -122, -9}
, {-33, -139, 1}
, {-69, -52, 1}
, {-128, -64, -73}
, {140, -73, 71}
, {-45, -37, 63}
, {57, -67, 111}
, {111, 104, 15}
, {-12, 11, 19}
, {5, 28, 46}
, {-17, 129, -19}
, {27, 56, -25}
, {45, -118, 91}
, {-3, -93, -6}
}
, {{-70, -68, -76}
, {-45, -10, 40}
, {27, 43, 40}
, {26, -20, -74}
, {-46, -50, -61}
, {101, 100, 60}
, {47, -82, -16}
, {-149, -115, 17}
, {26, 36, 31}
, {58, 28, 37}
, {80, 38, 113}
, {-35, 16, -32}
, {-71, -36, -72}
, {137, 104, 61}
, {-17, -105, 46}
, {-60, 32, 15}
, {76, 71, 117}
, {-53, 67, 31}
, {-35, -83, 15}
, {-22, -74, -34}
, {61, 29, 58}
, {81, 61, 40}
, {7, 27, -111}
, {-40, 25, 85}
, {-23, 66, 2}
, {23, 43, 29}
, {82, 35, 4}
, {30, -2, -21}
, {5, 12, 23}
, {91, 54, 0}
, {-74, 22, -4}
, {-23, 3, -82}
}
, {{-204, -142, -102}
, {42, 129, 140}
, {9, -24, -88}
, {-26, 24, 36}
, {5, 20, 17}
, {66, 76, -64}
, {-74, -61, 33}
, {-109, -109, -79}
, {67, -60, 72}
, {7, -92, -95}
, {0, 25, -36}
, {13, 0, -169}
, {-68, -72, -63}
, {78, -73, -7}
, {94, 33, -33}
, {-86, 22, -62}
, {4, -32, -81}
, {5, -89, -59}
, {37, -12, -90}
, {82, 152, 11}
, {24, 40, 7}
, {-45, 0, 51}
, {4, 64, -55}
, {83, 14, -52}
, {-29, -19, -50}
, {23, 81, 30}
, {84, 6, -70}
, {-117, 114, 190}
, {-27, -84, 5}
, {68, 34, -94}
, {21, -87, -93}
, {36, -91, 53}
}
, {{-2, 13, -87}
, {-28, -138, -36}
, {31, 12, -51}
, {112, 58, 83}
, {-81, 2, -76}
, {-24, -37, 3}
, {-6, 16, 44}
, {-12, -106, 20}
, {38, 21, 57}
, {28, 56, -50}
, {9, 82, 49}
, {62, 42, -70}
, {-62, 30, -36}
, {24, 10, -52}
, {12, 34, 64}
, {9, -94, -42}
, {-3, -25, -12}
, {-45, -41, -27}
, {80, 8, -30}
, {72, -5, 108}
, {82, -2, -3}
, {38, -44, -95}
, {-9, -80, -23}
, {67, -49, -77}
, {-8, 1, 69}
, {-65, -14, 6}
, {23, 49, 38}
, {-33, -47, 132}
, {0, -88, 12}
, {-18, 78, 17}
, {-4, 21, -27}
, {-39, 90, 52}
}
, {{-78, -44, -49}
, {-118, -132, -102}
, {-52, -5, -51}
, {-91, -43, 37}
, {72, 61, 148}
, {8, 6, -102}
, {37, 10, 118}
, {-13, -39, -72}
, {92, 66, 65}
, {35, 91, 19}
, {9, 17, -116}
, {91, -126, 62}
, {-59, -95, -114}
, {97, 17, 38}
, {106, 47, 23}
, {101, -41, 5}
, {14, 3, -58}
, {49, -19, 74}
, {111, 20, 66}
, {60, 18, -5}
, {-19, -4, -16}
, {-85, -91, 10}
, {12, -26, 102}
, {87, -130, -103}
, {19, -67, 64}
, {-63, -75, -53}
, {70, -15, -79}
, {11, -40, -24}
, {44, -111, -58}
, {-5, -14, -14}
, {18, 11, 26}
, {54, 67, 26}
}
, {{101, -27, -42}
, {-77, -65, 60}
, {-134, 27, -43}
, {27, 25, -71}
, {206, 32, 127}
, {31, -34, 16}
, {76, 47, 83}
, {49, 59, 114}
, {-74, -62, -14}
, {85, 55, 17}
, {-94, 73, -36}
, {2, -95, -23}
, {53, -76, 25}
, {21, 92, 24}
, {51, 4, -60}
, {-30, -71, 10}
, {-19, 9, -73}
, {-9, -21, -32}
, {49, -105, -93}
, {9, 14, -94}
, {47, 32, 115}
, {-69, -35, -51}
, {81, -41, 112}
, {-17, 93, -31}
, {-13, -66, 116}
, {-83, -31, 79}
, {72, 35, 56}
, {-239, -53, -117}
, {64, 10, -45}
, {-28, 8, 47}
, {98, -39, -63}
, {43, 43, -45}
}
, {{-29, 4, 56}
, {-92, 50, 4}
, {-90, 0, -72}
, {46, 74, 52}
, {80, 47, 12}
, {-70, -56, -43}
, {0, -60, 25}
, {12, 14, 131}
, {9, -14, -83}
, {65, -62, 85}
, {64, -22, 26}
, {-28, 2, 46}
, {-43, -64, -95}
, {-27, -108, -136}
, {46, 62, 84}
, {-131, -102, -23}
, {3, 124, -21}
, {-128, -164, -33}
, {44, 12, 68}
, {-63, -45, -78}
, {3, 25, -9}
, {-150, -83, -128}
, {32, 5, 70}
, {48, 128, -57}
, {82, 105, 12}
, {41, 21, 136}
, {46, -9, -65}
, {-7, 18, -25}
, {81, 24, 138}
, {53, 20, 88}
, {60, -8, 61}
, {-22, 39, -42}
}
, {{-73, -83, 31}
, {106, 83, 78}
, {-26, 92, -92}
, {-147, -77, -108}
, {153, 107, 100}
, {34, -87, 24}
, {-5, -29, 65}
, {89, 77, 22}
, {49, -18, 28}
, {31, 77, -49}
, {64, 1, -21}
, {41, 57, 28}
, {89, -69, 21}
, {-31, 94, -15}
, {-91, 15, 71}
, {18, -12, -7}
, {80, 78, 65}
, {115, 59, 139}
, {-108, 74, -10}
, {0, -20, -51}
, {77, -93, -84}
, {7, -37, 14}
, {-71, 77, -8}
, {-45, -65, -80}
, {-3, 53, 142}
, {-44, 41, -54}
, {103, -84, 48}
, {-189, -21, -130}
, {68, 86, -47}
, {21, -86, -61}
, {29, 21, 95}
, {-32, -127, -16}
}
, {{18, 43, 56}
, {-9, 15, 2}
, {17, -42, -48}
, {148, 110, 30}
, {64, -6, 13}
, {39, -28, 45}
, {-1, -28, 63}
, {84, 54, 45}
, {-76, 74, -10}
, {-10, -39, -2}
, {119, -63, -24}
, {-97, 23, 12}
, {46, -36, -63}
, {37, -49, -39}
, {3, -98, 78}
, {-6, -32, -132}
, {22, -122, -24}
, {0, -56, -112}
, {-62, 63, 29}
, {137, 90, 87}
, {-27, -45, -27}
, {-35, 37, -36}
, {30, 58, 95}
, {59, -20, 72}
, {-82, -15, -84}
, {-38, -74, 9}
, {-29, 82, 61}
, {9, -72, -18}
, {11, -49, 96}
, {39, -79, 61}
, {-24, 40, -85}
, {-6, 79, 51}
}
, {{-24, -2, -60}
, {87, 102, 148}
, {47, 9, -18}
, {47, 144, 159}
, {148, 119, 108}
, {-12, -62, -78}
, {-22, -30, 91}
, {-21, 80, -32}
, {31, 25, 38}
, {83, -3, -87}
, {-128, -50, 15}
, {-90, -33, 47}
, {58, 88, 71}
, {-123, 6, -77}
, {3, -47, 39}
, {0, 84, -63}
, {-14, 15, -112}
, {-43, -31, -85}
, {-41, 13, 60}
, {-8, -27, 71}
, {-9, -57, -19}
, {26, 28, 12}
, {102, 55, 47}
, {-57, -21, -95}
, {50, -36, -91}
, {-38, 22, 1}
, {41, -38, 56}
, {58, -18, 126}
, {46, -82, -10}
, {-5, -96, -84}
, {18, 22, -55}
, {-33, -55, -49}
}
, {{6, -67, -58}
, {9, 75, 54}
, {-74, -50, 28}
, {12, -87, -55}
, {18, 52, 61}
, {51, -5, 70}
, {-17, 34, 23}
, {4, 43, -26}
, {93, -67, -88}
, {16, 65, 4}
, {81, 80, 69}
, {57, -50, 30}
, {0, 2, 58}
, {-25, -52, 6}
, {94, -14, 107}
, {-104, -11, 9}
, {128, 81, 60}
, {-88, 3, 27}
, {102, -109, 88}
, {34, -20, 32}
, {-54, -36, -101}
, {31, 48, 28}
, {42, -27, 83}
, {-38, -38, -94}
, {-48, -89, -4}
, {81, 113, 50}
, {-27, -21, -74}
, {4, -32, -60}
, {49, 129, 34}
, {42, 17, -42}
, {-5, -87, 4}
, {30, -3, -91}
}
, {{131, 101, -70}
, {33, 94, 93}
, {3, -90, 2}
, {41, -8, -21}
, {83, 45, -45}
, {4, -53, -21}
, {33, -62, -67}
, {-18, 36, -36}
, {91, 112, 23}
, {-24, -10, -114}
, {-83, -2, -2}
, {101, -21, -32}
, {80, -12, -48}
, {-67, 25, 33}
, {3, -7, -102}
, {55, 66, -106}
, {-179, -88, -30}
, {-54, -5, -128}
, {-11, -39, -5}
, {78, 33, 96}
, {-11, -55, -41}
, {-116, -92, -60}
, {129, 5, 60}
, {7, 33, -26}
, {15, 61, -52}
, {-78, 39, 65}
, {-103, 18, -31}
, {90, 17, -31}
, {-57, 92, 63}
, {34, -52, 74}
, {76, 40, -81}
, {90, -73, -33}
}
, {{-20, 117, -2}
, {41, 9, 93}
, {-51, 67, 56}
, {-4, -28, 20}
, {60, -41, 88}
, {-17, 126, 124}
, {-66, 5, -16}
, {-104, -60, 9}
, {-120, -107, -163}
, {9, -50, -27}
, {1, 37, 100}
, {-85, 80, 102}
, {4, 64, 104}
, {65, 79, 129}
, {-39, 49, -71}
, {44, -5, 52}
, {26, -42, 114}
, {63, 79, 108}
, {-80, -70, 47}
, {116, 188, 114}
, {-24, -41, 90}
, {126, 7, 159}
, {-23, -41, 49}
, {-26, 82, -47}
, {-137, -109, -180}
, {-121, -155, -94}
, {66, 160, 84}
, {0, -22, -78}
, {62, 56, -67}
, {-64, -48, 45}
, {15, -57, 31}
, {169, 93, 144}
}
, {{-66, 13, -129}
, {89, 142, 153}
, {-20, 13, -53}
, {-194, -65, -40}
, {-35, 18, -49}
, {9, 74, -7}
, {33, 9, -17}
, {-10, 113, 62}
, {-112, -30, 88}
, {74, -109, -6}
, {18, 109, 36}
, {89, -48, -101}
, {-32, 130, 87}
, {56, 4, 45}
, {90, -99, 18}
, {-53, -26, -14}
, {114, 171, 113}
, {85, 19, 64}
, {-9, -113, -4}
, {-78, -54, -108}
, {-63, 25, -14}
, {81, 67, -12}
, {-25, -8, -57}
, {25, 52, 4}
, {90, -48, 4}
, {96, -38, 25}
, {58, -44, 120}
, {-34, 16, -116}
, {77, 105, 46}
, {54, -52, 31}
, {42, -15, -92}
, {-22, -100, 20}
}
, {{98, -54, -45}
, {-22, 194, 58}
, {-78, -52, -93}
, {99, 175, 82}
, {70, 0, 24}
, {-7, 52, 1}
, {21, 69, 66}
, {-113, -156, 0}
, {-97, -75, -60}
, {-24, 10, 40}
, {121, 53, 135}
, {-61, -46, -16}
, {93, 112, 57}
, {29, 59, 0}
, {34, -72, 56}
, {-116, -21, 7}
, {-76, -117, -50}
, {-181, -67, -114}
, {-62, 93, 85}
, {72, 18, 29}
, {-26, 74, 28}
, {44, -69, -63}
, {3, 80, 111}
, {70, 59, 85}
, {-70, -49, -49}
, {-66, -22, -76}
, {-109, 28, 53}
, {-105, -17, 37}
, {-55, -49, -38}
, {-81, -51, -57}
, {13, -74, 53}
, {102, 47, 78}
}
, {{-76, -76, 40}
, {121, 55, 112}
, {6, 6, 94}
, {-79, 28, -7}
, {2, -72, -16}
, {-26, 79, -46}
, {-98, -97, 62}
, {-17, 115, 36}
, {54, 89, -3}
, {-19, -60, 63}
, {111, 110, -63}
, {-79, 18, 129}
, {-39, 12, 130}
, {83, 89, -56}
, {-25, -18, -13}
, {-57, -106, 87}
, {164, 130, 25}
, {4, 105, 37}
, {-34, 26, -12}
, {22, 28, -55}
, {93, -10, -44}
, {-12, -41, -14}
, {-12, -164, -17}
, {17, 51, 47}
, {-25, -26, -46}
, {-106, 65, -47}
, {60, 85, 39}
, {-58, -47, -26}
, {112, -44, 62}
, {-33, -8, -87}
, {-21, 57, 47}
, {106, 11, -52}
}
, {{-167, -124, -130}
, {197, 132, 244}
, {19, 2, 46}
, {-6, 48, 9}
, {-57, 76, -37}
, {25, 107, 0}
, {-43, 39, -74}
, {-158, -47, -210}
, {-126, 7, 37}
, {-168, -172, -134}
, {40, 54, -51}
, {-20, 101, -18}
, {-1, 28, 66}
, {-38, -88, -54}
, {59, -45, 61}
, {-69, 32, 0}
, {102, 44, 14}
, {35, 80, 108}
, {-29, -73, -51}
, {-68, -19, -76}
, {7, 4, -5}
, {-146, 43, -46}
, {64, 31, 116}
, {102, 16, -32}
, {48, 125, 82}
, {-25, -100, 10}
, {22, 79, 0}
, {-55, -29, 6}
, {52, 47, 88}
, {91, 105, 37}
, {158, -2, 20}
, {-94, -121, -27}
}
, {{-74, -97, 38}
, {-19, 79, -37}
, {42, -34, -11}
, {-29, 63, 67}
, {161, 111, 150}
, {-40, 19, 24}
, {-33, 84, -15}
, {62, -36, 30}
, {53, 5, -53}
, {47, 13, 3}
, {29, 35, 4}
, {15, 15, -79}
, {-118, -151, -199}
, {90, 45, 141}
, {-15, 3, -16}
, {-10, 53, -73}
, {31, -47, 38}
, {-41, -42, 41}
, {49, 121, 60}
, {-81, -65, -96}
, {19, 0, -23}
, {-81, -45, -97}
, {29, -5, 82}
, {36, -82, 23}
, {20, 32, 68}
, {11, -42, 2}
, {-143, -123, 3}
, {37, -92, -66}
, {-33, -95, -54}
, {20, -39, 27}
, {-67, -33, -18}
, {-154, -161, -164}
}
}
;

#undef INPUT_CHANNELS
#undef CONV_FILTERS
#undef CONV_KERNEL_SIZE
/**
  ******************************************************************************
  * @file    maxpool.cc
  * @author  Pierre-Emmanuel Novac <penovac@unice.fr>, LEAT, CNRS, Université Côte d'Azur, France
  * @version 1.0.0
  * @date    24 march 2020
  * @brief   Template generating plain C code for the implementation of Convolutional Neural Networks on MCU
  */

#ifndef SINGLE_FILE
#include "number.h"
#endif

#define INPUT_CHANNELS  32
#define INPUT_SAMPLES   3
#define POOL_SIZE       3
#define POOL_STRIDE     3
#define POOL_PAD        0 // Unsupported
#define POOL_LENGTH	    ( ( (INPUT_SAMPLES - POOL_SIZE + (2*POOL_PAD) ) / POOL_STRIDE ) + 1 )

#define ACTIVATION_LINEAR

typedef number_t max_pooling1d_4_output_type[INPUT_CHANNELS][POOL_LENGTH];

static inline void max_pooling1d_4(
  const number_t input[INPUT_CHANNELS][INPUT_SAMPLES], 	    // IN
  number_t output[INPUT_CHANNELS][POOL_LENGTH]) {	// OUT

  unsigned short pos_x, k; 	// loop indexes for output volume
  unsigned int x;
  number_t max, tmp; 

  for (k = 0; k < INPUT_CHANNELS; k++) 
    for (pos_x = 0; pos_x < POOL_LENGTH; pos_x++) {
#ifdef ACTIVATION_LINEAR
      max = input[k][pos_x*POOL_STRIDE];
      x = 1;
#elif defined(ACTIVATION_RELU)
      max = 0;
      x = 0;
#endif
      for (; x < POOL_SIZE; x++) {
        tmp = input[k][(pos_x*POOL_STRIDE)+x]; 
        if (max < tmp)
          max = tmp;
      }
      output[k][pos_x] = max; 
    }
}

#undef INPUT_CHANNELS  
#undef INPUT_SAMPLES
#undef POOL_SIZE
#undef POOL_STRIDE
#undef POOL_PAD
#undef POOL_LENGTH
#undef ACTIVATION_LINEAR
/**
  ******************************************************************************
  * @file    flatten.cc
  * @author  Pierre-Emmanuel Novac <penovac@unice.fr>, LEAT, CNRS, Université Côte d'Azur, France
  * @version 1.0.0
  * @date    24 march 2020
  * @brief   Template generating plain C code for the implementation of Convolutional Neural Networks on MCU
  */

#ifndef SINGLE_FILE
#include "number.h"
#endif

#define INPUT_DIM [1][32]
#define OUTPUT_DIM 32

//typedef number_t *flatten_output_type;
typedef number_t flatten_output_type[OUTPUT_DIM];

#define flatten //noop (IN, OUT)  OUT = (number_t*)IN

#undef INPUT_DIM
#undef OUTPUT_DIM

/**
  ******************************************************************************
  * @file    fc.cc
  * @author  Pierre-Emmanuel Novac <penovac@unice.fr>, LEAT, CNRS, Université Côte d'Azur, France
  * @version 1.0.0
  * @date    24 march 2020
  * @brief   Template generating plain C code for the implementation of Convolutional Neural Networks on MCU
  */

#ifndef SINGLE_FILE
#include "number.h"
#endif

#define INPUT_SAMPLES 32
#define FC_UNITS 10
#define ACTIVATION_LINEAR

typedef number_t dense_output_type[FC_UNITS];

static inline void dense(
  const number_t input[INPUT_SAMPLES], 			      // IN
	const number_t kernel[FC_UNITS][INPUT_SAMPLES],  // IN

	const number_t bias[FC_UNITS],			              // IN

	number_t output[FC_UNITS]) {			                // OUT

  unsigned short k, z; 
  long_number_t output_acc; 

  for (k = 0; k < FC_UNITS; k++) { 
    output_acc = 0; 
    for (z = 0; z < INPUT_SAMPLES; z++) 
      output_acc = output_acc + ( kernel[k][z] * input[z] ); 

    output_acc = scale_number_t(output_acc);

    output_acc = output_acc + bias[k]; 


    // Activation function
#ifdef ACTIVATION_LINEAR
    // Linear (MEANS NONE)
    output[k] = clamp_to_number_t(output_acc);
#elif defined(ACTIVATION_RELU)
    // ReLU
    if (output_acc < 0)
      output[k] = 0;
    else
      output[k] = clamp_to_number_t(output_acc);
#endif
  }
}

#undef INPUT_SAMPLES
#undef FC_UNITS
#undef ACTIVATION_LINEAR
/**
  ******************************************************************************
  * @file    weights/fc.cc
  * @author  Pierre-Emmanuel Novac <penovac@unice.fr>, LEAT, CNRS, Université Côte d'Azur, France
  * @version 1.0.0
  * @date    24 march 2020
  * @brief   Template generating plain C code for the implementation of Convolutional Neural Networks on MCU
  */

#define INPUT_SAMPLES 32
#define FC_UNITS 10


const int16_t dense_bias[FC_UNITS] = {-35, -164, 17, 46, -35, 12, 66, 15, 5, 65}
;

const int16_t dense_kernel[FC_UNITS][INPUT_SAMPLES] = {{-305, 225, -123, 112, -21, -38, -32, 111, 141, -6, -57, -244, -275, 249, -61, -42, -234, -90, -40, 47, -100, 323, -163, -222, -30, -73, -17, 176, -248, 157, 147, 65}
, {-214, -10, 159, -250, -155, 0, -97, 64, 180, -26, -21, 162, -46, 83, 299, -168, -279, -110, 25, 267, 9, 123, 216, -1, 168, 139, -74, 40, 17, -1, -447, 58}
, {-172, 142, -158, -426, -150, -72, -18, -110, 190, 44, 206, -299, -373, -186, -128, -187, 83, -112, -140, -71, -29, -19, 121, 174, 45, -102, -30, -42, 23, 41, 142, -229}
, {-103, 139, 1, -168, 158, -49, -228, 6, -209, 151, 79, -291, -117, -212, -198, 136, 126, 6, -21, -305, -26, -45, -29, -13, 152, 29, 49, -33, -192, 7, -119, 100}
, {186, 46, 200, 2, -6, 175, -91, -46, -39, -126, -90, 153, -159, -65, -140, 227, 162, -124, -166, -35, 119, -177, -151, -91, -191, 112, 125, -62, -137, -110, -120, -94}
, {-42, -252, 63, 222, 286, -14, -148, 61, -151, -255, -67, -161, 150, -94, -56, -27, 20, 116, -80, 5, -102, -223, 182, 153, -223, 90, 29, -207, 261, 41, -80, 138}
, {51, -74, 67, -38, 164, 33, 157, 88, 139, -273, 34, -122, 170, -138, 141, -92, 83, 166, 155, -120, -74, -80, -99, -112, -111, -133, 110, -206, -19, -196, -58, -286}
, {-74, -17, -160, -143, -163, -23, -90, -43, 100, 89, -154, -504, -350, 148, -173, 93, 137, -148, -49, 73, -299, 193, 10, -115, 171, -324, 128, 48, 201, -57, -114, -148}
, {-259, 83, -116, -46, 131, 60, -98, -127, -174, 20, -39, -258, 174, -274, -31, 46, -164, -88, 186, 57, 76, 26, 60, 11, -222, -88, 84, -263, -2, -139, -116, 197}
, {434, 10, 51, -717, 166, -95, 118, 282, -161, -168, -55, 283, 149, -121, 211, -41, 179, -258, -266, -66, 234, 67, -215, 177, 170, -63, -534, -102, -212, -314, 145, 60}
}
;

#undef INPUT_SAMPLES
#undef FC_UNITS
/**
  ******************************************************************************
  * @file    model.hh
  * @author  Pierre-Emmanuel Novac <penovac@unice.fr>, LEAT, CNRS, Université Côte d'Azur, France
  * @version 1.0.0
  * @date    08 july 2020
  * @brief   Template generating plain C code for the implementation of Convolutional Neural Networks on MCU
  */

#ifndef __MODEL_H__
#define __MODEL_H__

#ifndef SINGLE_FILE
#include "number.h"
#endif

#define MODEL_OUTPUT_SAMPLES 10
#define MODEL_INPUT_SAMPLES 16000 // node 0 is InputLayer so use its output shape as input shape of the model
#define MODEL_INPUT_CHANNELS 1

void cnn(
  const number_t input[MODEL_INPUT_CHANNELS][MODEL_INPUT_SAMPLES],
  //dense_output_type dense_output);
  number_t output[MODEL_OUTPUT_SAMPLES]);

#endif//__MODEL_H__
/**
  ******************************************************************************
  * @file    model.cc
  * @author  Pierre-Emmanuel Novac <penovac@unice.fr>, LEAT, CNRS, Université Côte d'Azur, France
  * @version 1.0.0
  * @date    24 march 2020
  * @brief   Template generating plain C code for the implementation of Convolutional Neural Networks on MCU
  */

#ifndef SINGLE_FILE
#include "number.h"
#include "model.h"

 // InputLayer is excluded
#include "max_pooling1d.c" // InputLayer is excluded
#include "conv1d.c"
#include "weights/conv1d.c" // InputLayer is excluded
#include "max_pooling1d_1.c" // InputLayer is excluded
#include "conv1d_1.c"
#include "weights/conv1d_1.c" // InputLayer is excluded
#include "max_pooling1d_2.c" // InputLayer is excluded
#include "conv1d_2.c"
#include "weights/conv1d_2.c" // InputLayer is excluded
#include "max_pooling1d_3.c" // InputLayer is excluded
#include "conv1d_3.c"
#include "weights/conv1d_3.c" // InputLayer is excluded
#include "max_pooling1d_4.c" // InputLayer is excluded
#include "flatten.c" // InputLayer is excluded
#include "dense.c"
#include "weights/dense.c"
#endif

void cnn(
  const number_t input[MODEL_INPUT_CHANNELS][MODEL_INPUT_SAMPLES],
  dense_output_type dense_output) {

  // Output array allocation
  static union {
    max_pooling1d_output_type max_pooling1d_output;
    max_pooling1d_1_output_type max_pooling1d_1_output;
    max_pooling1d_2_output_type max_pooling1d_2_output;
    max_pooling1d_3_output_type max_pooling1d_3_output;
    max_pooling1d_4_output_type max_pooling1d_4_output;
    flatten_output_type flatten_output;
  } activations1;

  static union {
    conv1d_output_type conv1d_output;
    conv1d_1_output_type conv1d_1_output;
    conv1d_2_output_type conv1d_2_output;
    conv1d_3_output_type conv1d_3_output;
  } activations2;


  //static union {
//
//    static input_1_output_type input_1_output;
//
//    static max_pooling1d_output_type max_pooling1d_output;
//
//    static conv1d_output_type conv1d_output;
//
//    static max_pooling1d_1_output_type max_pooling1d_1_output;
//
//    static conv1d_1_output_type conv1d_1_output;
//
//    static max_pooling1d_2_output_type max_pooling1d_2_output;
//
//    static conv1d_2_output_type conv1d_2_output;
//
//    static max_pooling1d_3_output_type max_pooling1d_3_output;
//
//    static conv1d_3_output_type conv1d_3_output;
//
//    static max_pooling1d_4_output_type max_pooling1d_4_output;
//
//    static flatten_output_type flatten_output;
//
  //} activations;

  // Model layers call chain
 // InputLayer is excluded 
  max_pooling1d(
     // First layer uses input passed as model parameter
    input,
    activations1.max_pooling1d_output
  );
 // InputLayer is excluded 
  conv1d(
    
    activations1.max_pooling1d_output,
    conv1d_kernel,
    conv1d_bias,
    activations2.conv1d_output
  );
 // InputLayer is excluded 
  max_pooling1d_1(
    
    activations2.conv1d_output,
    activations1.max_pooling1d_1_output
  );
 // InputLayer is excluded 
  conv1d_1(
    
    activations1.max_pooling1d_1_output,
    conv1d_1_kernel,
    conv1d_1_bias,
    activations2.conv1d_1_output
  );
 // InputLayer is excluded 
  max_pooling1d_2(
    
    activations2.conv1d_1_output,
    activations1.max_pooling1d_2_output
  );
 // InputLayer is excluded 
  conv1d_2(
    
    activations1.max_pooling1d_2_output,
    conv1d_2_kernel,
    conv1d_2_bias,
    activations2.conv1d_2_output
  );
 // InputLayer is excluded 
  max_pooling1d_3(
    
    activations2.conv1d_2_output,
    activations1.max_pooling1d_3_output
  );
 // InputLayer is excluded 
  conv1d_3(
    
    activations1.max_pooling1d_3_output,
    conv1d_3_kernel,
    conv1d_3_bias,
    activations2.conv1d_3_output
  );
 // InputLayer is excluded 
  max_pooling1d_4(
    
    activations2.conv1d_3_output,
    activations1.max_pooling1d_4_output
  );
 // InputLayer is excluded 
  flatten(
    
    activations1.max_pooling1d_4_output,
    activations1.flatten_output
  );
 // InputLayer is excluded 
  dense(
    
    activations1.flatten_output,
    dense_kernel,
    dense_bias, // Last layer uses output passed as model parameter
    dense_output
  );

}
